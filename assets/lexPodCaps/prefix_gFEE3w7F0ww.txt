WEBVTT

00:00.000 --> 00:03.600
The following is a conversation with Travis Oliphant,

00:03.600 --> 00:05.520
one of the most impactful programmers

00:05.520 --> 00:07.920
and data scientists ever.

00:07.920 --> 00:12.760
He created NumPy, SciPy, and Anaconda.

00:12.760 --> 00:14.500
NumPy formed the foundation

00:14.500 --> 00:17.040
of tensor-based machine learning in Python,

00:17.040 --> 00:18.880
SciPy formed the foundation

00:18.880 --> 00:20.960
of scientific programming in Python,

00:20.960 --> 00:23.980
and Anaconda, specifically with Conda,

00:23.980 --> 00:27.620
made Python more accessible to a much larger audience.

00:27.660 --> 00:31.220
Travis's life work across a large number of programming

00:31.220 --> 00:34.020
and entrepreneurial efforts has

00:34.020 --> 00:36.980
and will continue to have immeasurable impact

00:36.980 --> 00:40.100
on millions of lives by empowering scientists

00:40.100 --> 00:43.660
and engineers in big companies, small companies,

00:43.660 --> 00:47.220
and open source communities to take on difficult problems

00:47.220 --> 00:50.540
and solve them with the power of programming.

00:50.540 --> 00:53.500
Plus, he's a truly kind human being,

00:53.500 --> 00:56.040
which is something that when combined with vision

00:56.040 --> 00:58.440
and ambition makes for a great leader

00:58.440 --> 01:01.200
and a great person to chat with.

01:01.200 --> 01:02.360
To support this podcast,

01:02.360 --> 01:04.920
please check out our sponsors in the description.

01:04.920 --> 01:07.000
This is the Lex Fridman podcast,

01:07.000 --> 01:10.660
and here is my conversation with Travis Oliphant.

01:11.560 --> 01:14.520
What was the first computer program you've ever written?

01:14.520 --> 01:15.360
Do you remember?

01:15.360 --> 01:16.960
Whoa, that's a good question.

01:16.960 --> 01:18.400
I think it was in fourth grade.

01:18.400 --> 01:20.940
Just a simple loop in basic.

01:20.940 --> 01:21.780
Basic.

01:21.780 --> 01:25.360
Basic, yeah, on an Atari 800, Atari 400, I think.

01:25.360 --> 01:26.840
It was an Atari 800.

01:26.840 --> 01:28.320
It was part of a class,

01:28.320 --> 01:32.560
and we just were just basic loops to print things out.

01:32.560 --> 01:34.920
Did you use go-to statements?

01:34.920 --> 01:38.000
Yes, yes, we used go-to statements.

01:38.000 --> 01:39.560
I remember in the early days,

01:39.560 --> 01:42.200
that's when I first realized there's principles

01:42.200 --> 01:43.960
to programming, when I was told

01:43.960 --> 01:45.720
that don't use go-to statements.

01:45.720 --> 01:48.320
Those are bad software engineering.

01:48.320 --> 01:52.040
It goes against what great, beautiful code is.

01:52.040 --> 01:54.800
I was like, oh, okay, there's rules to this game.

01:54.800 --> 01:56.280
I didn't see that until high school

01:56.280 --> 01:58.360
when I took an AP computer science course.

01:58.360 --> 02:02.200
I did a lot of other kinds of just programming in TI,

02:02.200 --> 02:04.160
but finally, when I took an AP computer science course

02:04.160 --> 02:05.760
in Pascal.

02:05.760 --> 02:06.600
Wow.

02:06.600 --> 02:07.440
Yeah, it was Pascal.

02:07.440 --> 02:09.760
That's when I, oh, there are these principles.

02:09.760 --> 02:11.360
Not C or C++?

02:11.360 --> 02:14.680
No, I didn't take C until the next year in college.

02:14.680 --> 02:16.600
I had a course in C,

02:16.600 --> 02:18.100
but I haven't done much in Pascal,

02:18.100 --> 02:20.180
just that AP computer science course.

02:21.320 --> 02:23.480
Now, sorry for the romanticized question,

02:23.480 --> 02:26.760
but when did you first fall in love with programming?

02:26.760 --> 02:27.920
Oh, man, good question.

02:27.920 --> 02:30.320
I think actually when I was 10,

02:30.320 --> 02:33.520
my dad got us a Timex Sinclair,

02:33.520 --> 02:37.240
and he was excited about the spreadsheet capability,

02:37.240 --> 02:39.600
and then, but I made him get the basic,

02:39.600 --> 02:41.880
the add-ons so we could actually program in basic,

02:41.880 --> 02:44.560
and just being able to write instructions

02:44.560 --> 02:46.000
and have the computer do something.

02:46.000 --> 02:50.120
Then we got a TI-994A when I was about 12,

02:50.120 --> 02:53.000
and I would just, it had sprites and graphics and music

02:53.000 --> 02:55.320
you could actually program it to do music.

02:55.320 --> 02:58.640
That's when I really sort of fell in love with programming.

02:58.640 --> 03:01.080
So this is a full, like a real computer

03:01.080 --> 03:04.080
with like, with memory and storage,

03:04.080 --> 03:05.240
the processor, so we're not,

03:05.240 --> 03:06.080
because it takes TI.

03:06.080 --> 03:08.240
Yeah, the Timex Sinclair was one of the very first.

03:08.240 --> 03:11.440
It was a cheap, cheap, like, I think it was,

03:11.440 --> 03:14.480
well, it was still expensive, but it was 2K of memory.

03:14.480 --> 03:16.800
We got the 16K add-on pack,

03:16.800 --> 03:19.040
but yeah, it had memory and you could program it.

03:19.040 --> 03:20.960
You had the, in order to store your programs,

03:20.960 --> 03:22.920
you had to attach a tape drive.

03:23.840 --> 03:25.440
I still remember that old, the sound that would play

03:25.440 --> 03:29.440
when you converted the modem would convert digital bits

03:29.440 --> 03:31.920
to audio files set on a tape drive.

03:31.920 --> 03:34.760
Still remember that sound, but that was the storage.

03:34.760 --> 03:36.160
And what was the programming language?

03:36.160 --> 03:36.980
Do you remember?

03:36.980 --> 03:37.820
It was basic.

03:37.820 --> 03:38.640
It was basic.

03:38.640 --> 03:39.480
And then they had a VisiCalc,

03:39.480 --> 03:40.600
and so a little bit of spreadsheet programming

03:40.600 --> 03:42.760
and VisiCalc, but mostly just some basic.

03:42.760 --> 03:46.320
Do you remember what kind of things drew you to programming?

03:46.320 --> 03:48.720
Was it working with data?

03:48.720 --> 03:52.600
Was it video games and video games, math, mathy stuff?

03:53.280 --> 03:54.800
I've always loved math,

03:54.800 --> 03:58.080
and a lot of people think they don't like math

03:58.080 --> 04:00.440
because I think when they're exposed to it early,

04:00.440 --> 04:02.120
it's about memory.

04:02.120 --> 04:03.240
When you're exposed to math early,

04:03.240 --> 04:04.280
you have a good short-term memory,

04:04.280 --> 04:05.920
you can remember it's timetables.

04:05.920 --> 04:08.600
And I do have a reasonably, I mean, not perfect,

04:08.600 --> 04:12.480
but a reasonably long little short-term memory buffer.

04:12.480 --> 04:14.320
And so I did great at timetables.

04:14.320 --> 04:15.840
I said, oh, I'm good at math.

04:15.840 --> 04:17.380
But I started to really like math,

04:17.380 --> 04:20.320
just the problem-solving aspect.

04:20.360 --> 04:25.080
And so computing was problem-solving applied.

04:25.080 --> 04:28.320
And so that's always kind of been the draw,

04:28.320 --> 04:30.520
kind of coupled with the mathematics.

04:30.520 --> 04:33.960
Did you ever see the computer as like an extension

04:33.960 --> 04:36.560
of your mind, like something able to achieve?

04:36.560 --> 04:37.800
Not till later.

04:37.800 --> 04:38.640
Okay.

04:38.640 --> 04:39.480
Yeah, not then.

04:39.480 --> 04:40.920
It's just like a little set of puzzles

04:40.920 --> 04:43.560
that you can play with, and you can play with math puzzles.

04:43.560 --> 04:46.160
Yeah, it was too rudimentary early on.

04:46.160 --> 04:49.200
Like it was sort of, yeah, it was a lot of work

04:49.200 --> 04:51.440
to actually take a thought you'd have

04:51.440 --> 04:53.120
and actually get it implemented.

04:53.120 --> 04:56.000
And that's still work, but it's getting easier.

04:56.000 --> 04:58.240
And so, yeah, I would say that's definitely

04:58.240 --> 05:01.440
what's attracted me to Python is that that was more real.

05:01.440 --> 05:02.280
Right?

05:02.280 --> 05:04.600
I could think in Python.

05:04.600 --> 05:05.800
Speaking of foreign language,

05:05.800 --> 05:07.760
I only speak another language fluently,

05:07.760 --> 05:09.040
besides English, which is Spanish.

05:09.040 --> 05:11.720
And I remember the day when I would dream in Spanish.

05:11.720 --> 05:13.440
And you start to think in that language.

05:13.440 --> 05:15.300
And then you actually, I do definitely believe

05:15.300 --> 05:18.800
that language limits or expands your thinking.

05:19.640 --> 05:21.200
There are some languages that actually

05:21.200 --> 05:23.880
lead you to certain thought processes.

05:23.880 --> 05:27.280
Yeah, like, so I speak Russian fluently.

05:27.280 --> 05:30.960
And that's certainly a language that leads you

05:30.960 --> 05:33.240
down certain thought processes.

05:33.240 --> 05:38.240
Well, yeah, I mean, there's a history of the two world wars,

05:39.360 --> 05:43.080
of millions of people starving to death

05:43.080 --> 05:45.200
or near to death throughout its history,

05:45.200 --> 05:47.560
of suffering, of injustice,

05:47.880 --> 05:49.760
this promise sold to the people,

05:49.760 --> 05:54.320
and then the carpet or whatever swept from under them.

05:54.320 --> 05:55.680
And it's like broken promises.

05:55.680 --> 05:59.040
And all of that pain and melancholy is in the language,

05:59.040 --> 06:02.760
the sad songs, the sad hopeful songs,

06:02.760 --> 06:06.200
the over romanticized, like, I love you, I hate you,

06:06.200 --> 06:11.200
the swings between all the various spectrums of emotion.

06:11.480 --> 06:13.760
So that's all within the language.

06:13.800 --> 06:18.040
The way it's twisted, there's a strong culture

06:18.040 --> 06:19.480
of rhyming poetry.

06:19.480 --> 06:21.840
So like the bards, like the sync,

06:21.840 --> 06:24.760
there's a musicality to the language too.

06:24.760 --> 06:27.400
Did Dostoevsky write in Russian?

06:27.400 --> 06:30.200
Yeah, so like Dostoevsky, Tolstoy, all the,

06:32.120 --> 06:32.960
all the-

06:32.960 --> 06:34.680
The ones that I know about, which are translated,

06:34.680 --> 06:36.360
and I'm curious how the translations.

06:36.360 --> 06:40.920
So Dostoevsky did not use the musicality

06:40.920 --> 06:42.200
of the language too much.

06:42.200 --> 06:44.160
So he actually translates pretty well

06:44.160 --> 06:46.520
because it's so philosophically dense

06:46.520 --> 06:48.440
that the story does a lot of the work.

06:48.440 --> 06:51.120
But there's a bunch of things that are untranslatable.

06:51.120 --> 06:53.560
Certainly the poetry is not translatable.

06:53.560 --> 06:57.920
I actually have a few conversations coming up offline

06:57.920 --> 06:59.960
and also on this podcast with people

06:59.960 --> 07:01.920
who've translated Dostoevsky.

07:01.920 --> 07:04.960
And that's for people who worked,

07:04.960 --> 07:07.320
who work in this field, know how difficult that is.

07:07.320 --> 07:10.360
Sometimes you can spend months

07:10.400 --> 07:14.000
thinking about a single sentence in context,

07:14.000 --> 07:16.400
because there's just a magic captured by that sentence.

07:16.400 --> 07:18.960
And how do you translate it just in the right way?

07:18.960 --> 07:22.640
Because those words can be really powerful.

07:22.640 --> 07:24.280
There's a famous line,

07:24.280 --> 07:27.360
beauty will save the world from Dostoevsky.

07:27.360 --> 07:29.480
There's so many ways to translate that.

07:29.480 --> 07:32.680
And you're right, the language gives you the tools

07:32.680 --> 07:34.120
with which to tell the story,

07:34.120 --> 07:37.240
but it also leads your mind down certain trajectories

07:37.240 --> 07:39.640
and paths to where over time,

07:39.640 --> 07:41.120
as you think in that language,

07:41.120 --> 07:42.720
you become a different human being.

07:42.720 --> 07:43.760
Yes. Yeah.

07:43.760 --> 07:45.840
Yeah, that's a fascinating reality, I think.

07:45.840 --> 07:47.000
I know people have explored that,

07:47.000 --> 07:49.720
but it's just rediscovered.

07:49.720 --> 07:52.520
Well, we live in our own little pockets.

07:52.520 --> 07:56.840
This is the sad thing is I feel like, unfortunately,

07:56.840 --> 07:59.120
given time and getting older,

07:59.120 --> 08:03.600
I'll never know China, the Chinese world,

08:03.600 --> 08:05.760
because I don't truly know the language.

08:05.760 --> 08:06.960
Same with Japanese.

08:07.000 --> 08:10.360
I don't really know Japanese and Portuguese and Brazil,

08:10.360 --> 08:12.080
that whole South American continent.

08:12.080 --> 08:14.480
Like, yeah, I'll go to Brazil and Argentina,

08:14.480 --> 08:17.200
but will I truly understand the people

08:17.200 --> 08:18.320
if I don't understand the language?

08:18.320 --> 08:23.320
And it's sad because I wonder how many geniuses

08:24.600 --> 08:28.600
we're missing because so much of the scientific world,

08:28.600 --> 08:31.480
so much of the technical world is in English,

08:31.480 --> 08:33.160
and so much of it might be lost

08:33.160 --> 08:36.120
because we don't have the common language.

08:36.120 --> 08:36.960
I completely agree.

08:36.960 --> 08:39.680
I'm very much in that vein of,

08:39.680 --> 08:41.840
there's a lot of genius out there that we miss,

08:41.840 --> 08:45.080
and it's sort of fortunate when it bubbles up

08:45.080 --> 08:48.720
into something that we can understand or process,

08:48.720 --> 08:50.440
there's a lot we miss.

08:50.440 --> 08:51.400
So that's why I tend to lean

08:51.400 --> 08:54.080
towards really loving democratization

08:54.080 --> 08:55.480
or things that empower people,

08:55.480 --> 09:00.080
or very resistant to sort of authoritarian structures.

09:00.080 --> 09:01.920
Fundamentally for that reason,

09:01.920 --> 09:04.480
well, several reasons, but it just hurts us.

09:04.640 --> 09:06.400
We're worse off.

09:06.400 --> 09:09.000
So speaking of languages that empower you,

09:09.000 --> 09:11.800
so Python was the first language for me

09:11.800 --> 09:16.800
that I really enjoyed thinking in, as you said.

09:16.800 --> 09:18.480
Sounds like you shared my experience, too.

09:18.480 --> 09:19.600
So when did you first,

09:19.600 --> 09:21.880
do you remember when you first kind of connected with Python?

09:21.880 --> 09:23.720
Maybe you even fell in love with Python?

09:23.720 --> 09:24.560
It's a good question.

09:24.560 --> 09:26.520
It was a process, it took about a year.

09:26.520 --> 09:29.480
I first encountered Python in 1997.

09:29.480 --> 09:30.560
I was a graduate student

09:30.560 --> 09:32.960
studying biomedical engineering at the Mayo Clinic,

09:32.960 --> 09:35.720
and I had previously, I'd been involved in

09:37.760 --> 09:39.320
taking information from satellites.

09:39.320 --> 09:41.280
I was an electrical engineering student,

09:41.280 --> 09:42.640
used to taking information

09:42.640 --> 09:44.000
and trying to get something out of it,

09:44.000 --> 09:45.840
doing some data processing, getting information out of it.

09:45.840 --> 09:47.640
And I'd done that in MATLAB.

09:47.640 --> 09:49.120
I'd done that in Perl.

09:49.120 --> 09:52.520
I'd done that in scripting on a VMS.

09:52.520 --> 09:54.240
There's actually a VAX VMS system,

09:54.240 --> 09:58.000
and they had their own little scripting tools around Fortran.

09:58.000 --> 09:58.840
Done a lot of that.

09:58.840 --> 10:00.840
And then as a graduate student,

10:00.880 --> 10:04.480
I was looking for something and encounter Python.

10:04.480 --> 10:06.200
And because Python had an array,

10:06.200 --> 10:09.160
it had two things that made me not filter it away.

10:09.160 --> 10:10.440
Because I was filtering a bunch of stuff.

10:10.440 --> 10:11.760
It was Yorick, I looked at Yorick,

10:11.760 --> 10:14.480
I looked at a few other languages that were out there

10:14.480 --> 10:17.760
at the time in 1997, but it had arrays.

10:17.760 --> 10:19.160
There's a library called Numeric

10:19.160 --> 10:20.920
that had just been written in 95.

10:20.920 --> 10:23.800
Like not very, not too much earlier.

10:23.800 --> 10:26.400
By an MIT alum, Jim Huginan,

10:27.240 --> 10:29.200
and I went back and read the mailing list

10:29.200 --> 10:30.360
to see the history of how it grew.

10:30.800 --> 10:31.640
And there was a very interesting,

10:31.640 --> 10:32.480
it's fascinating to do that actually,

10:32.480 --> 10:36.080
to see how this emergent cooperation,

10:36.080 --> 10:39.520
unstructured cooperation happens in the open source world

10:39.520 --> 10:43.360
that led to a lot of this collective programming,

10:43.360 --> 10:45.200
which is something maybe we might get into a little later

10:45.200 --> 10:46.160
about what that looks like.

10:46.160 --> 10:48.400
What gap did Numeric fill?

10:48.400 --> 10:50.320
Numeric filled the gap of having an array object.

10:50.320 --> 10:51.640
So instead of- There was no array object.

10:51.640 --> 10:54.200
There was no array, there was a one dimensional

10:54.200 --> 10:57.600
byte concept, but there was no N dimensional,

10:57.600 --> 11:00.720
two, three, four dimensional tensor, they call it now.

11:00.720 --> 11:03.280
I'm still in the category that a tensor is another thing,

11:03.280 --> 11:05.240
and it's just an empty array, we should call it,

11:05.240 --> 11:07.160
but kind of lost that battle.

11:08.360 --> 11:10.160
There's many battles in this world,

11:10.160 --> 11:12.040
some of which we'll win, some we'll lose.

11:12.040 --> 11:13.200
That's exactly right.

11:14.200 --> 11:17.160
But it had no math to it.

11:17.160 --> 11:20.840
So Numeric had math and a basic way to think in arrays.

11:20.840 --> 11:23.640
So I was looking for that, and it had complex numbers.

11:25.000 --> 11:27.480
A lot of programming languages, and you can see it

11:28.320 --> 11:29.520
because if you're just a computer scientist,

11:29.520 --> 11:32.120
you think complex numbers are just two floats,

11:32.120 --> 11:35.040
so people can build that on.

11:35.040 --> 11:37.960
But in practice, a complex number is one of the

11:37.960 --> 11:40.800
significant algebras that helps connect a lot of physical

11:40.800 --> 11:43.520
and mathematical ideas, particularly FFT

11:43.520 --> 11:45.520
for an electrical engineer.

11:45.520 --> 11:48.200
And it's a really important concept,

11:48.200 --> 11:50.880
and not having it means you have to develop it

11:50.880 --> 11:54.360
several times, and those times may not share an approach.

11:54.360 --> 11:55.760
One of the common things in programming,

11:55.760 --> 11:59.080
one of the things programming enables is abstractions.

11:59.080 --> 12:01.160
But when you have shared abstractions, it's even better.

12:01.160 --> 12:03.200
It sort of gets to the level of language of

12:03.200 --> 12:05.520
actually we all think of this the same way,

12:05.520 --> 12:07.960
which is both powerful and dangerous, right?

12:07.960 --> 12:11.200
Because powerful in that we now can quickly

12:11.200 --> 12:13.320
make bigger and higher level things

12:13.320 --> 12:14.800
on top of those abstractions dangerous

12:14.800 --> 12:17.080
because it also limits us as to the things

12:17.080 --> 12:20.520
we maybe left behind in producing an abstraction,

12:20.520 --> 12:21.880
which is at the heart of programming today

12:21.880 --> 12:24.400
and actually building around the programming world.

12:24.400 --> 12:26.600
I think it's a fascinating philosophical topic.

12:26.600 --> 12:28.520
Yeah, it will continue for many years, I think.

12:28.520 --> 12:29.360
It will continue for many years.

12:29.360 --> 12:31.280
As we build more and more and more abstractions.

12:31.280 --> 12:33.760
Yes, I often think about we have a world

12:33.760 --> 12:35.040
that's built on these abstractions

12:35.040 --> 12:37.480
that were they the only ones possible?

12:37.480 --> 12:39.880
Certainly not, but they led to,

12:39.880 --> 12:42.280
now it's very hard to do it differently.

12:42.280 --> 12:47.280
Like there's an inertia that's very hard to push away from.

12:47.760 --> 12:50.720
That has implications for things like the Julia language,

12:50.720 --> 12:52.680
which you have heard of, I'm sure.

12:52.720 --> 12:55.720
And I've met the creators and I like Julia,

12:55.720 --> 12:56.640
it's a really cool language,

12:56.640 --> 13:00.120
but they struggled to kind of against the just the tide

13:00.120 --> 13:02.600
of like this inertia of people using Python.

13:02.600 --> 13:05.840
And there's strategies to approach that,

13:05.840 --> 13:07.640
but nonetheless, it's a phenomena.

13:07.640 --> 13:09.640
And sometimes, so I love complex numbers

13:09.640 --> 13:12.320
and I love to race, so I looked at Python.

13:12.320 --> 13:15.280
And then I had the experience, I did some stuff in Python

13:15.280 --> 13:16.400
and I was just doing my PhD.

13:16.400 --> 13:19.760
So I was out, my focus was on,

13:19.760 --> 13:22.200
I was actually doing a combination of MRI and ultrasound

13:22.200 --> 13:24.800
and looking at a phenomena called elastography,

13:24.800 --> 13:27.040
which is you push waves into the body

13:27.040 --> 13:30.360
and observe those waves like you can actually measure them.

13:30.360 --> 13:32.800
And then you do mathematical inversion

13:32.800 --> 13:35.280
to see what the elasticity is.

13:35.280 --> 13:36.840
And so that's the problem I was solving

13:36.840 --> 13:39.800
is how to do that with both ultrasound and MRI.

13:39.800 --> 13:41.400
I needed some tool to do that with.

13:41.400 --> 13:44.320
So I was starting to use Python in 97.

13:44.320 --> 13:47.360
In 98, I went back, looked at what I'd written

13:47.360 --> 13:49.600
and realized I could still understand it,

13:49.600 --> 13:50.920
which is not the experience I'd had

13:50.920 --> 13:53.720
when doing Perl in 95, right?

13:53.720 --> 13:55.640
I'd done the same thing and then I looked back

13:55.640 --> 13:58.400
and I'd forgotten what I was even saying.

13:58.400 --> 13:59.440
Now, you know, I'm not saying,

13:59.440 --> 14:02.440
so that made me, hey, this may work, I like this.

14:02.440 --> 14:05.040
This is something I can retain

14:05.040 --> 14:07.680
without becoming an expert per se.

14:07.680 --> 14:10.400
And so that led me to go, I'm gonna push more into this.

14:10.400 --> 14:13.400
And then that 98 was kind of the,

14:13.400 --> 14:16.520
when I started to fall in love with Python, I would say.

14:17.520 --> 14:20.920
A few peculiar things about Python.

14:20.920 --> 14:22.920
So maybe compare it to Perl,

14:22.920 --> 14:24.520
compare it to some of the other languages.

14:24.520 --> 14:26.320
So there's no braces.

14:26.320 --> 14:27.160
Yeah.

14:27.160 --> 14:31.960
So space is used, indentation, I should say,

14:31.960 --> 14:33.960
is used as part of our language.

14:33.960 --> 14:35.520
Yeah, right.

14:35.520 --> 14:40.000
So did you, I mean, that's quite a leap.

14:40.000 --> 14:41.200
Were you comfortable with that leap

14:41.200 --> 14:42.800
or were you just very open-minded?

14:42.800 --> 14:43.920
It's a good question.

14:43.960 --> 14:48.120
I was open-minded, so I was cognizant of the concern.

14:48.120 --> 14:52.120
And it definitely has, it has specific challenges.

14:52.120 --> 14:53.600
You know, cut and pasting,

14:53.600 --> 14:55.560
for example, your cut and pasting code.

14:55.560 --> 14:57.320
And if your editors aren't supportive of that,

14:57.320 --> 14:59.040
if you're putting it into a terminal,

14:59.040 --> 15:01.120
and particularly in the past when terminals

15:01.120 --> 15:03.200
didn't necessarily have the intelligence to manage it now.

15:03.200 --> 15:06.000
Now IPython and Jupyter Notebooks handle it just fine,

15:06.000 --> 15:06.920
so there's really no problem.

15:06.920 --> 15:08.840
But in the past, it creates some challenges,

15:08.840 --> 15:12.520
formatting challenges, also mixed tabs and spaces

15:12.840 --> 15:15.480
if editors weren't clear on what was happening,

15:15.480 --> 15:16.880
you would have these issues.

15:16.880 --> 15:19.240
So there were really concrete reasons about it

15:19.240 --> 15:20.440
that I heard and understood.

15:20.440 --> 15:24.000
I never really encountered a problem with it, personally.

15:24.000 --> 15:26.520
Like it was occasional annoyances,

15:26.520 --> 15:28.480
but I really liked the fact

15:28.480 --> 15:31.120
that it didn't have all this extra characters, right?

15:31.120 --> 15:33.160
That these extra characters didn't show up

15:33.160 --> 15:36.120
in my visual field when I was just trying to process

15:36.120 --> 15:38.040
understanding a snippet of code.

15:38.040 --> 15:39.280
Yeah, there's a cleanness to it.

15:39.280 --> 15:41.880
But I mean, the idea is supposed to be that Pearl

15:41.920 --> 15:44.480
also has a cleanness to it because of the minimalism

15:44.480 --> 15:48.440
of how many characters it takes to express a certain thing.

15:48.440 --> 15:49.880
So it's very compact.

15:49.880 --> 15:52.400
But what you realize with that compactness comes,

15:53.640 --> 15:57.160
there's a culture that prizes compactness,

15:57.160 --> 15:58.960
and so the code gets more and more compact

15:58.960 --> 16:01.920
and less and less readable to a point where it's like,

16:03.680 --> 16:05.480
like to be a good programmer in Pearl,

16:05.480 --> 16:08.240
you write code that's basically unreadable.

16:08.240 --> 16:09.160
There's a culture.

16:09.160 --> 16:10.920
Correct, and you're proud of it.

16:10.920 --> 16:12.520
Yeah, you're proud of it.

16:12.520 --> 16:13.360
Right, exactly.

16:13.360 --> 16:14.200
And it's like, feels good.

16:14.200 --> 16:16.720
And it's really selective.

16:16.720 --> 16:20.440
It means you have to be an expert in Pearl to understand it.

16:20.440 --> 16:23.040
Whereas Python allowed you not to have to be an expert.

16:23.040 --> 16:24.800
You didn't have to take all this brain energy.

16:24.800 --> 16:25.720
You could leverage what I say.

16:25.720 --> 16:28.240
You could leverage your English language center,

16:28.240 --> 16:30.040
which you're using all the time.

16:30.040 --> 16:31.280
I've wondered about other languages,

16:31.280 --> 16:34.760
particularly non-Latin-based languages.

16:34.760 --> 16:37.280
Latin-based languages with the characters are at least similar.

16:37.280 --> 16:38.640
I think people have an easier time,

16:38.640 --> 16:41.320
but I don't know what it's like to be a Japanese

16:41.320 --> 16:46.320
or a Chinese person trying to learn a different syntax.

16:46.920 --> 16:49.760
Like what would computer programming look like in that?

16:49.760 --> 16:50.800
I haven't looked at that at all,

16:50.800 --> 16:52.160
but it certainly doesn't,

16:52.160 --> 16:54.320
leveraging your Chinese language center,

16:54.320 --> 16:57.040
I'm not sure Python or any programming does that,

16:57.040 --> 16:58.160
but that was a big deal.

16:58.160 --> 16:59.280
The fact that it was accessible.

16:59.280 --> 17:00.320
I could be a scientist.

17:00.320 --> 17:02.920
What I really liked is many programming languages

17:02.920 --> 17:03.880
really demand a lot of you,

17:03.880 --> 17:07.200
and you can get a lot, you do a lot if you learn it.

17:07.200 --> 17:08.880
The Python enables you to do a lot

17:08.880 --> 17:11.160
without demanding a lot of you.

17:11.160 --> 17:13.080
There's nuance to that statement,

17:13.080 --> 17:15.320
but it's certainly more accessible.

17:15.320 --> 17:18.000
So more people could actually, as a scientist,

17:18.000 --> 17:19.840
as somebody who, or an engineer,

17:19.840 --> 17:21.440
who was trying to solve another problem

17:21.440 --> 17:24.920
besides programming, I could still use this language

17:24.920 --> 17:27.320
and get things done and be happy about it.

17:27.320 --> 17:30.040
I was also comfortable in C at that time.

17:30.040 --> 17:30.880
And MATLAB you did a little bit on C.

17:30.880 --> 17:33.160
And in MATLAB I did a lot before that, exactly.

17:33.160 --> 17:35.880
So I was comfortable in those three languages

17:35.920 --> 17:37.600
that were really the tools I used

17:37.600 --> 17:39.600
during my studies and schooling.

17:40.600 --> 17:42.640
But to your point about language helping you think,

17:42.640 --> 17:44.160
one of the big things about MATLAB

17:44.160 --> 17:46.280
is it was, and APL before it.

17:46.280 --> 17:48.360
I don't know if you remember APL.

17:48.360 --> 17:51.720
APL is actually the predecessor of array-based programming,

17:51.720 --> 17:54.200
which I think is really an underappreciated.

17:54.200 --> 17:55.360
If I talk to people who are just steeped

17:55.360 --> 17:57.680
in computer programming, computer science,

17:57.680 --> 17:59.120
like most of the people that Microsoft

17:59.120 --> 18:01.200
has hired in the past, for example,

18:01.200 --> 18:03.080
Microsoft as a company generally

18:03.080 --> 18:05.280
did not understand array-based programming,

18:05.440 --> 18:06.600
culturally they didn't understand it.

18:06.600 --> 18:08.560
So they kept missing the boat,

18:08.560 --> 18:11.600
kept missing the understanding of what this was.

18:11.600 --> 18:12.760
They've gotten better,

18:12.760 --> 18:14.400
but there's still a whole culture of folks

18:14.400 --> 18:18.000
that doesn't, programming, that's systems programming

18:18.000 --> 18:20.400
or web programming or lists and maps,

18:20.400 --> 18:22.520
and what about an n-dimensional array?

18:22.520 --> 18:24.680
Oh yeah, that's just an implementation detail.

18:24.680 --> 18:26.680
Well, you can think that,

18:26.680 --> 18:28.800
but then actually if you have that as a construct,

18:28.800 --> 18:29.840
you actually think differently.

18:29.840 --> 18:31.680
APL was the first language to understand that

18:31.680 --> 18:33.480
and it was in the 60s.

18:33.480 --> 18:36.800
The challenge of APL was APL had very dense,

18:36.800 --> 18:39.360
not only glyphs, like new characters, new glyphs,

18:39.360 --> 18:40.480
but they even had a new keyboard

18:40.480 --> 18:42.360
because to produce those glyphs,

18:42.360 --> 18:43.960
this is back in the early days in computing

18:43.960 --> 18:47.960
when the QWERTY keyboard maybe wasn't as established,

18:47.960 --> 18:50.760
like, well, we could have a new keyboard, no big deal.

18:50.760 --> 18:52.880
But it was a big deal and it didn't catch on

18:52.880 --> 18:56.480
and the language, APL, very much like Perl,

18:56.480 --> 18:58.600
as people would pride themselves on how much,

18:58.600 --> 19:03.120
could they write the game of life in 30 characters of APL.

19:03.120 --> 19:06.120
APL has characters that mean summation

19:06.120 --> 19:08.240
and they have adverbs, you know,

19:08.240 --> 19:10.080
they have adjectives and these things called adverbs,

19:10.080 --> 19:12.280
which are like methods, like reduction,

19:12.280 --> 19:15.360
reduction would be an adverb on an ad operator, right?

19:15.360 --> 19:18.720
So, but using these tools, you could construct,

19:18.720 --> 19:20.920
and then you start to think at that level,

19:20.920 --> 19:22.960
you think in n-dimensions, it's something I like to say,

19:22.960 --> 19:25.320
and you start to think differently about data at that point.

19:25.320 --> 19:27.560
You know, now you're, it really helps.

19:27.560 --> 19:30.120
Yeah, I mean, outside of programming,

19:30.120 --> 19:33.720
if you really internalize linear algebra as a course,

19:33.720 --> 19:35.640
I mean, it philosophically allows you

19:35.640 --> 19:37.240
to think of the world differently.

19:37.240 --> 19:39.720
It's almost like liberating, you don't have to,

19:39.720 --> 19:42.160
you don't have to think about the individual numbers

19:42.160 --> 19:44.280
in the n-dimensional array.

19:44.280 --> 19:46.160
You could think of it as an object in itself

19:46.160 --> 19:48.520
and all of a sudden this world can open up.

19:48.520 --> 19:52.680
You're saying MATLAB and APL were like the early,

19:52.680 --> 19:55.000
I don't know if many languages got that right ever.

19:55.000 --> 19:57.040
No, no, no they didn't.

19:57.040 --> 19:57.880
Even still.

19:57.880 --> 19:58.840
Even still, I would say.

19:58.840 --> 20:02.560
I mean, NumPy is an inheritor of the traditions

20:02.560 --> 20:06.640
that I would say APL-J was another version that was,

20:06.640 --> 20:08.360
what it did is not have the glyphs,

20:08.360 --> 20:09.720
just have short characters,

20:09.720 --> 20:11.760
but still a Latin keyboard could type them.

20:11.760 --> 20:15.080
And then numeric inherited from that in terms of,

20:15.080 --> 20:19.720
let's add arrays plus broadcasting plus methods reduction,

20:19.720 --> 20:21.840
even some of the language like rank is a concept

20:21.840 --> 20:24.720
that was in Python, it's still in Python,

20:24.720 --> 20:27.240
for the number of dimensions, right?

20:27.520 --> 20:29.520
That's different than say the rank of a matrix,

20:29.520 --> 20:31.160
which people think of as well.

20:31.160 --> 20:33.120
So it came from that tradition,

20:33.120 --> 20:38.000
but NumPy is a very pragmatic, practical tool.

20:38.000 --> 20:39.320
NumPy inherited from numeric

20:39.320 --> 20:40.840
and we can get to where NumPy came from,

20:40.840 --> 20:42.240
which is the current array,

20:43.360 --> 20:46.120
at least current as of 2015, 2017.

20:46.120 --> 20:49.360
Now there's a ton of them over the past two or three years.

20:49.360 --> 20:50.360
We can get into that too.

20:50.360 --> 20:52.840
So if we just sort of linger on the early days

20:52.840 --> 20:56.240
of what was your favorite feature of Python?

20:56.240 --> 20:58.080
Do you remember like what,

20:58.080 --> 21:02.280
it's so interesting to linger on like the,

21:02.280 --> 21:06.320
what really makes you connect with a language?

21:06.320 --> 21:09.440
I'm not sure it's obvious to introspect that.

21:09.440 --> 21:10.280
No, it isn't.

21:10.280 --> 21:12.880
And I've thought about that to some length.

21:12.880 --> 21:16.480
I think definitely the fact that I could read it later,

21:16.480 --> 21:18.160
that I could use it productively

21:18.160 --> 21:19.880
without becoming an expert.

21:19.880 --> 21:22.080
Other lingers I had to put more effort into.

21:22.080 --> 21:24.000
That's like an empirical observation.

21:24.160 --> 21:26.480
You're not analyzing any one aspect of the language.

21:26.480 --> 21:29.480
It just seems time after time when you look back,

21:29.480 --> 21:30.600
it's somehow readable.

21:30.600 --> 21:31.440
It's somehow readable.

21:31.440 --> 21:32.280
Then it was sort of,

21:32.280 --> 21:35.400
I could take executable English

21:35.400 --> 21:36.840
and translate it to Python more easily.

21:36.840 --> 21:37.680
Like I didn't have to go,

21:37.680 --> 21:39.760
there was no translation layer.

21:39.760 --> 21:41.560
As an engineer or as a scientist,

21:41.560 --> 21:43.240
I could think about what I wanted to do

21:43.240 --> 21:46.760
and then the syntax wasn't that far behind it, right?

21:46.760 --> 21:49.240
Now there are some warts there still.

21:49.240 --> 21:50.600
It wasn't perfect.

21:50.600 --> 21:51.440
Like there's some areas where I'm like,

21:51.440 --> 21:52.840
ah, it'd be better if this were different

21:52.840 --> 21:54.360
or if this were different.

21:54.360 --> 21:56.600
Some of those things got added to the language too.

21:56.600 --> 21:58.560
I was really grateful for some of the early pioneers

21:58.560 --> 22:00.240
in the Python ecosystem back

22:00.240 --> 22:01.880
because Python got written in 91

22:01.880 --> 22:03.120
is when the first version came out.

22:03.120 --> 22:06.520
But Guido was very open to users.

22:06.520 --> 22:08.680
And one of the sets of users were people like Jim Huguenin

22:08.680 --> 22:13.440
and David Asher and Paul Dubois and Conrad Hinson.

22:13.440 --> 22:15.400
These were people that were on the main list

22:15.400 --> 22:16.840
and they were just asking for things like,

22:16.840 --> 22:18.360
hey, we really should have complex numbers

22:18.360 --> 22:19.200
in this language.

22:19.200 --> 22:22.520
So let's, you know, there's a J, there's a one J, right?

22:23.040 --> 22:24.400
The fact that they went the engineering route of J

22:24.400 --> 22:25.240
is interesting.

22:26.680 --> 22:28.680
I don't think that's entirely favoring engineers.

22:28.680 --> 22:30.480
I think it's because I is so often used

22:30.480 --> 22:32.080
as the index of a for loop.

22:32.080 --> 22:34.280
So I think that's actually why.

22:34.280 --> 22:35.120
Probably.

22:35.120 --> 22:36.920
I mean, there's a pragmatic aspect.

22:36.920 --> 22:38.320
But the fact that complex numbers were there.

22:38.320 --> 22:39.160
I love that.

22:39.160 --> 22:41.480
The fact that I could write ND array constructs

22:41.480 --> 22:42.880
and that reduction was there.

22:42.880 --> 22:46.560
Very simple to write summations and broadcasting was there.

22:46.560 --> 22:48.460
I could do addition of whole arrays.

22:49.480 --> 22:50.400
So that was cool.

22:50.400 --> 22:52.040
Those are some things I loved about it.

22:52.680 --> 22:54.880
I don't know what to start talking to you about

22:54.880 --> 22:57.880
because you've created so many incredible projects

22:57.880 --> 23:00.200
that basically change the whole landscape of programming.

23:00.200 --> 23:02.400
But okay, let's start with,

23:02.400 --> 23:06.080
let's go chronologically with SciPy.

23:06.080 --> 23:09.120
You created SciPy over two decades ago now?

23:09.120 --> 23:09.960
Yes, yes.

23:09.960 --> 23:11.160
I love to talk about SciPy.

23:11.160 --> 23:13.000
SciPy was really my baby.

23:13.000 --> 23:14.440
What is it?

23:14.440 --> 23:15.440
What was its goal?

23:15.440 --> 23:16.440
What is its goal?

23:16.440 --> 23:17.280
How does it work?

23:17.280 --> 23:18.120
Yeah, fantastic.

23:18.120 --> 23:21.600
So SciPy was effectively, here I am using Python

23:21.600 --> 23:24.960
to do stuff that I previously used MATLAB to use.

23:24.960 --> 23:26.880
And I was using numeric, which is an array library

23:26.880 --> 23:28.320
that made a lot of it possible.

23:28.320 --> 23:29.920
But there's things that were missing.

23:29.920 --> 23:32.120
Like I didn't have an ordinary differential equation solver

23:32.120 --> 23:33.440
I could just call, right?

23:33.440 --> 23:35.240
I didn't have integration.

23:35.240 --> 23:37.560
Hey, I wanted to integrate this function, okay.

23:37.560 --> 23:40.600
Well, I don't have just a function I can call to do that.

23:40.600 --> 23:42.520
These are things I remember being critical things

23:42.520 --> 23:43.700
that I was missing.

23:43.700 --> 23:44.600
Optimization.

23:44.600 --> 23:46.760
I just wanna pass a function to an optimizer

23:46.760 --> 23:49.120
and have it tell me what the optimum value is.

23:50.120 --> 23:50.960
Those are things like,

23:51.120 --> 23:54.360
why don't we just write a library that adds these tools?

23:54.360 --> 23:55.720
And I started to post on the mailing list

23:55.720 --> 23:58.120
and there'd previously been, people have discussed,

23:58.120 --> 23:59.160
I remember Conrad Henson saying,

23:59.160 --> 24:00.960
wouldn't it be great if we had this optimizer library

24:00.960 --> 24:02.600
or David Asch would say this stuff?

24:02.600 --> 24:06.940
And I'm an ambitious, ambitious is the wrong word,

24:06.940 --> 24:11.340
an eager and probably more time than sense.

24:11.340 --> 24:13.600
I was a poor graduate student.

24:13.600 --> 24:15.880
My wife thinks I'm working on my PhD and I am,

24:15.880 --> 24:17.240
but part of the PhD that I loved

24:17.240 --> 24:19.160
was the fact that it's exploratory.

24:19.240 --> 24:21.560
You're not just taking orders,

24:21.560 --> 24:23.520
fulfilling a list of things to do.

24:23.520 --> 24:25.680
You're trying to figure out what to do.

24:25.680 --> 24:27.960
And so I thought, well, I'm writing tools

24:27.960 --> 24:29.160
for my own use in a PhD.

24:29.160 --> 24:32.200
So I'll just start this project.

24:32.200 --> 24:35.000
And so in 99, 98 was when I first started

24:35.000 --> 24:36.680
to write libraries for Python.

24:36.680 --> 24:38.280
But actually when I fell in love with Python 98,

24:38.280 --> 24:39.760
I thought, oh, well, there's just a few things missing.

24:39.760 --> 24:42.720
Like, oh, I need a reader to read DICOM files.

24:42.720 --> 24:44.640
I was in medical imaging and DICOM was a format

24:44.640 --> 24:47.000
that I wanted to be able to load that into Python.

24:47.000 --> 24:48.240
Okay, how do I write a reader for that?

24:48.240 --> 24:51.800
So I wrote something called, it was an IO package, right?

24:51.800 --> 24:55.240
And that was my very first extension module, which is C.

24:55.240 --> 24:57.160
So I wrote C code to extend Python

24:57.160 --> 24:59.720
so that in Python I could write things more easily.

24:59.720 --> 25:02.320
That combination kind of hooked me.

25:02.320 --> 25:04.440
It was the idea that I could, here's this powerful tool

25:04.440 --> 25:05.800
I can use as a scripting language

25:05.800 --> 25:07.560
and a high level language to think about,

25:07.560 --> 25:09.760
but that I can extend easily.

25:09.760 --> 25:11.480
Easily in C.

25:11.480 --> 25:13.860
Easily for me because I knew enough C.

25:13.860 --> 25:15.320
And then Guido had written a language,

25:15.320 --> 25:17.280
I mean, the hard part of extending Python

25:17.280 --> 25:19.560
was something called the way memory management works

25:19.560 --> 25:21.120
and you have to do reference counting.

25:21.120 --> 25:23.880
And so there's a tracking of reference counting

25:23.880 --> 25:25.600
you have to do manually.

25:25.600 --> 25:27.560
And if you don't, you have memory leaks.

25:27.560 --> 25:30.120
And so that's hard, plus then C,

25:30.120 --> 25:32.280
it's just much more, you have to put more effort into it.

25:32.280 --> 25:34.800
It's not just, I have to now think about pointers

25:34.800 --> 25:37.720
and I have to think about stuff that is different.

25:37.720 --> 25:38.840
I have to kind of, you're like putting

25:38.840 --> 25:40.840
a new cartridge in your brain.

25:40.840 --> 25:42.440
Like, okay, I'm thinking about MRI,

25:42.440 --> 25:44.160
now I'm thinking about programming.

25:44.160 --> 25:45.400
And there are distinct modules

25:45.400 --> 25:46.700
you end up having to think about.

25:46.700 --> 25:47.540
So it's harder.

25:47.540 --> 25:48.360
And when I was just in Python,

25:48.360 --> 25:51.580
I could just think about MRI and high level writing.

25:51.580 --> 25:54.060
But I could do that and that kind of, I liked it.

25:54.060 --> 25:55.820
I found that to be enjoyable and fun.

25:55.820 --> 25:58.140
And so I ended up, oh, well, let me just add a bunch

25:58.140 --> 26:00.660
of stuff to Python to do integration.

26:00.660 --> 26:02.260
Well, and the cool thing is, is that, you know,

26:02.260 --> 26:04.020
the power of the internet, I just looking around

26:04.020 --> 26:06.380
and I found, oh, there's this net live,

26:06.380 --> 26:08.940
which has hundreds of Fortran routines

26:08.940 --> 26:11.420
that people have written in the sixties and the seventies

26:11.420 --> 26:13.980
and the eighties in Fortran 77, fortunately,

26:13.980 --> 26:15.060
it wasn't Fortran sixties.

26:15.060 --> 26:18.180
It had been imported to Fortran 77.

26:18.180 --> 26:21.740
And Fortran 77 is actually a really great language.

26:21.740 --> 26:24.180
Fortran 90 probably is my favorite Fortran

26:24.180 --> 26:26.180
because it's also, it's got complex numbers,

26:26.180 --> 26:27.780
got arrays and it's pretty high level.

26:27.780 --> 26:29.660
Now, the problem with it is you'd never want

26:29.660 --> 26:32.340
to write a program in Fortran 90 or Fortran 77.

26:32.340 --> 26:34.980
But it's totally fine to write a subroutine in, right?

26:34.980 --> 26:37.740
And so, and then Fortran kind of got a little off course

26:37.740 --> 26:39.140
when they tried to compete with C++.

26:39.140 --> 26:42.260
But at the time, I just want libraries to do something

26:42.260 --> 26:43.980
like, oh, here's an order of equation.

26:43.980 --> 26:44.940
Here's integration.

26:44.940 --> 26:46.820
Here's Runge-Cutta integration.

26:46.820 --> 26:47.660
Already done.

26:47.660 --> 26:48.820
I don't have to think about that algorithm.

26:48.820 --> 26:50.420
I mean, you could, but it's nice to have somebody

26:50.420 --> 26:51.900
who's already done one and tested it.

26:51.900 --> 26:55.100
And so I sort of started this journey in 98, really.

26:55.100 --> 26:56.020
If you look back at the main list,

26:56.020 --> 26:58.620
there's sort of this productive era of me

26:59.700 --> 27:01.140
writing an extension module

27:01.140 --> 27:04.620
to connect Runge-Cutta integration to Python

27:04.620 --> 27:06.700
and making an ordinary additional equation solver.

27:06.700 --> 27:09.180
And then releasing that as a package.

27:09.180 --> 27:11.860
So we could call ODE pack, I think I called it then,

27:11.860 --> 27:12.700
quad pack.

27:12.700 --> 27:14.460
And then I just made these packages.

27:14.460 --> 27:16.300
Eventually that became multi-pack

27:16.300 --> 27:17.620
because they're originally modular.

27:17.620 --> 27:19.180
You can install them separately.

27:19.180 --> 27:20.740
But a massive problem in Python

27:20.740 --> 27:23.460
was actually just getting your stuff installed.

27:23.460 --> 27:25.860
At the time, releasing software for me,

27:25.860 --> 27:27.620
like today it's, people think, what does that mean?

27:27.620 --> 27:30.820
Well, then it meant some poorly written webpage.

27:30.820 --> 27:33.140
I had some bad webpage up and I put a tarball,

27:33.140 --> 27:35.820
just a gzip tarball of source code.

27:35.820 --> 27:37.180
That was the release.

27:37.180 --> 27:39.260
But, okay, can we just end that?

27:39.260 --> 27:44.260
Because the community aspect of creating the package

27:44.420 --> 27:47.900
and sharing that, that's rare.

27:47.900 --> 27:51.020
That, to have, to both have the, at that time,

27:51.020 --> 27:51.860
so like the raw.

27:51.860 --> 27:52.820
Yeah, it was pretty early, yeah.

27:52.820 --> 27:54.740
Oh well, not rare.

27:54.740 --> 27:57.100
Maybe you can correct me on this,

27:57.100 --> 27:59.740
but it seems like in the scientific community,

27:59.740 --> 28:02.020
so many people, you were basically solving

28:02.020 --> 28:04.140
the problems you needed to solve

28:04.140 --> 28:07.180
to process the particular application,

28:07.180 --> 28:08.660
the data that you need.

28:08.660 --> 28:11.020
And to also have the mind

28:11.020 --> 28:14.100
that I'm going to make this usable for others.

28:15.100 --> 28:16.620
I would say I was inspired.

28:16.620 --> 28:18.140
I'd been inspired by Linux.

28:18.140 --> 28:20.820
I'd been inspired by Linus and him

28:20.820 --> 28:21.940
making his code available.

28:21.940 --> 28:23.380
And I was starting to use Linux at the time.

28:23.380 --> 28:24.540
And I went, this is cool.

28:24.540 --> 28:27.180
So I'd kind of been previously primed that way.

28:27.180 --> 28:29.300
And generally, I was into science

28:29.300 --> 28:31.100
because I liked the sharing notion.

28:31.100 --> 28:32.740
I liked the idea of, hey, let's,

28:32.740 --> 28:34.900
if collectively we build knowledge and share it,

28:34.900 --> 28:35.820
we can all be better off.

28:35.820 --> 28:37.540
Okay, so you want to be energized by that idea.

28:37.540 --> 28:39.020
So I was energized by that idea already.

28:39.020 --> 28:39.860
Yeah.

28:39.860 --> 28:41.020
Right, and I can't deny that, I was.

28:41.020 --> 28:42.980
I'm sort of, had this very,

28:42.980 --> 28:45.780
I liked that part of science, that part of sharing.

28:45.780 --> 28:47.420
And then all of a sudden, oh, wait, here's something.

28:47.420 --> 28:50.020
And here's something I could do.

28:50.020 --> 28:52.860
And then I slowly over years learned how to share better

28:52.860 --> 28:55.180
so that you could actually engage more people faster.

28:55.180 --> 28:56.740
One of the key things was actually giving people

28:56.740 --> 28:59.060
a binary they could install, right?

28:59.060 --> 29:00.460
So that wasn't just your source code.

29:00.460 --> 29:01.540
Good luck.

29:01.540 --> 29:02.740
Compile this and then.

29:02.740 --> 29:05.260
It's compiled, ready to install, just, you know.

29:05.260 --> 29:07.460
So in fact, a lot of the journey from 98,

29:07.460 --> 29:10.020
even through 2012 when I started Anaconda,

29:10.020 --> 29:10.860
was about that.

29:11.020 --> 29:13.340
It's why, you know, it's really the key

29:13.340 --> 29:17.500
as to why a scientist with dreams of doing MRI research

29:17.500 --> 29:19.540
ended up starting a software company

29:19.540 --> 29:22.300
that installs software.

29:22.300 --> 29:25.860
I work with a few folks now that don't program,

29:26.780 --> 29:28.660
like on the creative side, on the video side,

29:28.660 --> 29:31.100
the audio side, and because my whole life

29:31.100 --> 29:34.100
is running on scripts, I have to try to get them,

29:34.100 --> 29:35.980
I'm having all the task of teaching them

29:35.980 --> 29:39.300
how to do Python enough to run the scripts.

29:39.340 --> 29:40.860
And so I've been actually facing this,

29:40.860 --> 29:43.300
whether it's on Anaconda or some,

29:43.300 --> 29:45.700
with the task of how do I minimally explain,

29:45.700 --> 29:48.940
basically to my mom, how to write a Python script.

29:48.940 --> 29:50.540
And it's an interesting challenge.

29:50.540 --> 29:53.060
I have to, it's a to-do item for me to figure out

29:53.060 --> 29:56.380
what is the minimal amount of information I have to teach,

29:56.380 --> 29:59.740
what are the tools you use, one, you enjoy it,

29:59.740 --> 30:00.580
two, your effect of it.

30:00.580 --> 30:02.540
And they're related, those are two related questions.

30:02.540 --> 30:05.500
And then the debugging, like the iterative process

30:05.500 --> 30:07.860
of running the script to figure out what the error is,

30:07.860 --> 30:11.620
maybe even for some people to do the fix yourself.

30:11.620 --> 30:13.620
So do you compile it, do you,

30:13.620 --> 30:15.660
like how do you distribute that code to them?

30:15.660 --> 30:18.580
And it's interesting because I think

30:18.580 --> 30:20.140
it's exactly what you're talking about.

30:20.140 --> 30:24.300
If you increase the circle of empathy,

30:24.300 --> 30:28.100
the circle of people that are able to use your programs,

30:28.940 --> 30:32.940
you increase its effectiveness and its power.

30:32.940 --> 30:37.060
And so you have to think, can I write scripts,

30:37.100 --> 30:40.180
can I write programs that can be used by biomedical engineers,

30:40.180 --> 30:43.980
by all kinds of people that don't know programming.

30:43.980 --> 30:46.060
And actually maybe plant the seed,

30:46.980 --> 30:48.460
have them catch the bug of programming

30:48.460 --> 30:50.260
so that they start on the journey.

30:50.260 --> 30:51.580
That's a huge responsibility.

30:51.580 --> 30:55.420
And ultimately it has to do with the Amazon one-click buy.

30:55.420 --> 30:58.820
Like how frictionless can you make the early steps?

30:58.820 --> 31:00.460
Frictionless is actually really key.

31:00.460 --> 31:03.100
To go in any community is every, any friction point,

31:03.100 --> 31:05.260
you're just gonna lose some people, right?

31:05.260 --> 31:09.180
Now, sometimes you may wanna intentionally do that.

31:09.180 --> 31:11.740
If you're early enough on, you need a lot of help.

31:11.740 --> 31:13.460
You need people who have the skills.

31:13.460 --> 31:14.860
You might actually, it's helpful.

31:14.860 --> 31:16.940
You don't necessarily have too many users

31:16.940 --> 31:20.460
as opposed to contributors if you're early on.

31:20.460 --> 31:23.220
Anyway, there's a sci-fi started in 98,

31:23.220 --> 31:25.860
but it really emerged as this collection of modules

31:25.860 --> 31:27.460
that I was just putting on the net,

31:27.460 --> 31:28.740
people were downloading.

31:28.740 --> 31:33.100
And I think I got 100 users by the end of that year.

31:33.100 --> 31:34.660
But the fact that I got a hundred users

31:34.660 --> 31:39.220
and more than that, people started to email me with fixes.

31:39.220 --> 31:41.420
Like, and that was actually intoxicating, right?

31:41.420 --> 31:44.340
That was the, you know, here I'm writing papers

31:44.340 --> 31:45.580
and I'm giving conferences and I get,

31:45.580 --> 31:47.540
people would say hello, but yeah, good job.

31:47.540 --> 31:51.660
But mostly it was, you're reviewed with, it's competitive.

31:51.660 --> 31:52.980
You publish a paper and people are like,

31:52.980 --> 31:54.700
oh, it wasn't my paper, you know?

31:56.060 --> 31:59.340
I was starting to see that sense of academic life

31:59.340 --> 32:00.300
where it was so much,

32:00.300 --> 32:01.540
I thought there was a cooperative effort,

32:01.700 --> 32:04.980
it sounds like we're here just to one-up each other.

32:04.980 --> 32:07.700
And, you know, it's not true across the board,

32:07.700 --> 32:08.620
but a lot of that's there.

32:08.620 --> 32:11.340
But here in this world, I was getting responses

32:11.340 --> 32:13.500
from people all over the world.

32:13.500 --> 32:16.100
You know, I remember Piero Peterson in Estonia, right?

32:16.100 --> 32:17.340
Was one of the first people.

32:17.340 --> 32:18.780
And he sent me back this make file.

32:18.780 --> 32:19.620
Cause you know, the first thing it is,

32:19.620 --> 32:21.260
but yeah, your build thing stinks.

32:21.260 --> 32:23.060
And here's a better make file.

32:23.060 --> 32:24.420
Now it was a complex make file.

32:24.420 --> 32:26.620
I don't think I never understood that make file actually,

32:26.620 --> 32:29.260
but it worked and it did a lot more.

32:29.260 --> 32:31.020
And so I was like, thanks, this is cool.

32:31.020 --> 32:32.540
And that was my first kind of engagement

32:32.540 --> 32:35.140
with community development.

32:35.140 --> 32:37.700
But you know, the process was he sent me a patch file.

32:37.700 --> 32:39.940
I had to upload a new tar ball.

32:39.940 --> 32:41.620
And I just found, I really loved that.

32:41.620 --> 32:43.660
And the style back then was here's a mailing list.

32:43.660 --> 32:45.740
It's very, it wasn't as,

32:45.740 --> 32:47.700
it certainly weren't the tools that are available today.

32:47.700 --> 32:48.940
It was very early on.

32:48.940 --> 32:50.740
But I really started to, that's the whole year.

32:50.740 --> 32:54.620
I think I did about seven packages that year, right?

32:54.620 --> 32:55.580
And then by the end of the year,

32:55.580 --> 32:57.860
I collected them into a thing called multipack.

32:57.860 --> 32:59.820
So in 99, there was this thing called multipack.

32:59.820 --> 33:01.860
And that's when a high school student,

33:01.860 --> 33:03.100
nobody was a high school student at the time,

33:03.100 --> 33:07.220
a guy named Robert Kern took that package

33:07.220 --> 33:09.740
and made a Windows installer, right?

33:09.740 --> 33:12.740
And then of course, a massive increase of usage.

33:12.740 --> 33:15.900
So by the way, most of this development was under Linux.

33:15.900 --> 33:17.420
Yes, yes, it was on Linux.

33:17.420 --> 33:20.260
I was a Linux developer doing it on the Unix box.

33:20.260 --> 33:23.060
I mean, at the time I was actually getting into,

33:23.060 --> 33:24.100
I had a new hard drive,

33:24.100 --> 33:26.540
did some kernel programming to make the hard drive work.

33:26.540 --> 33:28.820
I mean, not programming, but modification to the kernel

33:28.820 --> 33:31.220
so I could actually get a hard drive working.

33:31.220 --> 33:32.340
I love that aspect of it.

33:32.340 --> 33:34.020
I was also in, you know, at school,

33:34.020 --> 33:36.140
I was building a cluster.

33:36.140 --> 33:39.980
I took Mac computers and you put Yellow Dog Linux on them.

33:40.980 --> 33:42.180
At the Mayo Clinic, they were just,

33:42.180 --> 33:43.540
they had all these Macs that were older,

33:43.540 --> 33:44.780
they were just getting rid of.

33:44.780 --> 33:46.860
And so I kind of got permission to go grab them together.

33:46.860 --> 33:50.380
I put about 24 of them together in a cluster in a cabinet

33:50.380 --> 33:51.740
and put Yellow Dog Linux on them all.

33:51.740 --> 33:56.260
And I wrote a C++ program to do MRI simulation.

33:56.300 --> 33:58.940
That was what I was doing at the same time

33:58.940 --> 34:01.420
for my day job, so to speak.

34:01.420 --> 34:03.500
So I was loving the whole process.

34:03.500 --> 34:04.340
And the same time I was,

34:04.340 --> 34:06.300
oh, I need a ordinary differential equation.

34:06.300 --> 34:08.180
That's why ordinary differential equations were key

34:08.180 --> 34:09.860
was because that's the heart of a block equation

34:09.860 --> 34:12.460
for simulating MRI is an ODE solver.

34:12.460 --> 34:15.740
And so that's, but I actually did that,

34:15.740 --> 34:16.980
those happened at the same time.

34:16.980 --> 34:18.580
That's why it was kind of what you're working on

34:18.580 --> 34:20.540
and what you're interested in, they're coinciding.

34:20.540 --> 34:22.420
I was definitely scratching my own itch

34:22.420 --> 34:24.100
in terms of building stuff.

34:24.980 --> 34:27.020
Which helped in the sense that I was using it for me.

34:27.020 --> 34:28.580
So at least I had one user.

34:28.580 --> 34:29.420
I had one person who was like,

34:29.420 --> 34:30.380
well, no, this is better.

34:30.380 --> 34:31.420
I like this interface better.

34:31.420 --> 34:33.300
And I had the experience of MATLAB

34:33.300 --> 34:36.500
to guide some of what those APIs might look like.

34:36.500 --> 34:37.740
But you're just doing yourself.

34:37.740 --> 34:38.980
You're building all this stuff.

34:38.980 --> 34:40.060
But with the Windows installer,

34:40.060 --> 34:41.020
it was the first time I realized,

34:41.020 --> 34:43.740
oh yeah, the binary installer really helps people.

34:43.740 --> 34:46.980
And so that led to spending more time

34:46.980 --> 34:49.100
on that side of things.

34:49.100 --> 34:52.780
So around 2000, so I graduated my PhD in 2000,

34:52.780 --> 34:53.780
end of year, end of 2000.

34:54.460 --> 34:56.700
So 99 doing a lot of work there,

34:56.700 --> 34:57.780
98 doing a lot of work there,

34:57.780 --> 35:00.820
99 kind of spending more time on my PhD,

35:00.820 --> 35:02.460
helping people use the tools,

35:02.460 --> 35:04.100
thinking about what do I want to go from here?

35:04.100 --> 35:05.660
There was a company, there was a guy actually,

35:05.660 --> 35:07.660
Eric Jones and Travis Vought.

35:07.660 --> 35:11.100
They were two friends who founded a company called Enthought.

35:11.100 --> 35:12.860
It's here in Austin, still here.

35:14.860 --> 35:16.500
Eric contacted me at the time when I was

35:16.500 --> 35:19.420
a graduate student still.

35:19.420 --> 35:20.900
And he said, hey, why don't you come down?

35:20.900 --> 35:22.180
We want to build a company.

35:22.500 --> 35:25.740
You know, we want, we're thinking of a scientific company

35:25.740 --> 35:27.580
and we want to take what you're doing

35:27.580 --> 35:29.460
and kind of add it to some stuff that he'd done.

35:29.460 --> 35:31.220
He'd written some tools.

35:31.220 --> 35:32.820
And then Piero Peterson had done F2Py.

35:32.820 --> 35:34.380
Let's come together and build,

35:34.380 --> 35:36.740
pull this all together and call it SciPy.

35:36.740 --> 35:39.500
So that's the origin of the SciPy brand.

35:39.500 --> 35:41.380
It came from, you know, multipack

35:41.380 --> 35:42.620
and a whole bunch of modules I'd written,

35:42.620 --> 35:44.500
plus a few things from some other folks,

35:44.500 --> 35:47.580
and then pull together in a single installer.

35:47.580 --> 35:49.540
SciPy was really a distribution of Python,

35:49.540 --> 35:51.260
masquerading as a library.

35:51.300 --> 35:54.380
How did you think about SciPy in context of Python,

35:54.380 --> 35:55.740
in context of Numeric?

35:55.740 --> 35:56.580
Like what?

35:56.580 --> 35:59.060
So we saw SciPy as a way to make an R&D environment

35:59.060 --> 36:03.420
for Python, like use Python, dependent on Numeric.

36:03.420 --> 36:05.580
So Numeric was the array library we depended on.

36:05.580 --> 36:08.300
And then from there, extend it with a bunch of modules

36:08.300 --> 36:10.380
that allowed for, and at the time,

36:10.380 --> 36:13.220
the original vision of SciPy was to have plotting,

36:13.220 --> 36:16.180
was to have, you know, the REPL environment,

36:16.180 --> 36:18.620
and kind of a whole, really a whole data environment

36:19.540 --> 36:21.060
that you could then install and get going with.

36:21.900 --> 36:23.020
And that was kind of the thinking.

36:23.020 --> 36:24.980
It didn't really evolve that way, right?

36:24.980 --> 36:28.420
It sort of had a, but one, it's really hard

36:28.420 --> 36:33.420
to do massive scale projects with open source collectives.

36:34.300 --> 36:38.500
Actually, there's sort of an intrinsic cooperation limit

36:38.500 --> 36:40.620
as to which, you know, too many cooks in the kitchen,

36:40.620 --> 36:42.820
you know, you can do amazing infrastructure work.

36:42.820 --> 36:44.260
When it comes down to bringing it all together

36:44.260 --> 36:45.900
into a single deliverable,

36:45.900 --> 36:49.700
that actually requires a little more product management

36:49.740 --> 36:52.900
that is not, that doesn't really emerge

36:52.900 --> 36:54.060
from the same dynamic.

36:54.060 --> 36:56.500
So it struggled, you know, struggled to get,

36:56.500 --> 36:57.940
there were almost too many voices.

36:57.940 --> 36:59.300
It's hard to have everybody agree, you know,

36:59.300 --> 37:02.180
consensus doesn't really work at that scale.

37:02.180 --> 37:03.380
You end up with politics, you know,

37:03.380 --> 37:05.300
with the same kind of things that's happened

37:05.300 --> 37:07.180
in large organizations trying to decide

37:07.180 --> 37:09.500
on what to do together.

37:09.500 --> 37:12.460
So consensus building was still, was challenging at scale

37:12.460 --> 37:13.940
as more people came in, right?

37:13.940 --> 37:15.620
Early on, it's fine, because there's nobody there.

37:15.620 --> 37:17.860
And so it works, but then as you get more successful

37:17.860 --> 37:19.100
and more people use it, all of a sudden,

37:19.100 --> 37:21.540
you know, there's this scale at which

37:21.540 --> 37:22.380
this doesn't work anymore,

37:22.380 --> 37:24.060
and we have to come up with different approaches.

37:24.060 --> 37:26.780
So Side By came out officially in 2001,

37:26.780 --> 37:28.980
was the first release, most of the time.

37:28.980 --> 37:31.140
I remember the days of getting that release ready.

37:31.140 --> 37:32.780
It was a Windows installer, and there was,

37:32.780 --> 37:34.500
there were bugs on how, you know,

37:34.500 --> 37:36.380
the Windows compiler handled complex numbers,

37:36.380 --> 37:38.620
and you were chasing segmentation faults.

37:38.620 --> 37:40.460
It was, it's a lot of work.

37:40.460 --> 37:42.300
There was a lot of,

37:42.300 --> 37:45.580
effort had nothing to do with my area of study.

37:45.580 --> 37:47.580
And at the same time, I had just gotten an offer.

37:47.580 --> 37:48.820
So he wondered if I wanted to come down

37:48.820 --> 37:51.540
and help him start that company with his friend.

37:51.540 --> 37:53.460
And I, at the time, I was like, I was intrigued,

37:53.460 --> 37:56.700
but I was squaring a path, an academic path.

37:56.700 --> 37:59.140
And I had just got an offer to go and teach

37:59.140 --> 38:00.060
at my alma mater.

38:00.060 --> 38:02.500
So I took that tenure track position.

38:02.500 --> 38:04.780
And Side By, and kind of, then I started to work

38:04.780 --> 38:07.140
on Side By as a professor, too.

38:07.140 --> 38:07.980
Okay.

38:07.980 --> 38:10.060
So that's, I left, I got to Mayo Clinic, graduated,

38:10.060 --> 38:11.780
wrote my thesis using Side By,

38:11.780 --> 38:15.580
wrote, you know, there's images that were created.

38:15.580 --> 38:17.380
Now, the plotting tool I used was something

38:17.420 --> 38:18.740
from Yorick, actually.

38:18.740 --> 38:22.020
It was a plotting PLT, kind of a plotting language

38:22.020 --> 38:22.860
that I used.

38:22.860 --> 38:24.020
Yorick is a programming language?

38:24.020 --> 38:24.860
It was a programming language.

38:24.860 --> 38:27.620
It had a plotting tool, Dislin.

38:27.620 --> 38:29.020
It had integration to Dislin.

38:29.020 --> 38:29.940
I ended up using Dislin,

38:29.940 --> 38:32.900
plus some of the plotting from Yorick,

38:32.900 --> 38:33.820
linked to from Python.

38:33.820 --> 38:37.260
Anyway, it was, people don't plot that way now,

38:37.260 --> 38:38.540
but this was before,

38:38.540 --> 38:41.540
and Side By was trying to add plotting, right?

38:41.540 --> 38:42.660
It didn't have much success.

38:42.660 --> 38:45.660
Really, the success of plotting came from John Hunter,

38:45.660 --> 38:47.460
who had a similar experience to my experience,

38:47.460 --> 38:49.740
my kind of maverick experience as a person

38:49.740 --> 38:50.660
just trying to get stuff done

38:50.660 --> 38:53.900
and kind of having more time than money, maybe, right?

38:53.900 --> 38:55.380
And John Hunter created what?

38:55.380 --> 38:56.340
Matplotlib.

38:56.340 --> 38:57.180
He's the creator of Matplotlib.

38:57.180 --> 38:59.220
Yeah, so John Hunter was, you know,

38:59.220 --> 39:00.180
he wasn't a student at the time,

39:00.180 --> 39:01.820
but he was working in Quant Field,

39:01.820 --> 39:03.580
and he said, we need better plotting.

39:03.580 --> 39:04.700
So he just went out and said, cool,

39:04.700 --> 39:05.580
I'll make a new project,

39:05.580 --> 39:06.660
and we'll call it Matplotlib,

39:06.660 --> 39:08.340
and he released it in 2001.

39:08.340 --> 39:09.980
About the same time that Side By came out,

39:09.980 --> 39:13.020
and it was separate library, separate install,

39:13.020 --> 39:15.620
use numeric, Side By use numeric,

39:16.620 --> 39:19.020
and so Side By, you know, in 2001, we released Side By,

39:19.020 --> 39:22.420
and then Enthoq created a conference called Side By,

39:22.420 --> 39:25.500
which brought people together to talk about the space.

39:25.500 --> 39:26.740
And that conference is still ongoing.

39:26.740 --> 39:28.500
It's one of the favorite conferences of a lot of people

39:28.500 --> 39:30.860
because it's, you know, it's changed over the years,

39:30.860 --> 39:31.980
but early on, it was, you know,

39:31.980 --> 39:35.260
a collection of 50 people who care about,

39:35.260 --> 39:36.740
scientists mostly, you know,

39:36.740 --> 39:39.340
practicing scientists who want to care about coding

39:39.340 --> 39:42.220
and doing it well and not using Matlab.

39:42.220 --> 39:44.140
I remember being driven by, you know, I like Matlab,

39:44.140 --> 39:46.460
but I didn't like the fact that,

39:46.460 --> 39:48.100
so I'm not opposed to proprietary software.

39:48.100 --> 39:50.260
I'm actually not an open source zealot.

39:50.260 --> 39:52.700
I love open source for the, what it brings,

39:52.700 --> 39:54.500
but I also see the role for proprietary software.

39:54.500 --> 39:55.580
But what I didn't like was the fact

39:55.580 --> 39:58.740
that I would develop code and publish it,

39:58.740 --> 40:00.900
and then effectively telling somebody here to run my code,

40:00.900 --> 40:02.540
you have to have this proprietary software.

40:02.540 --> 40:05.980
Right, and there's also culture around Matlab as much,

40:05.980 --> 40:08.340
because I've talked to a few folks,

40:08.340 --> 40:10.860
MathWorks creates Matlab, yeah.

40:10.860 --> 40:13.940
I mean, there's just a culture, they try really hard,

40:14.780 --> 40:16.860
but it just, there's this corporate IBM style culture

40:16.860 --> 40:18.460
that's like, or whatever.

40:18.460 --> 40:20.820
I don't want to say negative things about IBM or whatever,

40:20.820 --> 40:22.300
but there's a...

40:22.300 --> 40:23.780
No, it's really that connection.

40:23.780 --> 40:25.020
It's something I'm in the middle of right now,

40:25.020 --> 40:27.060
is the business of open source,

40:27.060 --> 40:30.900
and how do you connect the ethos of cooperative development

40:30.900 --> 40:34.860
with the necessity of creating profits, right?

40:34.860 --> 40:36.940
And like right now today, you know,

40:36.940 --> 40:38.140
I'm still in the middle of that.

40:38.140 --> 40:40.540
That's actually the early days of me

40:40.540 --> 40:42.260
exploring this question.

40:42.340 --> 40:43.620
So I was writing SciPy.

40:43.620 --> 40:45.540
I mean, as an aside, I also had,

40:45.540 --> 40:46.580
so I had three kids at the time.

40:46.580 --> 40:47.900
I have six kids now.

40:47.900 --> 40:50.020
I got married early, wanted a family.

40:50.900 --> 40:52.620
I had three kids, and I remember reading,

40:52.620 --> 40:54.300
I read Richard Stallman's post,

40:54.300 --> 40:55.540
and I was a fan of Stallman.

40:55.540 --> 40:56.660
I would read his work.

40:56.660 --> 40:58.780
I liked this collective ideas he would have.

40:58.780 --> 41:01.740
Certainly the ideas on IP law, I read a lot of his stuff.

41:01.740 --> 41:03.980
But then he said, you know,

41:03.980 --> 41:05.780
okay, well how do I make money with this?

41:05.780 --> 41:06.700
How do I make a living?

41:06.700 --> 41:07.740
How do I pay for my kids?

41:07.740 --> 41:09.300
All this stuff was in my mind.

41:09.300 --> 41:10.660
Young graduate student making no money,

41:10.660 --> 41:12.060
thinking I got to get a job.

41:12.860 --> 41:13.700
And he said, well, you know,

41:13.700 --> 41:15.860
I think just be like me and don't have kids, right?

41:15.860 --> 41:17.100
That's just, don't, don't.

41:17.100 --> 41:18.500
That's his take on it.

41:18.500 --> 41:20.860
That was what he said in that moment, right?

41:20.860 --> 41:22.420
That's the thing I read, and I went,

41:22.420 --> 41:24.980
okay, this is a train I can't get on.

41:24.980 --> 41:26.220
There has to be a way to preserve

41:26.220 --> 41:27.460
the culture of open source

41:27.460 --> 41:29.180
and still be able to make sufficient money

41:29.180 --> 41:30.020
to feed your kids.

41:30.020 --> 41:31.500
Yes, exactly, there's gotta be.

41:31.500 --> 41:34.500
Well, so that actually led me to a study of economics,

41:34.500 --> 41:36.020
because at the time I was ignorant,

41:36.020 --> 41:37.780
and I really was, and I'm actually,

41:37.780 --> 41:39.420
I'm embarrassed for educational system

41:39.420 --> 41:40.340
that they could let me,

41:40.340 --> 41:42.180
and I was valedictorian in my high school class,

41:42.180 --> 41:43.700
and I did super well in college,

41:43.700 --> 41:47.620
and like academically I did great, right?

41:47.620 --> 41:48.900
But the fact that I could do that

41:48.900 --> 41:52.740
and then be clueless about this key part of life,

41:52.740 --> 41:54.380
it led me to go, there's a problem.

41:54.380 --> 41:56.620
Like I should have learned this in fifth grade.

41:56.620 --> 41:58.380
I should have learned this in eighth grade.

41:58.380 --> 41:59.220
Like everybody should come out

41:59.220 --> 42:01.700
with a basic knowledge of economics.

42:01.700 --> 42:02.820
You're an interesting example,

42:02.820 --> 42:05.460
because you've created tools that change the lives

42:05.460 --> 42:07.620
of probably millions of people,

42:07.620 --> 42:09.500
and the fact that you don't understand

42:09.540 --> 42:11.620
at the time of the creation of those tools,

42:11.620 --> 42:13.860
the basics economics of how to build up

42:13.860 --> 42:15.300
a giant system is a problem.

42:15.300 --> 42:16.140
Yeah, it's a problem.

42:16.140 --> 42:18.300
And so during my PhD at the same time,

42:18.300 --> 42:20.740
this was back in 98, 99 at the same time,

42:20.740 --> 42:23.420
I was in a library, I was reading books on capitalism,

42:23.420 --> 42:24.740
I was reading books on Marxism,

42:24.740 --> 42:27.740
I was reading books on what is this thing?

42:27.740 --> 42:29.740
What does it mean?

42:29.740 --> 42:33.180
And I encountered, basically I encountered a set of writings

42:33.180 --> 42:34.660
from people that said they were the inheritors

42:34.660 --> 42:37.260
of Adam Smith, but Adam Smith for the first time, right?

42:37.260 --> 42:38.620
Which is the wealth of nations

42:38.620 --> 42:42.500
and kind of this notion of emergent societies,

42:42.500 --> 42:45.140
and realized, oh, there's this whole world out here

42:45.140 --> 42:48.180
of people, and the challenge of economics

42:48.180 --> 42:49.540
is it's also political.

42:49.540 --> 42:53.140
Like, because economics, you know, people,

42:53.140 --> 42:54.940
different parties running for office,

42:56.140 --> 42:58.100
they want their economic friends,

42:58.100 --> 43:00.060
they want their economists to back them up, right?

43:00.060 --> 43:02.980
Or to be their magicians,

43:02.980 --> 43:04.660
like the magicians in Pharaoh's court, right?

43:04.660 --> 43:06.300
The people that are gonna say, hey, this is,

43:06.300 --> 43:07.120
you should listen to me,

43:07.120 --> 43:09.440
because I've got the expert who says this.

43:09.440 --> 43:11.760
And so it gets really muddled, right?

43:11.760 --> 43:14.040
But I was looking at it as a scientist going,

43:14.040 --> 43:14.880
what is this space?

43:14.880 --> 43:15.720
What does this mean?

43:15.720 --> 43:16.960
How does Paris get fed?

43:16.960 --> 43:18.440
What is money?

43:18.440 --> 43:19.440
How does it work?

43:19.440 --> 43:21.600
And I found a lot of writings I really loved.

43:21.600 --> 43:22.880
I found some things that I really loved,

43:22.880 --> 43:24.000
and I learned from that.

43:24.000 --> 43:26.320
It was writings from people like Von Missass.

43:26.320 --> 43:28.000
He wrote a paper in 1920

43:28.000 --> 43:30.680
that still should be read more than it is.

43:30.680 --> 43:33.120
It was the economic calculation problem

43:33.120 --> 43:34.600
of the socialist Commonwealth.

43:34.600 --> 43:35.440
It was basically in response

43:35.440 --> 43:37.160
to the Bolshevik revolution in 1917.

43:37.160 --> 43:39.080
And his basic argument was,

43:39.080 --> 43:41.820
it's not gonna work to not have private property.

43:41.820 --> 43:43.440
You're not gonna be able to come up with prices.

43:43.440 --> 43:45.240
The bureaucrats aren't gonna be able to determine

43:45.240 --> 43:47.720
how to allocate resources without a price system.

43:47.720 --> 43:51.760
And a price system emerges from people making trades.

43:51.760 --> 43:52.800
And they can only make trades

43:52.800 --> 43:55.480
if they have authority over the thing they're trading.

43:55.480 --> 43:58.040
And that creates information flow

43:58.040 --> 44:02.120
that you just don't have if you try to top down it, right?

44:02.120 --> 44:04.800
And it's like, huh, that's a really good point.

44:04.800 --> 44:06.920
Yeah, the price is to have a signal that's used.

44:06.920 --> 44:09.440
And it's important to have that signal

44:09.440 --> 44:11.040
when you're trying to build a community

44:11.040 --> 44:12.640
of productive people like you would

44:12.640 --> 44:13.760
in a software engineering space.

44:13.760 --> 44:14.920
Yeah, the prices are actually

44:14.920 --> 44:17.880
an important signaling mechanism, right?

44:17.880 --> 44:21.200
And that money is just a bartering tool, right?

44:21.200 --> 44:22.600
So this is the first time I've encountered

44:22.600 --> 44:23.880
any of this concept, right?

44:23.880 --> 44:26.640
And the fact that, oh, this is actually really critical.

44:26.640 --> 44:29.400
Like, it's so critical to our prosperity

44:29.400 --> 44:34.080
and that we're dangerously not learning about this,

44:34.080 --> 44:36.120
not teaching our children about this.

44:36.120 --> 44:37.240
So you had the three kids

44:37.240 --> 44:38.080
and you had to make some hard decisions.

44:38.080 --> 44:38.920
I had to make some money, right?

44:38.920 --> 44:39.880
I had to figure it out.

44:39.880 --> 44:40.720
But I didn't really care.

44:40.720 --> 44:43.280
I mean, I've never been driven by money, just need it.

44:43.280 --> 44:45.200
Yeah, right, you need to eat.

44:45.200 --> 44:49.080
So how did that resolve itself in terms of Side By?

44:49.080 --> 44:51.320
So I would say it didn't really resolve itself.

44:51.320 --> 44:53.360
It sort of started a journey that I'm continuing on.

44:53.360 --> 44:54.760
I'm still on, I would say.

44:54.760 --> 44:55.680
I don't think it resolved itself.

44:55.680 --> 44:59.480
But I will say I went in eyes wide open.

44:59.480 --> 45:00.960
Like, I knew that there were problems

45:00.960 --> 45:03.320
with giving stuff away

45:03.320 --> 45:07.920
and creating the market externalities,

45:07.920 --> 45:09.800
that the fact that, yeah, people might use it

45:09.800 --> 45:10.840
and I might not get paid for it

45:10.840 --> 45:13.120
and I'll have to figure something else out to get paid.

45:13.120 --> 45:14.960
Like, at least I can say I'm not bitter

45:14.960 --> 45:17.280
that a lot of people have used stuff that I've written

45:17.280 --> 45:19.760
and I haven't necessarily benefited economically from it.

45:19.760 --> 45:22.320
Like, I've heard other people be bitter about that

45:22.320 --> 45:23.320
when they write or they talk,

45:23.320 --> 45:24.920
like, oh, I should have got more value out of this.

45:25.080 --> 45:27.760
And I'm also, I want to create systems

45:27.760 --> 45:29.920
that let people like me,

45:29.920 --> 45:32.280
who might have these desires to do things, let them benefit.

45:32.280 --> 45:34.720
So it actually creates more of the same.

45:34.720 --> 45:36.920
Not to turn on your bitterness module,

45:36.920 --> 45:39.080
but there's some aspect,

45:39.080 --> 45:41.920
I wish there was mechanisms for me to reward

45:41.920 --> 45:43.600
whoever created Side By and Numpy

45:43.600 --> 45:45.320
because it brought so much joy to my life.

45:45.320 --> 45:46.160
I appreciate that.

45:46.160 --> 45:47.000
You know what I mean?

45:47.000 --> 45:48.360
The tip-jark notion was there.

45:48.360 --> 45:49.200
I appreciate that.

45:49.200 --> 45:52.000
But there should be a very frictionless mechanism.

45:52.000 --> 45:53.400
Frictionless mechanism, I totally agree.

45:53.400 --> 45:55.280
I would love to talk about some of the ideas I have

45:55.280 --> 45:56.240
because I actually came across,

45:56.240 --> 45:58.240
I think I've come up with some interesting notions

45:58.240 --> 45:59.120
that could work,

45:59.120 --> 46:01.880
but they'll require anything that will work

46:01.880 --> 46:03.800
takes time to emerge, right?

46:03.800 --> 46:04.960
Like, things don't just turn overnight.

46:04.960 --> 46:06.360
That's definitely one thing I've also understood

46:06.360 --> 46:09.240
and learned is any fixes.

46:09.240 --> 46:10.160
That's why it's kind of funny.

46:10.160 --> 46:12.040
We often give credit to, you know,

46:12.040 --> 46:13.000
oh, this president gets elected

46:13.000 --> 46:14.440
and oh, look how great things have done.

46:14.440 --> 46:18.400
And I saw that when I had a transition in a condo

46:18.400 --> 46:19.560
when a new CEO came in, right?

46:19.560 --> 46:22.400
And it's like the success that's happening,

46:22.400 --> 46:24.400
there's an inertia there, right?

46:24.400 --> 46:26.800
And sometimes the decision you made like 10 years before

46:26.800 --> 46:29.040
is the reason why the success is the same.

46:29.040 --> 46:29.880
Right, exactly.

46:29.880 --> 46:31.040
So we're sort of just running around

46:31.040 --> 46:31.880
taking credit for stuff.

46:31.880 --> 46:35.200
The credit assignment has like a delay to it

46:35.200 --> 46:38.360
that makes the credit assignment basically wrong

46:38.360 --> 46:39.200
more than right.

46:39.200 --> 46:40.360
Wrong more than right, exactly.

46:40.360 --> 46:42.200
And so I'm like, oh, this is, you know,

46:42.200 --> 46:45.720
that's the stuff I would read a ton about early on.

46:45.720 --> 46:47.760
So I feel like I'm with you.

46:47.760 --> 46:48.800
Like I want the same thing.

46:48.800 --> 46:50.960
I want to be able to, and honestly not for personally,

46:50.960 --> 46:51.800
I've been happy.

46:52.760 --> 46:53.840
I feel like I don't have any,

46:53.840 --> 46:55.600
I mean, we've been done reasonably okay,

46:55.600 --> 46:56.960
but I've had to pursue it.

46:56.960 --> 47:01.400
Like that's really what started my trajectory from academia

47:01.400 --> 47:02.960
is reading that stuff led me to say,

47:02.960 --> 47:04.800
oh, entrepreneurship matters.

47:06.080 --> 47:09.200
I love software, but we need more entrepreneurs

47:09.200 --> 47:10.400
and I want to understand that better.

47:10.400 --> 47:14.980
So once I kind of had that virus infect my brain,

47:16.520 --> 47:17.600
even though I was on a trajectory

47:17.600 --> 47:20.680
to go to a tenure track position at a university

47:20.680 --> 47:22.840
and I was there for six years,

47:22.840 --> 47:26.120
I was kind of already out the door when I started

47:26.120 --> 47:27.720
and we can get into that, but.

47:27.720 --> 47:30.400
Well, can I just ask a quick question on,

47:30.400 --> 47:32.800
is there some design principles

47:32.800 --> 47:34.760
that were in your mind around SciPy?

47:34.760 --> 47:36.520
Like, is there some key ideas

47:36.520 --> 47:38.120
that were just like sticking to you

47:38.120 --> 47:40.320
that this is the fundamental ideas?

47:40.320 --> 47:41.160
Yeah, I would say so.

47:41.160 --> 47:43.680
I would think it's basically accessibility to scientists.

47:43.680 --> 47:46.960
Like give them, give scientists and engineers tools

47:46.960 --> 47:48.400
that they don't have to think a lot about programming.

47:48.400 --> 47:50.320
So give them really good building blocks.

47:50.960 --> 47:51.840
Give them functions that they want to call

47:51.840 --> 47:54.840
and sort of just the right length of spelling.

47:54.840 --> 47:58.160
You know, there's one tradition in programming

47:58.160 --> 48:01.880
where it's like, you know, make very, very long names, right?

48:01.880 --> 48:03.720
And you can see it in some programming languages

48:03.720 --> 48:06.480
where the names get, you know, take half the screen.

48:06.480 --> 48:09.920
And in the 4chan world,

48:09.920 --> 48:12.280
characters would have to be six letters early on, right?

48:12.280 --> 48:14.360
And that's way too much, too little.

48:14.360 --> 48:16.860
But I was like, I liked to have names

48:16.860 --> 48:18.980
that were informative, but short.

48:18.980 --> 48:21.180
So even though Python,

48:21.180 --> 48:22.360
well, this is a different conversation,

48:22.360 --> 48:25.900
but documentation is doing some work there.

48:25.900 --> 48:29.820
So when you look at great scientific libraries and functions,

48:29.820 --> 48:32.740
there's a richness of documentation

48:32.740 --> 48:34.860
that helps you get into the details.

48:34.860 --> 48:37.660
The first glance at a function gives you the intuition

48:37.660 --> 48:40.580
of all it needs to do by looking at the headers and so on.

48:40.580 --> 48:43.460
But to get the depths of all the complexities involved,

48:43.460 --> 48:45.940
all the options involved, documentation does some work.

48:45.940 --> 48:47.420
Documentation is essential, yeah.

48:47.420 --> 48:50.540
So that was actually, so we thought about several things.

48:50.540 --> 48:51.980
One is we wanted plotting.

48:51.980 --> 48:53.620
We wanted interactive environment.

48:53.620 --> 48:54.900
We wanted good documentation.

48:54.900 --> 48:56.820
These are things we knew we wanted.

48:56.820 --> 49:00.500
The reality is those took about 10 years to evolve, right?

49:00.500 --> 49:02.060
Given the fact that we didn't have a big budget,

49:02.060 --> 49:03.140
it was all volunteer labor.

49:03.140 --> 49:06.980
It was sort of, when Enthot got created

49:06.980 --> 49:10.100
and they started to, you know, try to find projects

49:10.100 --> 49:11.100
people would pay for pieces,

49:11.100 --> 49:13.780
and they were able to fund some of it.

49:13.780 --> 49:15.820
Not nearly enough to keep up with what was necessary.

49:16.500 --> 49:18.900
No criticism, just simply the reality.

49:18.900 --> 49:21.220
I mean, it's hard to start a business

49:21.220 --> 49:22.420
and then do consulting

49:22.420 --> 49:24.340
and then also promote an open source project

49:24.340 --> 49:26.220
that's still fairly new.

49:26.220 --> 49:27.820
Sideways fairly niche.

49:27.820 --> 49:30.140
We stayed connected all while I was a student,

49:30.140 --> 49:30.980
sorry, a professor.

49:30.980 --> 49:33.620
I went to BYU and started to teach electrical engineering,

49:33.620 --> 49:35.100
all the applied math courses.

49:35.100 --> 49:37.020
I loved teaching signal processing,

49:37.020 --> 49:39.220
probability theory, electromagnetism.

49:39.220 --> 49:40.980
I was the, if you look at rate my professor,

49:40.980 --> 49:42.540
which my kids love to do,

49:42.540 --> 49:45.100
I wasn't, I got some bad reviews

49:45.100 --> 49:46.940
because people.

49:46.940 --> 49:48.620
What was the criticism?

49:48.620 --> 49:50.940
I would speak too high of a level.

49:50.940 --> 49:52.660
Like I definitely had a calibration problem

49:52.660 --> 49:55.020
coming out of graduate work

49:55.020 --> 49:57.020
where I hate to be condescending to people.

49:57.020 --> 49:59.340
Like I really have a ton of respect for people fundamentally.

49:59.340 --> 50:02.100
Like my fundamental thing is I respect people.

50:02.100 --> 50:03.940
Sometimes that can lead to a,

50:03.940 --> 50:05.900
I was thinking they were,

50:05.900 --> 50:07.660
they had more knowledge than they did.

50:07.660 --> 50:10.140
And so I would just speak at a very high level,

50:10.140 --> 50:11.100
assume they got it.

50:11.100 --> 50:14.380
But they need to rise to the standard that you set.

50:14.380 --> 50:15.300
I mean, that's one of the,

50:15.300 --> 50:17.140
some of the greatest teachers do that.

50:17.140 --> 50:17.980
And I agree.

50:17.980 --> 50:19.060
And that was kind of what was inspiring me.

50:19.060 --> 50:21.340
But you also have to,

50:22.220 --> 50:24.860
I cannot say I was articulate

50:24.860 --> 50:26.140
to some of the greatest teachers.

50:26.140 --> 50:28.580
Right, I was, like one classic example,

50:28.580 --> 50:30.460
when I first taught at BYU,

50:30.460 --> 50:32.020
my very first class, it was overheads,

50:32.020 --> 50:34.140
transparencies, overheads.

50:34.140 --> 50:35.980
The four projectors were really that common.

50:35.980 --> 50:37.140
I taught transparencies.

50:37.140 --> 50:38.300
I'm writing my notes out.

50:38.300 --> 50:40.580
I go in, room's half dark.

50:40.580 --> 50:42.820
I just blaring through these transparencies.

50:42.820 --> 50:44.940
Here it is, here it is, here it is.

50:44.940 --> 50:47.540
And I gave a quiz after two weeks.

50:47.540 --> 50:48.940
No one knew anything.

50:48.940 --> 50:51.060
Nothing I had taught had gotten anywhere.

50:51.060 --> 50:54.180
And I realized, okay, this is not working.

50:54.180 --> 50:56.460
So I put away the transparencies

50:56.460 --> 50:58.900
and I turned around and just started using the chalkboard.

50:58.900 --> 51:01.020
And what it did is it slowed me down, right?

51:01.020 --> 51:02.300
The chalkboard just slowed me down

51:02.300 --> 51:04.500
and gave people time to process and to think.

51:04.500 --> 51:06.140
And then that made me focus.

51:06.140 --> 51:07.980
My writing wasn't great on the chalkboard,

51:07.980 --> 51:10.580
but I really loved that part of like the teaching.

51:10.580 --> 51:12.540
So that entered SciPy's world in terms of,

51:13.380 --> 51:15.980
there's a didactic aspect of SciPy.

51:15.980 --> 51:18.660
How do you take the knowledge and then produce it?

51:18.660 --> 51:21.300
The challenge we had was the scope.

51:21.300 --> 51:23.420
Ultimately SciPy was everything, right?

51:23.420 --> 51:25.620
And so 2001, when it first came out,

51:25.620 --> 51:26.780
people were starting to use it.

51:26.780 --> 51:27.620
No, this is cool.

51:27.620 --> 51:29.580
This is a tool we actually use.

51:29.580 --> 51:31.420
At the same time, 2001 timeframe,

51:31.420 --> 51:33.940
there was a little bit of the Hubble Space Telescope.

51:33.940 --> 51:35.340
The folks at Hubble had started saying,

51:35.340 --> 51:36.620
hey, Python, we're gonna use Python

51:36.620 --> 51:38.740
for processing images from Hubble.

51:38.740 --> 51:40.820
And so Perry Greenfield was a good friend

51:40.820 --> 51:42.420
and running that program.

51:43.260 --> 51:46.180
And he had called me before I left to BYU and said,

51:46.180 --> 51:47.020
we wanna do this,

51:47.020 --> 51:50.620
but numeric actually has some challenges in terms of,

51:50.620 --> 51:52.700
the array doesn't have enough types.

51:52.700 --> 51:54.460
We need more operations.

51:54.460 --> 51:56.660
Broadcast needs to be a little more settled.

51:56.660 --> 51:57.940
They wanted record arrays.

51:57.940 --> 52:00.580
They wanted record arrays are like a data frame,

52:00.580 --> 52:02.220
but a little bit different,

52:02.220 --> 52:03.820
but they wanted more structured data.

52:03.820 --> 52:06.500
So he had called me even early on then and he said,

52:06.500 --> 52:08.300
wait, would you wanna work on something to make this work?

52:08.300 --> 52:10.140
I said, yeah, I'm interested, but I'm going here

52:10.140 --> 52:12.100
and we'll see if I have time.

52:12.140 --> 52:13.380
So in the meantime while I was teaching

52:13.380 --> 52:15.700
and SciPy was emerging and I had a student,

52:15.700 --> 52:16.900
I was constantly while I was teaching

52:16.900 --> 52:18.860
trying to figure a way to fund this stuff.

52:18.860 --> 52:22.260
So I had a graduate student, my only graduate student,

52:22.260 --> 52:26.220
a Chinese fellow, Liu Hongze is his name, great guy.

52:26.220 --> 52:29.940
He wrote a bunch of stuff for iterative linear algebra,

52:29.940 --> 52:31.420
like got into writing some of the iterative

52:31.420 --> 52:34.380
linear algebra tools that are currently there in SciPy

52:34.380 --> 52:38.260
and they've gotten better since, but this is in 2005.

52:38.260 --> 52:39.300
Kept working on SciPy,

52:39.300 --> 52:43.060
but Perry has started working on a replacement

52:43.060 --> 52:44.420
to numeric called Numary.

52:45.300 --> 52:49.020
And in 2004, a package called, and the image,

52:49.020 --> 52:50.740
it was an image processing library

52:50.740 --> 52:53.220
that was written for Numary

52:53.220 --> 52:55.580
and it had in it a morphology tool.

52:55.580 --> 52:56.740
I don't know if you know what morphology is,

52:56.740 --> 52:59.580
it's open dilations, you know, there's sort of this,

52:59.580 --> 53:02.420
as a medical imaging student, I knew what it was

53:02.420 --> 53:04.420
because it was used in segmentation a lot.

53:04.420 --> 53:06.460
And in fact, I'd wanted to do something like that

53:06.540 --> 53:10.260
in Python, in SciPy, but just had never gotten around to it.

53:10.260 --> 53:14.220
So when it came out, but it worked only on Numary

53:14.220 --> 53:16.460
and SciPy needed numeric.

53:16.460 --> 53:20.060
And so we effectively had the beginning of this split

53:20.060 --> 53:22.540
and numeric and Numary didn't share data.

53:22.540 --> 53:24.460
They were just two, so you could have a gigabyte

53:24.460 --> 53:26.580
of numeric, Numary data and gigabyte of numeric data

53:26.580 --> 53:27.420
and they wouldn't share it.

53:27.420 --> 53:28.540
And so you have these,

53:28.540 --> 53:31.340
then you have these scientific libraries written on top.

53:31.340 --> 53:32.980
I got really bugged by that.

53:32.980 --> 53:35.100
I got really like, oh man, this is not good.

53:35.100 --> 53:36.340
We're not cooperating now.

53:37.180 --> 53:38.020
We're sort of redoing each other's work

53:38.020 --> 53:40.420
and we're just this young community.

53:40.420 --> 53:43.980
So that's what led me, even though I knew it was risky

53:43.980 --> 53:47.180
because my, you know, I was on a tenure track position,

53:47.180 --> 53:48.580
2004, I got reviewed.

53:48.580 --> 53:49.580
They said, hey, things are going okay.

53:49.580 --> 53:51.580
You're doing well, paper's coming out,

53:51.580 --> 53:52.500
but you're kind of spending a lot of time

53:52.500 --> 53:53.420
in this open source stuff.

53:53.420 --> 53:54.820
Maybe do a little less of that

53:54.820 --> 53:57.300
and a little more of the paper writing and grant writing,

53:57.300 --> 53:59.780
which was naive, but it was definitely the time,

53:59.780 --> 54:00.900
you know, the thinking that-

54:00.900 --> 54:01.780
Still goes on.

54:01.780 --> 54:03.100
Still goes on.

54:03.100 --> 54:05.140
You're basically creating a thing

54:05.140 --> 54:08.340
which enables science in the 21st century.

54:08.340 --> 54:09.340
Right.

54:09.340 --> 54:12.060
Maybe don't emphasize that so much in your free or tenure.

54:12.060 --> 54:13.500
Right.

54:13.500 --> 54:14.860
It illustrates some of the challenges.

54:14.860 --> 54:15.700
Yes.

54:15.700 --> 54:18.940
It does, and it's, people mean well,

54:18.940 --> 54:22.340
but we've gotten broken in a bunch of ways.

54:22.340 --> 54:23.700
Certain things, programming,

54:23.700 --> 54:25.460
understanding the role of software engineering

54:25.460 --> 54:27.860
and programming in society is a little bit lagging.

54:27.860 --> 54:28.700
Exactly.

54:28.700 --> 54:30.060
Now I was in an electrical engineering position.

54:30.060 --> 54:30.900
Right.

54:30.900 --> 54:32.260
That's even worse.

54:32.260 --> 54:33.180
There.

54:33.180 --> 54:34.740
Yeah, it was very, they were very focused

54:35.340 --> 54:37.300
and so, you know, good people and I had a great time.

54:37.300 --> 54:38.140
I loved my time.

54:38.140 --> 54:38.980
I loved my teaching.

54:38.980 --> 54:40.460
I loved all the things I did there.

54:40.460 --> 54:42.540
The problem was the split was happening

54:42.540 --> 54:43.660
in this community that I loved.

54:43.660 --> 54:44.500
Right.

54:44.500 --> 54:47.060
I saw people and I went, oh my gosh, this is gonna be,

54:47.060 --> 54:47.900
this is not great.

54:47.900 --> 54:50.020
And so I happened, you know, they,

54:50.940 --> 54:52.660
I had a class I had signed up for.

54:52.660 --> 54:54.860
It's a, I was trying to build an MRI system.

54:54.860 --> 54:57.300
So I had a kind of a radio,

54:57.300 --> 54:59.220
instead of a radio, a digital radio class

54:59.220 --> 55:00.420
is a digital MRI class.

55:01.780 --> 55:04.020
And I had people sign up, two people signed up,

55:04.020 --> 55:04.860
then they dropped.

55:04.860 --> 55:06.660
And so I had nobody in this class.

55:06.660 --> 55:08.820
So, and I didn't have any other courses to teach.

55:08.820 --> 55:10.940
And I thought, oh, I've got some time

55:10.940 --> 55:13.100
and I'll just write, I'll just write a replay,

55:13.100 --> 55:14.820
a merger of numeric and num array.

55:14.820 --> 55:16.980
Like I'll basically take the numeric code base

55:16.980 --> 55:19.220
at the features num array was adding

55:19.220 --> 55:21.180
and then kind of come up with a single array library

55:21.180 --> 55:22.460
that everybody can use.

55:22.460 --> 55:25.500
So that's where NumPy came from was my thinking,

55:25.500 --> 55:26.500
hey, I can do this.

55:26.500 --> 55:27.860
And who else is going to?

55:27.860 --> 55:29.260
Cause at that point I'd been around the community

55:29.260 --> 55:30.820
long enough and I'd written enough C code.

55:30.820 --> 55:32.660
I knew, I knew the structures.

55:32.660 --> 55:35.100
And I, in fact, my first contribution to numeric

55:35.100 --> 55:38.620
had been writing the C API documentation

55:38.620 --> 55:41.100
that went in the first documentation for NumPy

55:41.100 --> 55:42.100
for numeric, sorry.

55:42.100 --> 55:43.540
This was Paul Dubois, David Asher,

55:43.540 --> 55:45.140
Conrad Hinson and myself.

55:45.140 --> 55:47.620
I got credit cause I wrote this chapter,

55:47.620 --> 55:51.260
which is all the C API of numeric, like all the C stuff.

55:51.260 --> 55:53.820
So I said, I probably the one to do it.

55:53.820 --> 55:54.820
Nobody else is going to do this.

55:54.820 --> 55:58.380
So it was sort of out of a sense of duty and passion,

55:58.380 --> 56:01.500
knowing that I don't think my academic,

56:01.500 --> 56:03.460
I don't think the department here is going to appreciate

56:03.460 --> 56:06.060
this, but I, it's the right thing to do.

56:06.060 --> 56:06.900
It was like.

56:06.900 --> 56:10.820
Can we just link on that moment because the importance

56:10.820 --> 56:13.700
of the way you thought and the action you took,

56:13.700 --> 56:17.980
I feel is, is understated and is rare.

56:17.980 --> 56:20.740
And I would love to see so much more of it because

56:20.740 --> 56:23.740
what happens as the tools become more popular,

56:24.860 --> 56:29.420
there's a split that happens and it's a truly heroic

56:29.420 --> 56:32.380
and impactful action to in those early,

56:32.380 --> 56:35.540
in that early split, to step up and you,

56:35.540 --> 56:37.820
it's like great leaders throughout history.

56:37.820 --> 56:39.660
Like get, what is the Braveheart?

56:39.660 --> 56:42.500
Like get on a horse and, and rally the troops

56:42.500 --> 56:46.060
because I think that can have, make a big difference.

56:46.060 --> 56:49.060
We have TensorFlow versus PyTorch in the machine learning.

56:49.060 --> 56:50.380
We have the same problem today.

56:50.380 --> 56:51.220
Yeah.

56:51.220 --> 56:52.540
I wonder, it's actually bigger.

56:52.540 --> 56:56.620
I wonder if it's possible to, in the early days

56:56.620 --> 56:58.220
to rally the troops.

56:58.220 --> 57:00.020
It is possible, especially in the early days.

57:00.020 --> 57:01.580
The longer it goes, the harder, right?

57:01.580 --> 57:03.940
And the more energy in the factions, the harder.

57:03.940 --> 57:05.700
But in the early days it is possible

57:05.700 --> 57:07.660
and it's extremely helpful.

57:07.660 --> 57:10.900
And there's a willingness there, but, but the challenge is

57:10.900 --> 57:12.980
there's usually not a willingness to fund it.

57:12.980 --> 57:15.900
There's not a willingness to, you know, like I was literally

57:15.900 --> 57:18.620
walking into a field saying, I'm going to do this.

57:18.620 --> 57:21.340
And here I am, like, you know, I have five kids

57:21.340 --> 57:22.180
at home now.

57:23.740 --> 57:24.820
Pressure builds.

57:24.820 --> 57:27.300
Sometimes my wife hears these stories and she's like,

57:27.300 --> 57:28.140
you did what?

57:29.020 --> 57:30.900
I thought we were going to, I thought you were actually

57:30.900 --> 57:33.260
on a path to make sure we had resources and money.

57:33.260 --> 57:36.420
But, but again, there's a, there's an aspect.

57:36.420 --> 57:37.860
I'm a very hopeful person.

57:37.860 --> 57:39.660
I'm an optimistic person of my nature.

57:39.660 --> 57:41.100
I love people.

57:41.100 --> 57:43.140
I learned that about myself later on.

57:44.340 --> 57:48.380
Part of my, my religious beliefs actually lead to that.

57:48.380 --> 57:50.380
And it's why I hold them dear because it's actually

57:50.380 --> 57:52.620
how I feel about, that's why it's what leads me to this,

57:52.620 --> 57:55.540
to these attitudes, sort of this hopefulness and this sense

57:55.540 --> 57:57.940
of, yeah, it may not, it may not work out for me

57:57.940 --> 58:00.620
financially or maybe, but that's not the ultimate gain.

58:00.620 --> 58:03.060
Like that's a thing, but it's not, you know,

58:03.060 --> 58:05.540
that's not the scorecard for me.

58:05.540 --> 58:07.060
And so I just wanted to be helpful.

58:07.060 --> 58:09.300
And I knew, and partly because of these sci-fi conferences,

58:09.300 --> 58:10.860
because of the mailing list conversations,

58:10.860 --> 58:13.300
I knew there was a lot of need for this, right?

58:13.300 --> 58:15.500
And so I had this, it wasn't like I was alone

58:15.500 --> 58:16.500
in terms of no feedback.

58:16.500 --> 58:19.460
I had these people who knew, but it was crazy.

58:19.460 --> 58:20.900
Like people at the time said, yeah,

58:20.900 --> 58:22.380
we didn't think you'd be able to do it.

58:22.380 --> 58:23.220
We thought it was crazy.

58:23.220 --> 58:26.780
Also instructive, like practically speaking,

58:26.780 --> 58:28.780
that you had a cool feature

58:28.780 --> 58:30.860
that you were chasing in the morphology, like the...

58:30.860 --> 58:31.700
Yes.

58:31.700 --> 58:32.540
Like it's not just like...

58:32.540 --> 58:33.540
There's an end result.

58:33.540 --> 58:35.220
It's not some visionary thing.

58:35.220 --> 58:36.900
I'm going to unite the community.

58:36.900 --> 58:38.140
You were like... Correct.

58:38.140 --> 58:39.580
You were actually practically,

58:39.580 --> 58:42.180
this is what one person actually could do

58:42.180 --> 58:43.300
and actually build.

58:43.300 --> 58:44.300
Because that is important.

58:44.300 --> 58:46.380
Because you can get over your skis.

58:46.380 --> 58:47.540
Yeah.

58:47.540 --> 58:49.140
You can definitely get over your skis.

58:49.140 --> 58:52.220
And I had, in fact, this almost got me over my skis, right?

58:52.220 --> 58:54.980
I would say, well, in retrospect, I hate looking back.

58:56.180 --> 58:58.580
I can tell you all the flaws with NumPy, right?

58:58.580 --> 59:00.740
When I go into it, there's lots of stuff that I'm like,

59:00.740 --> 59:01.740
oh man, that's embarrassing.

59:01.740 --> 59:02.580
That was wrong.

59:02.580 --> 59:04.340
I wish I had somebody slap me with a wet fish there.

59:04.340 --> 59:07.020
Like I needed, like what I'd wished I'd had

59:07.020 --> 59:09.460
was somebody with more experience

59:09.460 --> 59:11.860
and certainly library writing and array library.

59:11.860 --> 59:13.740
Like I wish I had me, I could go back in time

59:13.740 --> 59:14.580
and go do this, do that.

59:14.580 --> 59:15.500
There's a Morton Vien.

59:15.500 --> 59:18.140
Cause there's things we did that are still there

59:18.140 --> 59:20.940
that are problematic, that created challenges for later.

59:21.220 --> 59:22.500
And I didn't know it at the time.

59:22.500 --> 59:24.460
I didn't understand how important that was.

59:24.460 --> 59:26.500
And in many cases, didn't know what to do.

59:26.500 --> 59:29.100
Like there was pieces of the design of NumPy.

59:29.100 --> 59:31.380
I didn't know what to do until five years ago.

59:31.380 --> 59:32.900
Now I know what they should have been,

59:32.900 --> 59:35.420
but I didn't know at the time and I couldn't get the help.

59:35.420 --> 59:36.700
Anyway, so I wrote it.

59:36.700 --> 59:39.580
It took about, it took four months to write the first version

59:39.580 --> 59:43.380
then about 14 months to make it usable.

59:43.380 --> 59:47.820
But it was that first four months of intense writing,

59:47.820 --> 59:50.580
coding, getting something out the door that worked.

59:51.340 --> 59:52.420
It was definitely challenging.

59:52.420 --> 59:54.940
And then the big thing I did was create a new type object

59:54.940 --> 59:56.140
called D-Type.

59:56.140 --> 59:58.820
That was probably the contribution.

59:58.820 --> 01:00:01.940
And then the fact that I added, not just broadcasting,

01:00:01.940 --> 01:00:05.060
but advanced indexing so that you could do

01:00:05.060 --> 01:00:08.460
masked indexing and indirect indexing

01:00:08.460 --> 01:00:10.220
instead of just slicing.

01:00:10.220 --> 01:00:13.020
For people who don't know, and maybe you can elaborate.

01:00:13.020 --> 01:00:17.660
NumPy, I guess the vision in the narrowest sense

01:00:17.660 --> 01:00:21.460
is to have this object that represents

01:00:21.460 --> 01:00:23.180
n-dimensional arrays.

01:00:23.180 --> 01:00:26.300
And like at any level of abstraction you want,

01:00:26.300 --> 01:00:28.220
but basically it could be a black box

01:00:28.220 --> 01:00:30.940
that you can investigate in ways that you would naturally

01:00:30.940 --> 01:00:33.340
want to investigate such objects.

01:00:33.340 --> 01:00:34.180
Yes, exactly.

01:00:34.180 --> 01:00:35.740
So you could do math on it easily.

01:00:35.740 --> 01:00:37.180
Math on it easily, yeah.

01:00:37.180 --> 01:00:39.860
So it had an associated library of math operations.

01:00:39.860 --> 01:00:43.020
And effectively, SciPy became an even larger

01:00:43.020 --> 01:00:44.940
set of math operations.

01:00:44.980 --> 01:00:48.060
So the key for me was I was going to write NumPy

01:00:48.060 --> 01:00:50.420
and then move SciPy to depend on NumPy.

01:00:50.420 --> 01:00:53.020
In fact, early on, one of the initial proposals

01:00:53.020 --> 01:00:54.580
was that we would just write SciPy

01:00:54.580 --> 01:00:56.700
and it would have the numeric object inside of it.

01:00:56.700 --> 01:00:59.820
And it would be SciPy.array or something.

01:00:59.820 --> 01:01:01.460
That turned out to be problematic

01:01:01.460 --> 01:01:04.020
because numeric already had a little mini library

01:01:04.020 --> 01:01:06.420
of linear algebra and some functions.

01:01:06.420 --> 01:01:08.940
And it had enough momentum, enough users

01:01:08.940 --> 01:01:12.100
that nobody wanted to, they wanted backward compatibility.

01:01:12.100 --> 01:01:13.780
One of the big challenges of NumPy

01:01:13.820 --> 01:01:15.020
was I had to be backward compatible

01:01:15.020 --> 01:01:17.020
with both numeric and numarray

01:01:17.020 --> 01:01:18.540
in order to allow both of those communities

01:01:18.540 --> 01:01:19.380
to come together.

01:01:19.380 --> 01:01:21.180
There was a ton of work in creating

01:01:21.180 --> 01:01:22.620
that backward compatibility

01:01:22.620 --> 01:01:25.460
that also created echoes in today's object.

01:01:25.460 --> 01:01:27.220
Like some of the complexity in today's object

01:01:27.220 --> 01:01:30.140
is actually from that goal of backward compatibility

01:01:30.140 --> 01:01:31.420
to these other communities,

01:01:31.420 --> 01:01:34.620
which if you didn't have that, you'd do something different,

01:01:34.620 --> 01:01:37.780
which is instructive because a lot of things are there.

01:01:37.780 --> 01:01:38.940
You know, what is that there for?

01:01:38.940 --> 01:01:41.380
It's like, well, it's a remnant,

01:01:41.380 --> 01:01:45.220
it's an artifact of its historical existence.

01:01:45.220 --> 01:01:46.780
By the way, I love the empathy

01:01:46.780 --> 01:01:48.500
and the lack of ego behind that

01:01:48.500 --> 01:01:51.420
because I feel you see that in the split

01:01:51.420 --> 01:01:53.380
in the JavaScript frameworks, for example,

01:01:53.380 --> 01:01:55.900
the arbitrary branching is,

01:01:56.980 --> 01:01:59.060
I think in order to unite people,

01:01:59.060 --> 01:02:00.620
you have to kind of put your ego aside

01:02:00.620 --> 01:02:01.860
and truly listen to others.

01:02:01.860 --> 01:02:04.860
Like what do you love about numarray?

01:02:04.860 --> 01:02:06.100
What do you love about numeric?

01:02:06.100 --> 01:02:07.540
Like actually get a sense,

01:02:07.540 --> 01:02:08.940
we're talking about languages earlier,

01:02:08.940 --> 01:02:11.620
sort of empathize to the culture of the people

01:02:11.620 --> 01:02:14.740
that love something about this particular API,

01:02:14.740 --> 01:02:19.740
some, the naming style or the use,

01:02:19.900 --> 01:02:22.820
the actual usage patterns and like truly understand them

01:02:22.820 --> 01:02:26.820
and so that you can like create that same draw

01:02:26.820 --> 01:02:28.660
in the United.

01:02:28.660 --> 01:02:29.500
I completely agree.

01:02:29.500 --> 01:02:31.860
And that you have to also have enough passion

01:02:31.860 --> 01:02:32.700
that you'll do it.

01:02:32.700 --> 01:02:34.740
It can't be just like a perfunctory,

01:02:34.740 --> 01:02:36.580
oh yes, I'll listen to you.

01:02:36.580 --> 01:02:38.460
And then I'm not really that excited about it.

01:02:38.460 --> 01:02:41.100
So it really is an aspect, it's a philosophical,

01:02:41.100 --> 01:02:42.340
like there's a philia,

01:02:42.340 --> 01:02:44.300
there's a love of a steaming of others.

01:02:44.300 --> 01:02:47.140
That's actually at the heart of what,

01:02:47.140 --> 01:02:49.300
it's sort of a life philosophy for me, right?

01:02:49.300 --> 01:02:51.620
That I'm constantly pursuing and that helped,

01:02:51.620 --> 01:02:52.740
absolutely helped.

01:02:52.740 --> 01:02:54.340
Makes me wonder in a philosophical,

01:02:54.340 --> 01:02:57.540
like looking at human civilization as one object,

01:02:57.540 --> 01:02:59.460
it makes me wonder how we can copy and paste

01:02:59.460 --> 01:03:01.220
Travis's in the split.

01:03:01.220 --> 01:03:03.380
Well, in some aspects, maybe.

01:03:03.380 --> 01:03:05.300
Some aspects, right, right, exactly.

01:03:05.300 --> 01:03:07.380
Well, it's a good question.

01:03:07.380 --> 01:03:08.220
How do we teach this?

01:03:08.700 --> 01:03:09.540
How do we encourage it?

01:03:09.540 --> 01:03:10.380
How do we lift it?

01:03:10.380 --> 01:03:11.220
How do we pull it out?

01:03:11.220 --> 01:03:12.780
Because so much of the software world,

01:03:12.780 --> 01:03:15.220
it's giant communities, right?

01:03:15.220 --> 01:03:16.900
But it seems like so much is moved by,

01:03:16.900 --> 01:03:18.260
like little individuals.

01:03:18.260 --> 01:03:21.100
You talk about like Linus Torvald.

01:03:21.100 --> 01:03:23.460
It's like, could you have not,

01:03:23.460 --> 01:03:26.100
could you have had Linux without him?

01:03:26.100 --> 01:03:27.260
Could you, it's like-

01:03:27.260 --> 01:03:28.100
Yeah, Guido and Python.

01:03:28.100 --> 01:03:28.940
Guido and Python.

01:03:28.940 --> 01:03:29.780
Guido and Python.

01:03:29.780 --> 01:03:31.420
I mean, the SciPy community particularly,

01:03:31.420 --> 01:03:32.860
I said we wanted to build this big thing,

01:03:32.860 --> 01:03:33.820
but ultimately we didn't.

01:03:33.820 --> 01:03:36.100
What happened is we had Mavericks and champions

01:03:36.100 --> 01:03:37.820
like John Hunter who created Matplotlib.

01:03:38.300 --> 01:03:40.020
We had Fernando Perez who created IPython.

01:03:40.020 --> 01:03:42.300
And so we sort of inspired each other,

01:03:42.300 --> 01:03:44.020
but in the credit, there's sort of a culture

01:03:44.020 --> 01:03:47.860
of this selfless, the stewardship mentality

01:03:47.860 --> 01:03:49.180
as opposed to ownership mentality,

01:03:49.180 --> 01:03:54.060
but stewardship and community focused,

01:03:54.060 --> 01:03:56.660
community focused, but intentional work.

01:03:56.660 --> 01:03:58.940
Like not waiting for everybody else to do the work,

01:03:58.940 --> 01:04:00.740
but you're doing it for the benefit of others

01:04:00.740 --> 01:04:02.940
and not worried about what you're gonna get.

01:04:04.060 --> 01:04:04.900
You're not worried about the credit.

01:04:04.900 --> 01:04:05.900
You're not worried about what you're gonna get.

01:04:05.900 --> 01:04:07.620
You're worried about, I later realized

01:04:08.460 --> 01:04:09.300
that I have to worry a little about credit,

01:04:09.300 --> 01:04:10.300
not because I want the credit,

01:04:10.300 --> 01:04:11.380
because I want people to understand

01:04:11.380 --> 01:04:13.020
what led to the results.

01:04:13.020 --> 01:04:15.060
Like I don't, it's not about me,

01:04:15.060 --> 01:04:17.540
is I wanna understand this is what led to the result.

01:04:17.540 --> 01:04:18.980
So let's like, I think doing,

01:04:18.980 --> 01:04:21.100
and this is what had no impact on the result.

01:04:21.100 --> 01:04:23.420
Like let's promote, just like you said,

01:04:23.420 --> 01:04:25.100
I wanna promote the attributes

01:04:25.100 --> 01:04:26.540
that help make us better off.

01:04:26.540 --> 01:04:28.820
How do we make more of Wes McKinney?

01:04:28.820 --> 01:04:31.620
Like Wes McKinney was critical to the success of Python

01:04:31.620 --> 01:04:33.420
because of his creation of pandas,

01:04:33.420 --> 01:04:36.420
which was the roots of that were all the way back

01:04:36.420 --> 01:04:40.260
in Numeric and NumArray and NumPy,

01:04:40.260 --> 01:04:43.180
where NumPy created an array of records.

01:04:43.180 --> 01:04:45.980
Wes started to use that almost like a data frame,

01:04:45.980 --> 01:04:47.860
except it's an array of records.

01:04:47.860 --> 01:04:49.780
And data frame, the challenge is,

01:04:49.780 --> 01:04:52.260
okay, if you wanna augment it at another column,

01:04:52.260 --> 01:04:53.740
you have to insert,

01:04:53.740 --> 01:04:55.660
you have to do all this memory movement to insert a column.

01:04:55.660 --> 01:04:57.180
Whereas data frames became,

01:04:57.180 --> 01:05:00.500
oh, I'm gonna have a loose collection of arrays.

01:05:00.500 --> 01:05:03.980
So it's a record of arrays that is the heart of a data frame.

01:05:03.980 --> 01:05:05.580
And we thought about that back in the memory days,

01:05:05.580 --> 01:05:08.940
but Wes ended up doing the work to build it.

01:05:08.940 --> 01:05:11.300
And then also the operations that were relevant

01:05:11.300 --> 01:05:12.620
for data processing.

01:05:12.620 --> 01:05:15.220
What I noticed is just that each of these little things

01:05:15.220 --> 01:05:17.380
creates just another tick, another up.

01:05:17.380 --> 01:05:19.940
So NumPy ultimately took a little while,

01:05:19.940 --> 01:05:22.700
about six months in, people started joining me.

01:05:22.700 --> 01:05:27.300
Francesc Alted, Robert Kern, Charles Harris.

01:05:27.300 --> 01:05:29.820
And these people are many of the unsung heroes,

01:05:29.820 --> 01:05:30.660
I would say.

01:05:30.660 --> 01:05:31.980
People who are,

01:05:31.980 --> 01:05:34.100
they sometimes don't get the credit they deserve

01:05:34.140 --> 01:05:36.580
because they were critical both to support,

01:05:36.580 --> 01:05:39.100
like it's hard and you need some support,

01:05:39.100 --> 01:05:40.380
people need support.

01:05:40.380 --> 01:05:41.620
And I needed just encouragement.

01:05:41.620 --> 01:05:43.900
And they were helping encourage by contributing.

01:05:43.900 --> 01:05:47.260
And once the big thing for me was when John Hunter,

01:05:48.260 --> 01:05:50.220
he had previously done kind of a simple thing

01:05:50.220 --> 01:05:51.780
called numerics to kind of,

01:05:51.780 --> 01:05:53.100
between numeric and num array,

01:05:53.100 --> 01:05:55.140
he had a little high level tool

01:05:55.140 --> 01:05:57.940
that would just select each one for Matplotlib.

01:05:57.940 --> 01:06:00.460
In 2006, he finally said,

01:06:00.460 --> 01:06:03.260
we're gonna just make NumPy the dependency of Matplotlib.

01:06:03.260 --> 01:06:04.460
As soon as he did that,

01:06:04.460 --> 01:06:06.140
and I remember specifically when he did that,

01:06:06.140 --> 01:06:08.500
I said, okay, we've done it.

01:06:08.500 --> 01:06:11.300
That was when I knew he had just seen success.

01:06:11.300 --> 01:06:13.660
Before then, it was still, I'm just doing sure.

01:06:13.660 --> 01:06:15.100
But that kind of started a roller coaster.

01:06:15.100 --> 01:06:17.940
And then 2006 to 2009.

01:06:17.940 --> 01:06:20.980
And then I've been floored by what it's done.

01:06:20.980 --> 01:06:22.940
Like I knew it would help.

01:06:22.940 --> 01:06:25.420
I had no idea how much it would help.

01:06:25.420 --> 01:06:26.340
Right, so.

01:06:26.340 --> 01:06:28.740
And it has to do with, again, the language thing.

01:06:28.740 --> 01:06:31.980
It just, people started to think in terms of NumPy.

01:06:31.980 --> 01:06:32.820
Yes.

01:06:33.340 --> 01:06:36.460
And that opened up a whole new way of thinking.

01:06:36.460 --> 01:06:39.220
And part of the story that you kind of mentioned,

01:06:39.220 --> 01:06:42.940
but maybe you can elaborate,

01:06:42.940 --> 01:06:46.340
is it seems like at some point in the story,

01:06:47.500 --> 01:06:50.780
Python took over science and data science.

01:06:50.780 --> 01:06:51.620
Yes.

01:06:51.620 --> 01:06:54.820
And bigger than that,

01:06:54.820 --> 01:06:59.820
the scientific community started to think like programmers,

01:07:00.180 --> 01:07:04.300
or started to utilize the tools of computers to do,

01:07:04.300 --> 01:07:06.620
like at a scale that wasn't done with Fortran,

01:07:06.620 --> 01:07:09.300
like at this gigantic scale,

01:07:09.300 --> 01:07:10.740
they started to opening their heart.

01:07:10.740 --> 01:07:12.020
And then Python was the thing.

01:07:12.020 --> 01:07:14.260
I mean, there's a few other competitors, I guess,

01:07:14.260 --> 01:07:16.940
but Python, I think, really, really took over.

01:07:16.940 --> 01:07:17.780
I agree.

01:07:17.780 --> 01:07:18.620
There's a lot of stories here

01:07:18.620 --> 01:07:19.700
that are kind of during this journey,

01:07:19.700 --> 01:07:23.260
because this is sort of the start of this journey in 2005, 6.

01:07:23.260 --> 01:07:25.420
So my tenure committee,

01:07:25.420 --> 01:07:28.180
I applied for tenure in 2006, 2007.

01:07:28.180 --> 01:07:29.780
It came back, I split the department.

01:07:30.780 --> 01:07:32.180
I was very polarizing.

01:07:32.180 --> 01:07:33.420
I had some huge fans,

01:07:33.420 --> 01:07:35.260
and then some people that said no way, right?

01:07:35.260 --> 01:07:37.060
So it was very, I was a polarizing figure

01:07:37.060 --> 01:07:37.900
in the department.

01:07:37.900 --> 01:07:40.660
It went all the way up to the university president.

01:07:40.660 --> 01:07:43.700
Ultimately, my department chair had the sway,

01:07:43.700 --> 01:07:44.540
and they didn't say no.

01:07:44.540 --> 01:07:47.180
They said, come back in two years and do it again.

01:07:47.180 --> 01:07:50.460
And I went, mm, at that point, I was like,

01:07:50.460 --> 01:07:53.740
I had this interest in entrepreneurship,

01:07:53.740 --> 01:07:57.340
this interest in not the academic circles,

01:07:57.540 --> 01:07:59.700
how do we make industry work?

01:07:59.700 --> 01:08:03.060
So I do have to give credit to that exploration of economics,

01:08:03.060 --> 01:08:06.540
because that led me, oh, I had a lot of opinions.

01:08:06.540 --> 01:08:09.500
I was actually very libertarian at the time.

01:08:09.500 --> 01:08:11.820
And I still have some libertarian trends,

01:08:11.820 --> 01:08:15.740
but I'm more of a collectivist libertarian.

01:08:15.740 --> 01:08:18.660
So you value broadly, philosophically, freedom.

01:08:18.660 --> 01:08:20.300
I value broadly, philosophically, freedom,

01:08:20.300 --> 01:08:23.420
but I also understand the power of communities,

01:08:23.420 --> 01:08:26.140
like the power of collective behavior.

01:08:26.180 --> 01:08:27.820
And so what's that balance, right?

01:08:27.820 --> 01:08:28.900
That makes sense.

01:08:29.820 --> 01:08:31.540
So by the time I was just,

01:08:31.540 --> 01:08:33.380
I gotta go out and explore this entrepreneur world.

01:08:33.380 --> 01:08:35.540
So I left academia, I said, no thanks.

01:08:35.540 --> 01:08:37.820
Called my friend, Eric, here,

01:08:37.820 --> 01:08:39.580
who his company was going.

01:08:39.580 --> 01:08:43.100
I said, hey, could I join you and start this trend?

01:08:43.100 --> 01:08:45.940
And at that time, they were using sci-fi a lot.

01:08:45.940 --> 01:08:47.100
They were trying to get clients.

01:08:47.100 --> 01:08:48.740
And so I came down to Texas.

01:08:48.740 --> 01:08:51.140
And in Texas is where I sort of,

01:08:51.140 --> 01:08:53.420
it's my entrepreneur world, right?

01:08:53.420 --> 01:08:56.020
I left academia and went to entrepreneur world

01:08:56.900 --> 01:08:57.740
in 2007.

01:08:57.740 --> 01:08:59.900
So moved here in 2007, kind of took a leap,

01:08:59.900 --> 01:09:01.580
knew nothing really about business,

01:09:01.580 --> 01:09:03.700
knew nothing about a lot of stuff there.

01:09:05.060 --> 01:09:06.940
There's, you know, for a long time,

01:09:06.940 --> 01:09:08.940
I've kept some connections to a lot of academics

01:09:08.940 --> 01:09:10.060
because I still value it.

01:09:10.060 --> 01:09:12.540
I still love the scientific tradition.

01:09:12.540 --> 01:09:14.740
I still value the essence and the soul

01:09:14.740 --> 01:09:17.300
and the heart of what is possible.

01:09:17.300 --> 01:09:21.380
Don't like a lot of the administration

01:09:21.380 --> 01:09:24.580
and the kind of, we can go into detail about why and where

01:09:24.580 --> 01:09:25.420
and how this happens.

01:09:26.300 --> 01:09:28.500
I mean, I don't know, but I'm with you.

01:09:28.500 --> 01:09:31.860
So I'm still affiliated with MIT.

01:09:31.860 --> 01:09:35.660
I still love MIT because there's magic there.

01:09:35.660 --> 01:09:40.380
There's people I talk to, like researchers, faculty,

01:09:40.380 --> 01:09:43.180
in those conversations and the whiteboard

01:09:43.180 --> 01:09:46.260
and just the conversation, that's magic there.

01:09:46.260 --> 01:09:48.180
All the other stuff, the administration,

01:09:48.180 --> 01:09:51.060
all that kind of stuff seems to,

01:09:52.060 --> 01:09:54.940
you don't wanna say too harshly criticize

01:09:55.140 --> 01:09:58.980
bureaucracies, but there's a lag that seems to get

01:09:58.980 --> 01:10:00.820
in the way of the magic.

01:10:00.820 --> 01:10:05.820
And I'm still have a lot of hope that that can change

01:10:05.940 --> 01:10:10.780
because I don't often see that particular type of magic

01:10:10.780 --> 01:10:12.820
elsewhere in the industry.

01:10:12.820 --> 01:10:16.180
So like we need that and we need that flame going.

01:10:16.180 --> 01:10:19.100
And it's the same thing as exactly as you said,

01:10:19.100 --> 01:10:20.540
it has the same kind of elements

01:10:20.540 --> 01:10:22.500
like the open source community does.

01:10:23.260 --> 01:10:27.180
And, but then if you, like the reason I stepped away,

01:10:27.180 --> 01:10:29.900
the reason I'm here, just like you did in Austin

01:10:29.900 --> 01:10:33.220
is like, if I wanna build one robot, I'll stay at MIT.

01:10:33.220 --> 01:10:37.460
But if I wanna build millions and make money enough

01:10:37.460 --> 01:10:40.980
to where I can explore the magic of that, then you can't.

01:10:40.980 --> 01:10:44.140
And I think that dance is-

01:10:44.140 --> 01:10:47.500
That translational dance has been lost a bit.

01:10:47.500 --> 01:10:48.820
And there's a lot of reasons for that.

01:10:48.820 --> 01:10:50.180
I'm certainly not an expert on this stuff.

01:10:50.180 --> 01:10:51.660
I can opine like anybody else,

01:10:51.660 --> 01:10:55.820
but I realized that I wanted to explore entrepreneurship

01:10:55.820 --> 01:10:57.740
which I know and really figure out

01:10:57.740 --> 01:11:01.540
and it's been a driving passion for 20 years, 20, 25 years.

01:11:01.540 --> 01:11:06.500
How do we connect capital markets and company?

01:11:06.500 --> 01:11:07.860
Because again, I fell in love with the notion

01:11:07.860 --> 01:11:11.140
of profit seeking on its own is not a bad thing.

01:11:11.140 --> 01:11:13.540
It's actually a coordination mechanism

01:11:13.540 --> 01:11:17.980
for allocating resources that in an emergent way, right?

01:11:17.980 --> 01:11:20.740
That respects everybody's opinions, right?

01:11:20.740 --> 01:11:21.940
So this is actually powerful.

01:11:21.940 --> 01:11:25.340
So I say all the time, when I make a company

01:11:25.340 --> 01:11:27.300
and we do something that makes profit,

01:11:27.300 --> 01:11:28.820
what we're saying is, hey, we're collecting

01:11:28.820 --> 01:11:30.500
of the world's resources and voluntarily,

01:11:30.500 --> 01:11:33.060
people are asking us to do something that they like.

01:11:33.060 --> 01:11:34.060
And that's a huge deal.

01:11:34.060 --> 01:11:36.180
And so I really liked that energy.

01:11:36.180 --> 01:11:37.580
So that's what I came to do and to learn

01:11:37.580 --> 01:11:38.540
and to try to figure out.

01:11:38.540 --> 01:11:40.180
And that's what I've been kind of stumbling through

01:11:40.180 --> 01:11:41.020
since for the past 14 years.

01:11:41.020 --> 01:11:42.580
And that's 2007.

01:11:42.580 --> 01:11:43.420
2007, yeah.

01:11:43.420 --> 01:11:45.020
And so you were still working on-

01:11:45.020 --> 01:11:46.620
So NumPy was just emerging.

01:11:46.620 --> 01:11:47.900
Just emerging.

01:11:47.900 --> 01:11:50.020
One of the things I've done, it's worth mentioning

01:11:50.020 --> 01:11:52.540
because it emphasizes the exploratory nature

01:11:52.540 --> 01:11:53.380
of my thinking at the time.

01:11:53.380 --> 01:11:55.260
I said, well, I don't know how to fund this thing.

01:11:55.260 --> 01:11:56.740
I've got a graduate student I'm paying for

01:11:56.740 --> 01:11:57.900
and I've got no funding for him.

01:11:57.900 --> 01:12:00.540
And I had done some fundraising from the public

01:12:00.540 --> 01:12:02.860
to try to get public fundraising from my lab.

01:12:02.860 --> 01:12:03.900
I didn't really wanna go out

01:12:03.900 --> 01:12:05.380
and just do the fundraising circuit

01:12:05.380 --> 01:12:06.980
the way it's traditionally done.

01:12:06.980 --> 01:12:09.980
So I wrote a book and I said, I'm gonna write a book

01:12:09.980 --> 01:12:11.460
and I'm gonna charge for it.

01:12:11.460 --> 01:12:12.740
It was called Guide to NumPy.

01:12:12.740 --> 01:12:14.060
And so ultimately NumPy became

01:12:14.060 --> 01:12:16.020
documentation-driven development

01:12:16.020 --> 01:12:17.300
because I basically wrote the book

01:12:17.300 --> 01:12:19.780
and made sure the stuff worked so the book would work.

01:12:20.220 --> 01:12:23.060
It really helped actually make NumPy become a thing.

01:12:23.060 --> 01:12:28.060
So writing that book, and it's not a page-turner.

01:12:28.220 --> 01:12:29.700
Guide to NumPy is not a book you pick up

01:12:29.700 --> 01:12:31.540
and go, oh, this is great, over the fire.

01:12:31.540 --> 01:12:33.900
But it's where you could find the details.

01:12:33.900 --> 01:12:34.740
How'd all this work?

01:12:34.740 --> 01:12:36.580
And a lot of people loved that book.

01:12:36.580 --> 01:12:38.620
And so a lot of people ended up,

01:12:38.620 --> 01:12:40.060
but I said, look, I need it.

01:12:40.060 --> 01:12:41.620
So I'm gonna charge for it.

01:12:41.620 --> 01:12:42.780
And I got some flack for that.

01:12:42.780 --> 01:12:45.940
Not that much, just probably five angry messages,

01:12:45.940 --> 01:12:49.980
people yelling at me saying I was a bad guy

01:12:49.980 --> 01:12:51.380
for charging for this book.

01:12:51.380 --> 01:12:52.700
Was one of them Richard Stallman?

01:12:52.700 --> 01:12:54.100
No. Just kidding.

01:12:54.100 --> 01:12:55.780
No, I haven't really had any interaction

01:12:55.780 --> 01:12:57.820
with him personally, like I said.

01:12:57.820 --> 01:13:01.300
But there were a few, but actually surprisingly not.

01:13:01.300 --> 01:13:02.780
There was actually a lot of people like,

01:13:02.780 --> 01:13:04.260
no, it's fine, you can charge for a book.

01:13:04.260 --> 01:13:05.100
That's no big deal.

01:13:05.100 --> 01:13:07.100
We know that's a way you can try to make money

01:13:07.100 --> 01:13:07.940
around open source.

01:13:07.940 --> 01:13:10.180
So what I did, I did it in an interesting way.

01:13:10.180 --> 01:13:14.300
I said, well, my ideas around IP law and stuff,

01:13:14.300 --> 01:13:15.580
I love the idea you can share something

01:13:15.580 --> 01:13:17.140
and you can spread it.

01:13:17.140 --> 01:13:20.220
The fact that you have a thing and copying is free,

01:13:20.220 --> 01:13:21.700
but the creation is not free.

01:13:21.700 --> 01:13:25.660
So how do you fund the creation and allow the copying?

01:13:25.660 --> 01:13:27.100
And then software is a little more complicated than that

01:13:27.100 --> 01:13:29.220
because creation is actually a continuous thing.

01:13:29.220 --> 01:13:31.260
It's not like you build a widget and it's done.

01:13:31.260 --> 01:13:34.620
It's sort of a process of emerging and continuing to create.

01:13:34.620 --> 01:13:35.580
But I wrote the book

01:13:35.580 --> 01:13:37.580
and had this market-determined price thing.

01:13:37.580 --> 01:13:40.780
I said, look, I think I said 250,000.

01:13:40.780 --> 01:13:44.340
If I make 250,000 from this book, I'll make it free.

01:13:44.340 --> 01:13:45.820
So as soon as I get that much money,

01:13:45.820 --> 01:13:48.140
or I said five years, right?

01:13:48.140 --> 01:13:50.060
So there's a time limit, like it's not forever.

01:13:50.060 --> 01:13:50.900
I didn't know this story.

01:13:50.900 --> 01:13:51.740
It's amazing.

01:13:51.740 --> 01:13:54.300
I released it on this and it's actually interesting

01:13:54.300 --> 01:13:55.900
because one of the people

01:13:55.900 --> 01:13:57.100
who also thought that was interesting

01:13:57.100 --> 01:13:58.660
ended up being Chris White,

01:13:58.660 --> 01:14:01.420
who was the director of DARPA project

01:14:01.420 --> 01:14:03.020
that we got funding through at Anaconda.

01:14:03.020 --> 01:14:04.700
And the reason he even called us back

01:14:04.700 --> 01:14:06.820
is because he remembered my name from this book

01:14:06.820 --> 01:14:08.180
and he thought that was interesting.

01:14:08.180 --> 01:14:10.940
And so even though we hadn't gone to the demo days,

01:14:10.940 --> 01:14:12.620
we applied and the people said,

01:14:12.620 --> 01:14:13.580
yeah, nobody ever gets this

01:14:13.580 --> 01:14:15.460
without coming to the demo day first.

01:14:15.460 --> 01:14:16.380
This is the first time I've seen it.

01:14:16.380 --> 01:14:18.260
But it's because I knew, you know,

01:14:18.260 --> 01:14:19.700
Chris had done this and had this interaction.

01:14:19.700 --> 01:14:21.740
So it did have impact.

01:14:21.740 --> 01:14:23.940
I was actually really, really pleased by the result.

01:14:23.940 --> 01:14:27.420
I mean, I ended up in three years, I made 90,000.

01:14:27.420 --> 01:14:29.540
So I sold 30,000 copies by myself.

01:14:29.540 --> 01:14:33.060
I just put it up on, you know, used PayPal and sold it.

01:14:33.060 --> 01:14:35.540
And those are my first taste of kind of,

01:14:35.540 --> 01:14:37.660
okay, this can work to some degree.

01:14:37.660 --> 01:14:40.420
And I, you know, all over the world, right?

01:14:40.420 --> 01:14:44.540
From Germany to Japan, it was actually, it did work.

01:14:44.540 --> 01:14:47.100
And so I appreciated the fact that PayPal existed

01:14:47.100 --> 01:14:49.180
and I had a way to make, to get the money.

01:14:49.180 --> 01:14:51.220
The distribution was simple.

01:14:51.220 --> 01:14:53.500
This is pre Amazon book stuff.

01:14:53.500 --> 01:14:55.340
So it was just publishing a website.

01:14:55.340 --> 01:14:57.180
It was the popularity of sci-fi emerging

01:14:57.180 --> 01:14:58.980
and getting company usage.

01:14:58.980 --> 01:15:00.660
I ended up not letting it go to five years

01:15:00.660 --> 01:15:02.020
and not trying to make the full amount

01:15:02.020 --> 01:15:04.580
because, you know, a year and a half later,

01:15:04.580 --> 01:15:05.420
I was at Entho.

01:15:05.420 --> 01:15:06.700
I had left academia at Entho

01:15:06.700 --> 01:15:07.900
and I kind of had a full-time job.

01:15:07.900 --> 01:15:10.020
And then actually what happened is the documentation people,

01:15:10.020 --> 01:15:10.860
there was a group that said,

01:15:10.860 --> 01:15:13.060
hey, we want to do the documentation for sci-fi

01:15:13.060 --> 01:15:14.300
as a collective.

01:15:14.300 --> 01:15:18.140
And they were essentially needing the stuff in the book.

01:15:18.140 --> 01:15:18.980
Right?

01:15:18.980 --> 01:15:20.340
And so they kind of asked,

01:15:20.340 --> 01:15:21.900
hey, could we just use the stuff in your book?

01:15:21.900 --> 01:15:24.140
And at that point I said, yeah, I'll just open it up.

01:15:24.140 --> 01:15:27.260
So that's, but it has served its purpose.

01:15:27.260 --> 01:15:30.980
And the money that I made actually funded my grad student.

01:15:30.980 --> 01:15:32.140
Like it was actually, you know,

01:15:32.140 --> 01:15:35.380
I paid him 25,000 a year out of that money.

01:15:35.380 --> 01:15:37.620
So the funny thing is if you do a very similar kind

01:15:37.660 --> 01:15:40.620
of experiment now with NumPy or something like it,

01:15:40.620 --> 01:15:42.420
you could probably make a lot more.

01:15:42.420 --> 01:15:43.740
It's probably true.

01:15:43.740 --> 01:15:46.380
Because of the tooling and the community building.

01:15:46.380 --> 01:15:47.220
Yeah, I agree.

01:15:47.220 --> 01:15:49.180
Like the, and social media,

01:15:49.180 --> 01:15:51.580
there's just a virality to that kind of idea.

01:15:51.580 --> 01:15:52.400
I agree.

01:15:52.400 --> 01:15:53.240
There'd be things to do.

01:15:53.240 --> 01:15:54.080
I've thought about that.

01:15:54.080 --> 01:15:56.060
And really I thought about a couple of books

01:15:56.060 --> 01:15:57.460
or a couple of things that could be done there.

01:15:57.460 --> 01:15:58.940
And I just haven't, right?

01:15:58.940 --> 01:16:01.900
Even I tried to hire a ghostwriter this year or two

01:16:01.900 --> 01:16:04.180
to see if that could help, but it didn't.

01:16:04.180 --> 01:16:06.220
But part of my problem is this,

01:16:06.220 --> 01:16:08.060
I've been so excited by a number of things

01:16:08.060 --> 01:16:09.780
that I stepped in from that.

01:16:09.780 --> 01:16:13.020
So I came here, worked at Enthot for four years.

01:16:13.020 --> 01:16:14.980
Graciously, Eric made me president.

01:16:14.980 --> 01:16:16.300
Then we started to work closely together.

01:16:16.300 --> 01:16:19.460
We actually helped him buy out his partner.

01:16:19.460 --> 01:16:20.740
It didn't end great.

01:16:20.740 --> 01:16:22.900
Like, unfortunately, Eric and I aren't real,

01:16:22.900 --> 01:16:24.580
aren't friends now.

01:16:24.580 --> 01:16:25.420
I still respect him.

01:16:25.420 --> 01:16:26.660
I have a lot, I wish we were,

01:16:26.660 --> 01:16:29.740
but he didn't like the fact that I,

01:16:29.740 --> 01:16:31.740
that Peter and I started Anaconda, right?

01:16:31.740 --> 01:16:36.200
That was not, I mean, so there's two sides to that story.

01:16:36.200 --> 01:16:37.360
So I'm not gonna go into it, right?

01:16:37.360 --> 01:16:38.200
Sure.

01:16:38.200 --> 01:16:40.560
But you, as human beings,

01:16:40.560 --> 01:16:42.320
and you wish you still could be friends.

01:16:42.320 --> 01:16:43.320
I do.

01:16:43.320 --> 01:16:44.160
I do.

01:16:44.160 --> 01:16:45.160
It saddens me.

01:16:45.160 --> 01:16:49.080
I mean, that's a story of great minds

01:16:49.080 --> 01:16:51.480
building great companies.

01:16:51.480 --> 01:16:55.000
Somehow it's sad that when there's that kind of...

01:16:55.000 --> 01:16:57.400
And I hold him in esteem.

01:16:57.400 --> 01:16:58.240
I'm grateful for him.

01:16:58.240 --> 01:16:59.080
I think he's, they're doing,

01:16:59.080 --> 01:17:00.320
you know, Enthot still exists.

01:17:00.320 --> 01:17:02.520
They're doing great work helping scientists.

01:17:02.520 --> 01:17:05.040
They still run the SciPy conference.

01:17:05.040 --> 01:17:06.560
They're in the, they have an R&D platform

01:17:06.560 --> 01:17:08.680
they're selling now that's a tool

01:17:08.680 --> 01:17:10.080
that you can go get today, right?

01:17:10.080 --> 01:17:14.920
So they've been, Enthot has played a role in the SciPy

01:17:14.920 --> 01:17:18.240
in supporting the community around SciPy, I would say.

01:17:18.240 --> 01:17:20.560
They ended up not being able to,

01:17:20.560 --> 01:17:22.040
they ended up building a tool suite

01:17:22.040 --> 01:17:24.060
to write GUI applications.

01:17:24.060 --> 01:17:25.440
Like that's where they could actually make

01:17:25.440 --> 01:17:26.680
that the business could work.

01:17:26.680 --> 01:17:29.480
And so the supporting SciPy and NumPy itself

01:17:29.480 --> 01:17:30.560
wasn't as possible.

01:17:30.560 --> 01:17:31.960
Like they didn't, they try.

01:17:31.960 --> 01:17:33.320
I mean, it was not just because,

01:17:33.320 --> 01:17:34.520
it was just because of the business aspect.

01:17:34.520 --> 01:17:36.280
So, and then I wanted to build a company

01:17:36.280 --> 01:17:39.120
that could do, that could get venture funding, right?

01:17:39.120 --> 01:17:39.960
Better for worse.

01:17:39.960 --> 01:17:41.080
I mean, that's a longer story.

01:17:41.080 --> 01:17:42.400
We could talk a lot about that, but.

01:17:42.400 --> 01:17:44.240
And that's where Anaconda came to be.

01:17:44.240 --> 01:17:45.080
That's where Anaconda came to be.

01:17:45.080 --> 01:17:48.080
So let me ask you, it's a little bit for fun

01:17:48.080 --> 01:17:50.080
because you've built this amazing thing.

01:17:50.080 --> 01:17:54.680
And so let's talk about like an old warrior

01:17:54.680 --> 01:17:56.320
looking over old battles.

01:17:57.360 --> 01:18:01.520
You've, you know, there's a sad letter in 2012

01:18:01.520 --> 01:18:04.400
that you wrote to the NumPy mailing list

01:18:05.280 --> 01:18:06.680
and you're announcing that you're leaving NumPy.

01:18:06.680 --> 01:18:08.600
And some of the things you've listed

01:18:08.600 --> 01:18:10.760
and some of the things you regret

01:18:10.760 --> 01:18:14.460
or not regret necessarily, but some things to think about.

01:18:14.460 --> 01:18:17.680
If you could go back and you could fix stuff about NumPy

01:18:17.680 --> 01:18:20.660
or both sort of in a personal level,

01:18:20.660 --> 01:18:22.000
but also like looking forward,

01:18:22.000 --> 01:18:24.580
what kind of things would you like to see changed?

01:18:24.580 --> 01:18:25.420
Good question.

01:18:25.420 --> 01:18:26.360
So I think there's technical questions

01:18:26.360 --> 01:18:28.220
and social questions right there.

01:18:29.720 --> 01:18:33.440
First of all, you know, I wrote NumPy as a service

01:18:33.440 --> 01:18:35.040
and I spent a lot of time doing it.

01:18:35.040 --> 01:18:36.780
And then other people came help make it happen.

01:18:36.780 --> 01:18:39.880
NumPy succeeded because the work of a lot of people, right?

01:18:39.880 --> 01:18:42.240
So it's important to understand that.

01:18:42.240 --> 01:18:44.440
I'm grateful for the opportunity, the role I had,

01:18:44.440 --> 01:18:46.280
I could play and I'm grateful that things I did

01:18:46.280 --> 01:18:49.240
had an impact, but they only had the impact they had

01:18:49.240 --> 01:18:52.240
because the other people that came to the story.

01:18:52.240 --> 01:18:53.460
And so they were essential.

01:18:53.460 --> 01:18:55.760
But the way data types were handled,

01:18:55.760 --> 01:18:58.800
the way data types, we had array scalars, for example,

01:18:59.320 --> 01:19:04.080
that are really just a substitute for a type concept, right?

01:19:04.080 --> 01:19:06.960
So we had, array scalars are actual Python objects

01:19:06.960 --> 01:19:09.480
so that there's for every, for a 32-bit float

01:19:09.480 --> 01:19:13.120
or a 16-bit float or a 16-bit integer,

01:19:13.120 --> 01:19:16.000
Python doesn't have a natural, it's just one integer,

01:19:16.000 --> 01:19:17.020
there's one float.

01:19:17.020 --> 01:19:19.920
Well, what about these lower precision types,

01:19:19.920 --> 01:19:21.560
these larger precision types?

01:19:21.560 --> 01:19:23.640
So we had them in NumPy

01:19:23.640 --> 01:19:25.280
so that you could have a collection of them,

01:19:25.280 --> 01:19:28.720
but then have an object in Python that was one of them.

01:19:29.560 --> 01:19:31.440
And there's questions about, like in retrospect,

01:19:31.440 --> 01:19:32.920
I wouldn't have created those

01:19:32.920 --> 01:19:35.120
if it improved the type system.

01:19:35.120 --> 01:19:38.040
Like made the type system actually a Python type system

01:19:38.040 --> 01:19:41.440
as opposed to currently it's a Python one level type system.

01:19:41.440 --> 01:19:42.280
I don't know if you know the difference

01:19:42.280 --> 01:19:44.320
between Python one, Python two, it's kind of tentacle,

01:19:44.320 --> 01:19:45.900
kind of depth, but Python two,

01:19:45.900 --> 01:19:47.360
one of its big things that Guido did,

01:19:47.360 --> 01:19:48.200
it was really brilliant.

01:19:48.200 --> 01:19:52.920
It was he actually, Python one, all classes,

01:19:52.920 --> 01:19:55.080
new objects were one.

01:19:55.080 --> 01:19:56.920
So he was a user, wrote a class.

01:19:56.920 --> 01:19:59.640
It was an instance of a single Python type

01:19:59.640 --> 01:20:02.040
called the class type, right?

01:20:02.040 --> 01:20:06.280
In Python two, he used a meta typing hook

01:20:06.280 --> 01:20:08.000
to actually go, oh, we can extend this

01:20:08.000 --> 01:20:11.000
and have users write classes that are new types.

01:20:11.000 --> 01:20:13.320
So he was able to have your user classes be actual types

01:20:13.320 --> 01:20:16.520
and the Python type system got a lot more rich.

01:20:16.520 --> 01:20:19.200
I barely understood that at the time that NumPy was written.

01:20:19.200 --> 01:20:21.440
And so I essentially, in NumPy,

01:20:21.440 --> 01:20:24.440
created a type system that was Python one era.

01:20:24.440 --> 01:20:29.280
It was every D type is an instance of the same type,

01:20:29.280 --> 01:20:33.200
as opposed to having new D types be really just Python types

01:20:33.200 --> 01:20:34.320
with additional metadata.

01:20:34.320 --> 01:20:35.480
What's the cost of that?

01:20:35.480 --> 01:20:37.280
Is it efficiency, is it usability?

01:20:37.280 --> 01:20:38.880
It's usability, primarily.

01:20:38.880 --> 01:20:40.360
The cost isn't really efficiency.

01:20:40.360 --> 01:20:45.120
It's the fact that it's clumsy to create new types.

01:20:45.120 --> 01:20:47.560
It's hard, and then one of the challenges

01:20:47.560 --> 01:20:48.420
is you wanna create new types.

01:20:48.420 --> 01:20:49.520
You wanna quaternion type,

01:20:49.520 --> 01:20:52.640
or you wanna add a new posit type,

01:20:52.640 --> 01:20:55.080
or you wanna, so it's hard.

01:20:55.080 --> 01:20:59.200
Now, and now, if we'd have done that well,

01:20:59.200 --> 01:21:00.440
when Numba came on the scene

01:21:00.440 --> 01:21:02.880
where we could actually compile Python code,

01:21:02.880 --> 01:21:05.160
it would integrate with that type system much cleaner.

01:21:05.160 --> 01:21:06.000
And now all of a sudden

01:21:06.000 --> 01:21:08.520
you could do gradual typing more easily.

01:21:08.520 --> 01:21:09.800
You could actually have Python

01:21:09.800 --> 01:21:11.960
when you add Numba plus better typing,

01:21:11.960 --> 01:21:13.560
could actually be a,

01:21:14.720 --> 01:21:17.200
you'd smooth out a lot of rough edges.

01:21:17.200 --> 01:21:18.840
But there's already, there's like,

01:21:18.840 --> 01:21:20.960
but are you talking about from the perspective

01:21:20.960 --> 01:21:24.440
of developers within NumPy or users of NumPy?

01:21:24.440 --> 01:21:27.160
Developers of new, not really users of NumPy so much,

01:21:27.160 --> 01:21:28.800
it's the development of NumPy.

01:21:28.800 --> 01:21:32.240
So you're thinking about how to design NumPy

01:21:32.240 --> 01:21:33.960
so that it's contributors.

01:21:33.960 --> 01:21:35.960
Yeah, the contributors, it's easier.

01:21:35.960 --> 01:21:36.800
It's easier.

01:21:36.800 --> 01:21:39.880
It's less work to make it better and to keep it maintained.

01:21:39.880 --> 01:21:43.640
And where that's impacted things, for example, is the GPU.

01:21:43.640 --> 01:21:45.600
All of a sudden GPUs start getting added,

01:21:45.600 --> 01:21:48.600
and we don't have them in NumPy.

01:21:48.600 --> 01:21:50.640
NumPy should just work on GPUs.

01:21:50.640 --> 01:21:52.720
The fact that we'd have to download a whole other object

01:21:52.720 --> 01:21:54.840
called Kupai to have arrays on GPUs

01:21:54.840 --> 01:21:57.480
is just an artifact of history.

01:21:57.480 --> 01:21:59.200
Like there's no fundamental reason for it.

01:21:59.200 --> 01:22:00.240
Well, that's really interesting

01:22:00.240 --> 01:22:02.560
if we could sort of go on that tangent briefly

01:22:02.560 --> 01:22:07.560
is you have PyTorch and other library like TensorFlow

01:22:07.840 --> 01:22:11.880
that basically tried to mimic NumPy.

01:22:11.880 --> 01:22:15.760
Like you've created a sort of platonic form

01:22:15.760 --> 01:22:17.000
of multi-dimensional. Basically, yeah.

01:22:17.000 --> 01:22:17.840
Yeah, exactly.

01:22:17.840 --> 01:22:19.840
Well, and the problem was I didn't realize that.

01:22:19.840 --> 01:22:21.880
Platonic form has a lot of edges.

01:22:21.880 --> 01:22:23.440
They're like, well, we should cut those out

01:22:23.440 --> 01:22:24.280
before we present it.

01:22:24.280 --> 01:22:27.000
So I wonder if you can comment,

01:22:27.000 --> 01:22:29.440
is there like a difference between their implementations?

01:22:29.440 --> 01:22:31.520
Do you wish that they were all using NumPy

01:22:31.520 --> 01:22:34.120
or like in this abstraction over GPU?

01:22:34.120 --> 01:22:38.320
And sorry to interrupt that there's GPUs, ASICs,

01:22:38.320 --> 01:22:40.160
there might be other neuromorphic computing.

01:22:40.160 --> 01:22:41.680
There might be other kind of,

01:22:41.680 --> 01:22:44.040
or the aliens will come with a new kind of computer,

01:22:44.040 --> 01:22:47.960
like an abstraction that NumPy should just operate nicely

01:22:47.960 --> 01:22:50.360
over the things that are more and more

01:22:50.360 --> 01:22:54.280
and smarter and smarter with this multi-dimensional arrays.

01:22:54.280 --> 01:22:55.200
Yeah, yeah.

01:22:55.200 --> 01:22:57.000
I have, there's several comments there.

01:22:57.000 --> 01:23:00.480
We are working on something now called data-api.org.

01:23:00.480 --> 01:23:02.640
Data-api.org. You can go there today.

01:23:02.640 --> 01:23:04.560
And it's our answer.

01:23:04.560 --> 01:23:05.400
It's my answer.

01:23:05.400 --> 01:23:09.240
It's not just me, it's me and Rolf and Athen and Aaron,

01:23:09.240 --> 01:23:12.280
and a lot of companies are helping us at QuantSite Labs.

01:23:13.240 --> 01:23:14.640
It's not unifying all the arrays,

01:23:14.640 --> 01:23:17.280
it's creating an API that is unified.

01:23:17.280 --> 01:23:21.360
So we do care about this and are trying to work through it.

01:23:21.360 --> 01:23:22.640
I actually had the chance to go and meet

01:23:22.640 --> 01:23:25.440
with the TensorFlow team and the PyTorch team

01:23:25.440 --> 01:23:29.200
and talk to them after exiting Anaconda.

01:23:29.200 --> 01:23:31.560
Just talking about, cause the first year

01:23:31.560 --> 01:23:34.040
after leaving Anaconda in 2018,

01:23:34.040 --> 01:23:36.080
I became deeply aware of this and realized that,

01:23:36.080 --> 01:23:39.040
oh, this split in the array community that exists today

01:23:39.040 --> 01:23:43.080
makes what I was concerned about in 2005 pretty parochial.

01:23:44.240 --> 01:23:45.960
It's a lot worse, right?

01:23:45.960 --> 01:23:47.400
Now there's a lot more people,

01:23:47.400 --> 01:23:51.520
so perhaps the industry can sustain more stacks, right?

01:23:51.520 --> 01:23:52.680
There's a lot of money,

01:23:52.680 --> 01:23:54.240
but it makes it a lot less efficient.

01:23:54.240 --> 01:23:56.840
I mean, this, but I've also learned to appreciate,

01:23:56.840 --> 01:23:58.560
it's okay to have some competition.

01:23:58.560 --> 01:24:00.880
It's okay to have different implementations,

01:24:00.880 --> 01:24:03.680
but it's better if you can at least refactor some parts.

01:24:03.680 --> 01:24:05.080
I mean, you're gonna be more efficient

01:24:05.080 --> 01:24:06.480
if you can refactor parts.

01:24:06.480 --> 01:24:10.000
It's nice to have competition over things over-

01:24:10.000 --> 01:24:10.840
That are innovative.

01:24:10.840 --> 01:24:11.680
It's nice to have competition.

01:24:11.680 --> 01:24:12.640
Right, that are innovative.

01:24:12.640 --> 01:24:15.200
Yeah, innovative and then maybe on the infrastructure.

01:24:15.960 --> 01:24:18.160
Whatever, however you define infrastructure,

01:24:18.160 --> 01:24:21.440
that maybe it's nice to have come together.

01:24:21.440 --> 01:24:22.480
Exactly, I agree.

01:24:22.480 --> 01:24:24.680
And I think, but it was interesting to hear the stories.

01:24:24.680 --> 01:24:29.080
I mean, TensorFlow came out of the C++ library.

01:24:29.080 --> 01:24:30.240
Jeff Dean wrote, I think,

01:24:30.240 --> 01:24:33.600
there was basically how they were doing inference, right?

01:24:33.600 --> 01:24:34.440
And then they realized,

01:24:34.440 --> 01:24:36.480
oh, we could do this TensorFlow thing.

01:24:36.480 --> 01:24:38.440
That C++ library, then what was interesting to me

01:24:38.440 --> 01:24:42.640
was the fact that both Google and Facebook did not,

01:24:42.640 --> 01:24:45.000
it's not like they supported Python or NumPy initially.

01:24:45.840 --> 01:24:47.240
They just realized they had to.

01:24:47.240 --> 01:24:48.880
They came to this world and then all the users were like,

01:24:48.880 --> 01:24:50.760
hey, where's the NumPy interface?

01:24:50.760 --> 01:24:52.640
Oh, then they kind of came late to it

01:24:52.640 --> 01:24:54.880
and then they had these bolt-ons.

01:24:54.880 --> 01:24:57.360
TensorFlow's bolt-on, I don't mean to offend,

01:24:57.360 --> 01:24:58.520
but it was so bad.

01:24:58.520 --> 01:24:59.360
Yeah, it was bad.

01:24:59.360 --> 01:25:01.800
It's the first time that I'm usually,

01:25:01.800 --> 01:25:04.200
I mean, one of the challenges I have

01:25:04.200 --> 01:25:06.560
is I don't criticize enough,

01:25:06.560 --> 01:25:10.000
in the sense that I don't give people input enough.

01:25:10.000 --> 01:25:11.720
I think it's universally agreed upon

01:25:11.720 --> 01:25:13.160
that the bolt-ons on TensorFlow-

01:25:13.160 --> 01:25:14.000
Right, but I went to,

01:25:14.000 --> 01:25:17.080
there was a talk given at a Py, at Majorca in Spain

01:25:17.080 --> 01:25:19.560
and a great guy came and gave a talk.

01:25:19.560 --> 01:25:21.400
I said, you should never show that API again

01:25:21.400 --> 01:25:23.040
at a PyData conference.

01:25:23.040 --> 01:25:24.840
Like that was, that's terrible.

01:25:24.840 --> 01:25:27.080
Like you're taking this beautiful system we've created

01:25:27.080 --> 01:25:29.480
and like you're corrupting all these poor Python people,

01:25:29.480 --> 01:25:30.840
forcing them to write code like that

01:25:30.840 --> 01:25:32.640
or thinking they should.

01:25:32.640 --> 01:25:35.640
Fortunately, they adopted Keras as their,

01:25:35.640 --> 01:25:36.760
and Keras is better.

01:25:36.760 --> 01:25:40.360
And so Keras, TensorFlow is fine, is reasonable.

01:25:40.360 --> 01:25:42.680
But they bolted it on.

01:25:42.720 --> 01:25:43.680
Facebook did too.

01:25:43.680 --> 01:25:48.200
Like Facebook had their own C++ library for doing inference

01:25:48.200 --> 01:25:51.200
and they also had the same reaction, they had to do this.

01:25:51.200 --> 01:25:52.880
One big difference is Facebook,

01:25:52.880 --> 01:25:55.280
maybe because of the way it's situated in part of FAIR,

01:25:55.280 --> 01:25:56.640
part of their research library,

01:25:56.640 --> 01:25:59.800
TensorFlow is definitely used and they have to make,

01:25:59.800 --> 01:26:02.280
they couldn't just open it up and let the community

01:26:02.280 --> 01:26:03.200
change what that is,

01:26:03.200 --> 01:26:04.680
because I guess they were worried

01:26:04.680 --> 01:26:06.920
about disrupting their operations.

01:26:06.920 --> 01:26:10.720
Facebook's been much more open to having community input

01:26:10.720 --> 01:26:12.400
on the structure itself.

01:26:12.400 --> 01:26:14.240
Whereas Google and TensorFlow,

01:26:14.240 --> 01:26:16.000
they're really eager to have user community users.

01:26:16.000 --> 01:26:17.520
People use it and build the infrastructure,

01:26:17.520 --> 01:26:18.840
but it's much more walled.

01:26:18.840 --> 01:26:21.600
Like it's harder to become a contributor to TensorFlow.

01:26:21.600 --> 01:26:24.800
And it's also, this is very difficult question to answer

01:26:24.800 --> 01:26:27.080
and don't mean to be throwing shade at anybody,

01:26:27.080 --> 01:26:28.520
but you have to wonder,

01:26:28.520 --> 01:26:31.840
it's the Microsoft question of when you have a tool

01:26:31.840 --> 01:26:33.920
like PyTorch or TensorFlow,

01:26:33.920 --> 01:26:36.320
how much are you tending to the hackers

01:26:36.320 --> 01:26:39.240
and how much are you tending to the big corporate clients?

01:26:39.240 --> 01:26:40.080
Correct.

01:26:40.080 --> 01:26:44.200
So like the ones, do you tend to the millions of people

01:26:44.200 --> 01:26:46.480
that are giving you almost no money

01:26:46.480 --> 01:26:50.360
or do you tend to the few that are giving you a ton of money?

01:26:50.360 --> 01:26:54.040
I tend to stand with the people.

01:26:54.040 --> 01:26:54.880
Right.

01:26:54.880 --> 01:26:57.800
Because I feel like if you nurture the hackers,

01:26:57.800 --> 01:27:00.240
you will make the right decisions in the long term

01:27:00.240 --> 01:27:02.040
that will make the companies happy too.

01:27:02.040 --> 01:27:03.320
I lean that way too.

01:27:03.320 --> 01:27:04.160
I totally agree with you.

01:27:04.160 --> 01:27:05.640
But then you have to find the right data.

01:27:05.640 --> 01:27:07.120
But it's a balance.

01:27:07.120 --> 01:27:09.040
Because you can lean to the hackers and run out of money.

01:27:09.040 --> 01:27:11.520
Yeah, exactly.

01:27:11.520 --> 01:27:13.840
Which has been some of the challenge I've faced

01:27:13.840 --> 01:27:17.120
in the sense that I would look at some of the experiments

01:27:17.120 --> 01:27:19.120
like NumPy, the fact that we have this split

01:27:19.120 --> 01:27:21.800
is a factor of I wasn't able to collect more money

01:27:21.800 --> 01:27:23.640
towards NumPy development, right?

01:27:23.640 --> 01:27:26.560
I mean, I didn't succeed in the early days

01:27:26.560 --> 01:27:29.640
of getting enough financial contribution to NumPy

01:27:29.640 --> 01:27:31.320
so they could work on it, right?

01:27:31.320 --> 01:27:32.480
I couldn't work on it full-time.

01:27:32.480 --> 01:27:35.720
I had to just catch an hour here, an hour there.

01:27:35.720 --> 01:27:37.960
And I basically not liked that.

01:27:38.200 --> 01:27:40.000
I wanted to be able to do something about that

01:27:40.000 --> 01:27:41.520
for a long time and try to figure out how.

01:27:41.520 --> 01:27:43.040
Well, there's lots of ways.

01:27:43.040 --> 01:27:44.680
I mean, possibly one could say,

01:27:44.680 --> 01:27:48.320
we had an offer from Microsoft at early days of Anaconda.

01:27:48.320 --> 01:27:51.240
2014, they offered to come buy us, right?

01:27:51.240 --> 01:27:52.800
The problem was the right people at Microsoft

01:27:52.800 --> 01:27:53.640
didn't offer to buy us.

01:27:53.640 --> 01:27:56.520
And they were still, it was really a,

01:27:56.520 --> 01:27:58.840
we were like a second, they had really bought,

01:27:58.840 --> 01:28:01.880
they just bought R, the R company called,

01:28:01.880 --> 01:28:04.560
it was not R Studio, but it was another R company

01:28:04.560 --> 01:28:05.760
that was emergent.

01:28:05.760 --> 01:28:09.440
And it was kind of a, well, we should also get a Python play,

01:28:09.440 --> 01:28:11.840
but they were really doubling down on R, right?

01:28:11.840 --> 01:28:12.680
And so it was like,

01:28:12.680 --> 01:28:14.440
it was where you would go to die.

01:28:14.440 --> 01:28:17.240
So it's not, it wasn't, it was before Sacha was there.

01:28:17.240 --> 01:28:18.760
Sacha had just started.

01:28:18.760 --> 01:28:19.600
Just started.

01:28:19.600 --> 01:28:21.880
Right, and the offer was coming from someone

01:28:21.880 --> 01:28:23.160
two levels down from him.

01:28:23.160 --> 01:28:24.000
Gotcha.

01:28:24.000 --> 01:28:26.680
Right, and if it had come from Scott Guthrie,

01:28:26.680 --> 01:28:28.360
so I got a chance to meet Scott Guthrie,

01:28:28.360 --> 01:28:29.840
great guy, I like him.

01:28:29.840 --> 01:28:31.640
If it had offered to come from him,

01:28:31.640 --> 01:28:33.280
probably would be at Microsoft right now.

01:28:33.280 --> 01:28:34.640
That'd be fascinating.

01:28:34.640 --> 01:28:36.240
That would be really nice, actually,

01:28:36.240 --> 01:28:38.800
especially given what Microsoft has since done

01:28:38.800 --> 01:28:40.240
for the open source community and all those things.

01:28:40.240 --> 01:28:41.680
Yes, I think they're doing well.

01:28:41.680 --> 01:28:43.800
I really like some of the stuff they've been doing.

01:28:43.800 --> 01:28:45.680
They're still working, and they've, you know,

01:28:45.680 --> 01:28:46.520
they've hired Guido now,

01:28:46.520 --> 01:28:47.840
and they've hired a lot of Python developers.

01:28:47.840 --> 01:28:49.480
Wait, Guido's not in Microsoft?

01:28:49.480 --> 01:28:51.080
Yeah, he works at Microsoft.

01:28:51.080 --> 01:28:52.560
I need to say.

01:28:52.560 --> 01:28:54.760
Which, he retired, then he came out of retirement,

01:28:54.760 --> 01:28:55.600
and he's working at.

01:28:55.600 --> 01:28:56.440
I was just talking to him,

01:28:56.440 --> 01:28:57.920
but he didn't mention this person.

01:28:57.920 --> 01:28:59.160
Well.

01:28:59.160 --> 01:29:01.360
I should investigate this further.

01:29:01.360 --> 01:29:02.200
Well.

01:29:02.200 --> 01:29:03.020
Because I know he loved Dropbox,

01:29:03.020 --> 01:29:04.080
but I wasn't sure what he was doing,

01:29:04.520 --> 01:29:05.360
or what he was up to.

01:29:05.360 --> 01:29:06.600
Well, he was kind of saying he'd retire,

01:29:06.600 --> 01:29:09.680
but, and it's literally been five years

01:29:09.680 --> 01:29:12.760
since I last sat down and really talked to Guido, right?

01:29:13.680 --> 01:29:16.080
Guido's a technology expert, right?

01:29:16.080 --> 01:29:18.240
He's a, so I came, I was excited,

01:29:18.240 --> 01:29:20.760
because I'd finally figured out the type system for NumPy.

01:29:20.760 --> 01:29:22.320
I wanted to kind of talk about that with him,

01:29:22.320 --> 01:29:24.040
and I kind of overwhelmed him.

01:29:24.040 --> 01:29:26.680
Could you stay on that, just for a brief moment,

01:29:26.680 --> 01:29:28.280
because you're a fascinating person

01:29:28.280 --> 01:29:29.480
in the history of programming.

01:29:29.480 --> 01:29:31.320
He is a fascinating person.

01:29:31.320 --> 01:29:34.240
What have you learned from Guido

01:29:34.240 --> 01:29:37.600
about programming, about life?

01:29:37.600 --> 01:29:38.440
Yeah, yeah.

01:29:38.440 --> 01:29:39.280
A lot, actually.

01:29:39.280 --> 01:29:41.280
I've been a fan of Guido's.

01:29:41.280 --> 01:29:42.560
We have a chance to talk.

01:29:42.560 --> 01:29:44.840
Some, I wouldn't say we talk all the time.

01:29:44.840 --> 01:29:45.680
Not really at all.

01:29:45.680 --> 01:29:47.560
He may, but we've talked enough to,

01:29:47.560 --> 01:29:49.920
I respect his, in fact, when I first started NumPy,

01:29:49.920 --> 01:29:51.560
one of the first things I did was I had,

01:29:51.560 --> 01:29:53.360
I asked Guido for a meeting

01:29:53.360 --> 01:29:55.440
with him and Paul Dubois in San Mateo,

01:29:55.440 --> 01:29:56.960
and I went and met him for lunch,

01:29:56.960 --> 01:29:59.220
and basically to say maybe we can actually,

01:29:59.220 --> 01:30:00.760
part of the strategy for NumPy

01:30:00.760 --> 01:30:02.440
was to get it into Python 3,

01:30:02.440 --> 01:30:04.120
and maybe be part of Python.

01:30:04.120 --> 01:30:05.160
And so we talked about that.

01:30:05.160 --> 01:30:06.000
That's a cool conversation.

01:30:06.000 --> 01:30:06.920
And about that approach, right?

01:30:06.920 --> 01:30:09.200
I would have loved to be a fly on the wall.

01:30:09.200 --> 01:30:12.080
That was good, and over the years for Guido,

01:30:12.080 --> 01:30:14.840
I learned, so he was open.

01:30:14.840 --> 01:30:18.720
Like, he was willing to listen to people's ideas, right?

01:30:18.720 --> 01:30:20.960
And over the years, now generally,

01:30:20.960 --> 01:30:22.640
I'm not saying universally that's been true,

01:30:22.640 --> 01:30:24.360
but generally that's been true.

01:30:24.360 --> 01:30:25.680
So he's willing to listen.

01:30:25.680 --> 01:30:27.240
He's willing to defer.

01:30:27.240 --> 01:30:29.080
Like on the scientific side, he would just kind of defer.

01:30:29.120 --> 01:30:31.800
He didn't really always understand what we were doing,

01:30:31.800 --> 01:30:32.840
and he'd defer.

01:30:32.840 --> 01:30:35.660
One place where he didn't enough

01:30:35.660 --> 01:30:37.720
was we missed a matrix multiply operator.

01:30:37.720 --> 01:30:39.640
Like that finally got added to Python,

01:30:39.640 --> 01:30:42.240
but about 10 years later than it should have.

01:30:42.240 --> 01:30:44.800
But the reason was because nobody,

01:30:44.800 --> 01:30:46.240
it takes a lot of effort,

01:30:46.240 --> 01:30:48.160
and I learned this while I was writing NumPy.

01:30:48.160 --> 01:30:49.360
I also wrote tools to Python.

01:30:49.360 --> 01:30:52.360
I became a Python dev, and I added some pieces to Python,

01:30:52.360 --> 01:30:53.440
like the memory view object.

01:30:53.440 --> 01:30:55.720
I wanted the structure of NumPy into Python.

01:30:55.720 --> 01:30:57.000
So we didn't get NumPy into Python,

01:30:57.040 --> 01:30:59.840
but we got the basic structure of it into Python,

01:30:59.840 --> 01:31:01.060
so you could build on it.

01:31:01.060 --> 01:31:01.960
Nobody did for a while,

01:31:01.960 --> 01:31:04.800
but eventually he database authors started to,

01:31:04.800 --> 01:31:06.200
and it's a lot better, they did.

01:31:06.200 --> 01:31:09.040
And also Antoine Petrou and Stefan Krah

01:31:09.040 --> 01:31:10.840
actually fixed the memory view object,

01:31:10.840 --> 01:31:13.360
because I wrote the underlying infrastructure in C,

01:31:13.360 --> 01:31:15.600
but the Python exposure was terrible

01:31:15.600 --> 01:31:16.720
until they came in and fixed it,

01:31:16.720 --> 01:31:18.200
partly because I was writing NumPy,

01:31:18.200 --> 01:31:20.040
and NumPy was the Python exposure.

01:31:20.040 --> 01:31:21.320
I didn't really care about it

01:31:21.320 --> 01:31:22.860
if you didn't have NumPy installed.

01:31:22.860 --> 01:31:25.440
Anyway, Guido opened up ideas,

01:31:25.440 --> 01:31:27.320
technologically brilliant,

01:31:27.320 --> 01:31:29.520
like really, I really got a lot of respect for him

01:31:29.520 --> 01:31:33.400
when I saw what he did with this type class merger thing.

01:31:33.400 --> 01:31:35.280
It was actually tricky, right?

01:31:35.280 --> 01:31:38.480
And then willing to share, willing to share his ideas.

01:31:38.480 --> 01:31:40.280
So the other thing early on in 1998,

01:31:40.280 --> 01:31:42.320
I said I wrote my first extension module.

01:31:42.320 --> 01:31:44.880
The reason I could is because he'd written this blog post

01:31:44.880 --> 01:31:47.440
on how to do reference counting, right?

01:31:47.440 --> 01:31:50.120
And without it, I would have been lost, right?

01:31:50.120 --> 01:31:53.320
But he was willing to at least try to write this post.

01:31:53.320 --> 01:31:56.160
And so he's been motivated early on with Python.

01:31:56.160 --> 01:31:58.240
There's a computer science for everybody.

01:31:58.240 --> 01:31:59.960
You can have this early on desire to,

01:31:59.960 --> 01:32:02.120
oh, maybe we should be pushing programming to more people.

01:32:02.120 --> 01:32:06.560
So he had this populist notion, I guess, or populist sense,

01:32:06.560 --> 01:32:08.760
to learn that there's a certain skill,

01:32:08.760 --> 01:32:10.640
and I've seen it in other people too,

01:32:10.640 --> 01:32:14.040
of engaging with contributors sufficiently to,

01:32:14.040 --> 01:32:15.720
because when somebody engages with you

01:32:15.720 --> 01:32:16.560
and wants to contribute to you,

01:32:16.560 --> 01:32:18.480
if you ignore them, they go away.

01:32:18.480 --> 01:32:19.840
So building that early contributor base

01:32:19.880 --> 01:32:23.360
requires real engagement with other people.

01:32:23.360 --> 01:32:24.560
And he would do that.

01:32:24.560 --> 01:32:29.160
Can you also comment on this tragic stepping down

01:32:29.160 --> 01:32:32.960
from his position as the benevolent dictator for life

01:32:32.960 --> 01:32:35.720
over the wars, you know.

01:32:35.720 --> 01:32:36.640
The walrus operator?

01:32:36.640 --> 01:32:39.280
The walrus operator was the last battle.

01:32:39.280 --> 01:32:40.960
I don't know if that's the cause of it,

01:32:40.960 --> 01:32:43.720
but there's this, for people who don't know,

01:32:43.720 --> 01:32:45.720
you can look up, there's the walrus operator,

01:32:45.720 --> 01:32:49.640
which looks like a colon and equal sign.

01:32:50.480 --> 01:32:54.720
And it actually does maybe the thing

01:32:54.720 --> 01:32:57.600
that an equal sign should be doing.

01:32:57.600 --> 01:33:00.280
Yeah, maybe, right, exactly.

01:33:00.280 --> 01:33:02.080
But it's just, historically,

01:33:02.080 --> 01:33:03.600
equal sign means something else.

01:33:03.600 --> 01:33:05.280
It just means assignment.

01:33:05.280 --> 01:33:07.320
So he stepped down over this.

01:33:07.320 --> 01:33:10.240
What do you think about the pressure of leadership?

01:33:10.240 --> 01:33:11.360
It's something that you mentioned,

01:33:11.360 --> 01:33:13.680
the letter I wrote in umpire at the time.

01:33:13.680 --> 01:33:15.280
That was a hard time, actually.

01:33:15.280 --> 01:33:17.120
I mean, you know, there's been really hard times.

01:33:17.120 --> 01:33:20.880
It was hard, you know, you get criticized, right?

01:33:20.880 --> 01:33:22.840
And you get pushed and you get,

01:33:22.840 --> 01:33:23.840
not everybody loves what you do.

01:33:23.840 --> 01:33:26.920
Like anytime you do anything that has impact at all,

01:33:26.920 --> 01:33:28.600
you're not universally loved, right?

01:33:28.600 --> 01:33:29.800
You get some real critics.

01:33:29.800 --> 01:33:32.000
And that's an important energy

01:33:32.000 --> 01:33:35.120
because it's impossible if you did everything right.

01:33:35.120 --> 01:33:37.200
You need people to be pushing.

01:33:37.200 --> 01:33:39.320
But sometimes people can get mean, right?

01:33:39.320 --> 01:33:43.120
People can, I prefer to give people the benefit of the doubt.

01:33:43.120 --> 01:33:45.840
I don't immediately assume they have bad intentions.

01:33:45.840 --> 01:33:47.480
And maybe for other, you know, maybe other,

01:33:47.480 --> 01:33:48.720
maybe that doesn't happen for everybody.

01:33:48.720 --> 01:33:50.240
They, for whatever reason, their past,

01:33:50.240 --> 01:33:53.040
their experience with people, they sometimes have bad,

01:33:53.040 --> 01:33:54.880
so they immediately attribute to you bad intentions.

01:33:54.880 --> 01:33:56.080
So you're like, where did this come from?

01:33:56.080 --> 01:33:57.800
I mean, I'm definitely open to criticism,

01:33:57.800 --> 01:34:00.560
but I think you're misinterpreting the whole point.

01:34:00.560 --> 01:34:01.920
Cause I would get that, you know,

01:34:01.920 --> 01:34:04.560
certainly when I started Anaconda, you know,

01:34:04.560 --> 01:34:07.120
I've been, sometimes I say to people,

01:34:07.120 --> 01:34:09.800
I know I'm, I care enough about entrepreneurship

01:34:09.800 --> 01:34:12.240
to make some open source people uncomfortable.

01:34:12.240 --> 01:34:13.520
And I care enough about open source

01:34:13.520 --> 01:34:15.600
to make investors uncomfortable.

01:34:16.360 --> 01:34:17.640
So I sort of, you know, create,

01:34:17.640 --> 01:34:19.920
you create kind of doubters on both sides.

01:34:19.920 --> 01:34:23.920
So you have, and this is just a plea

01:34:23.920 --> 01:34:26.080
to the listener and the public.

01:34:26.080 --> 01:34:29.960
I've noticed this too, that there's a tendency,

01:34:29.960 --> 01:34:31.840
and social media makes this worse.

01:34:32.720 --> 01:34:34.680
When you don't have perfect information

01:34:34.680 --> 01:34:36.920
about the situation, you tend to fill the gaps

01:34:36.920 --> 01:34:41.920
with the worst possible, or at least a bad story

01:34:42.000 --> 01:34:43.120
that fills those gaps.

01:34:43.120 --> 01:34:47.000
And I think it's good to live life,

01:34:47.000 --> 01:34:49.800
maybe not fully naively, but filling in the gaps

01:34:49.800 --> 01:34:54.720
with the good, with the best, with the positive,

01:34:54.720 --> 01:34:57.320
with the hopeful explanation of why you see this.

01:34:57.320 --> 01:34:59.520
So if you see somebody like you,

01:34:59.520 --> 01:35:01.960
trying to make money on a book about NumPy,

01:35:01.960 --> 01:35:04.880
there's a million stories around that that are positive.

01:35:04.880 --> 01:35:07.880
And those are good to think about,

01:35:07.880 --> 01:35:10.640
to project positive intent on other people.

01:35:10.640 --> 01:35:12.520
Because for many reasons,

01:35:12.520 --> 01:35:14.000
it's usually because people are good

01:35:14.000 --> 01:35:15.640
and they do have good intent.

01:35:15.640 --> 01:35:17.520
And also when you project that positive intent,

01:35:17.520 --> 01:35:19.440
people will step up to that too.

01:35:19.440 --> 01:35:21.800
Yes, it's a great point.

01:35:21.800 --> 01:35:24.200
It has this kind of viral nature to it.

01:35:24.200 --> 01:35:28.440
And of course, what Twitter early on figured out on Facebook

01:35:28.440 --> 01:35:30.400
is that they can make a lot of money

01:35:30.400 --> 01:35:32.320
in engagement from the negative.

01:35:32.320 --> 01:35:33.160
Yes.

01:35:33.160 --> 01:35:35.480
So like there's this, we're fighting this mechanism.

01:35:35.480 --> 01:35:36.320
I agree.

01:35:36.320 --> 01:35:37.140
Which is challenging.

01:35:37.140 --> 01:35:37.980
It's like easier.

01:35:37.980 --> 01:35:38.800
It's just easier to be.

01:35:38.800 --> 01:35:39.640
To be negative.

01:35:39.640 --> 01:35:41.960
And then for some reason, something in our minds

01:35:42.000 --> 01:35:43.400
really enjoys sharing that

01:35:43.400 --> 01:35:46.320
and getting all excited about the negativity.

01:35:46.320 --> 01:35:47.160
We do, yeah.

01:35:47.160 --> 01:35:49.000
Some protective mechanism perhaps

01:35:49.000 --> 01:35:50.920
that we're worried we're gonna eat and if we don't.

01:35:50.920 --> 01:35:51.760
Exactly.

01:35:51.760 --> 01:35:53.240
For us to be effective as a group of people

01:35:53.240 --> 01:35:54.640
in a software engineering project,

01:35:54.640 --> 01:35:56.920
you have to project positive intent, I think.

01:35:56.920 --> 01:35:57.840
I totally agree.

01:35:57.840 --> 01:35:58.680
Totally agree.

01:35:58.680 --> 01:35:59.520
And I think that's very,

01:35:59.520 --> 01:36:01.680
and so that happens in this space.

01:36:01.680 --> 01:36:03.880
But Python has done a reasonable job in the past,

01:36:03.880 --> 01:36:05.480
but here is a situation where I think

01:36:05.480 --> 01:36:07.880
it started to get this pressure where it didn't.

01:36:07.880 --> 01:36:10.480
I really didn't know enough about what happened.

01:36:10.480 --> 01:36:12.200
I've talked to several people about it

01:36:12.200 --> 01:36:15.920
and I know most of the steering committee members today,

01:36:15.920 --> 01:36:17.960
one person nominated me for that role,

01:36:17.960 --> 01:36:20.960
but it's the wrong role for me right now, right?

01:36:20.960 --> 01:36:24.120
I have a lot of respect for the Python developer space

01:36:24.120 --> 01:36:25.520
and the Python developers.

01:36:25.520 --> 01:36:26.600
I also understand the gap

01:36:26.600 --> 01:36:28.880
between computer science Python developers

01:36:28.880 --> 01:36:31.520
and array programming developers or science developers.

01:36:31.520 --> 01:36:34.640
And in fact, Python succeeds in the array space

01:36:34.640 --> 01:36:36.600
the more it has people in that boundary.

01:36:36.600 --> 01:36:38.040
And there's often very few.

01:36:38.040 --> 01:36:39.520
Like I was playing a role in that boundary

01:36:40.360 --> 01:36:42.640
and working like everything to try to keep up

01:36:42.640 --> 01:36:45.520
with even what Gita was saying.

01:36:45.520 --> 01:36:49.080
Like I'm a C programmer, but not a computer scientist.

01:36:49.080 --> 01:36:52.600
Like I was an engineer and physicist and mathematician

01:36:52.600 --> 01:36:56.360
and I didn't always understand what they were talking about

01:36:56.360 --> 01:36:58.360
and why they would have opinions the way they did.

01:36:58.360 --> 01:37:00.280
So you have to listen and try to understand.

01:37:00.280 --> 01:37:02.120
Then you also have to explain your point of view

01:37:02.120 --> 01:37:03.520
in a way they can understand.

01:37:03.520 --> 01:37:04.840
And that takes a lot of work.

01:37:04.840 --> 01:37:07.920
And that communication is always the challenge.

01:37:07.920 --> 01:37:09.200
And it's just what we're describing here

01:37:09.200 --> 01:37:11.520
about the negativity is just another form of that.

01:37:11.520 --> 01:37:12.560
Like how do we come together?

01:37:12.560 --> 01:37:14.520
And it does appear we were wired anyway

01:37:14.520 --> 01:37:16.560
to at least have a, there's a part of us

01:37:16.560 --> 01:37:21.000
that will enemy, friend, enemy, and we see, yeah.

01:37:21.000 --> 01:37:23.520
It's like, why are we wiring on the enemy front?

01:37:23.520 --> 01:37:24.760
So why are we pushing that?

01:37:24.760 --> 01:37:26.680
Why are we promoting that so deeply?

01:37:26.680 --> 01:37:28.440
Assume friend until proven otherwise.

01:37:28.440 --> 01:37:30.000
Yes, yes.

01:37:30.000 --> 01:37:32.160
So, cause you have such a fascinating mind in all of this.

01:37:32.160 --> 01:37:34.120
Let me just ask you these questions.

01:37:34.120 --> 01:37:38.000
So one interesting side on the Python history

01:37:38.000 --> 01:37:41.000
is the move from Python two to Python three.

01:37:41.000 --> 01:37:43.720
You mentioned move from Python one to Python two,

01:37:43.720 --> 01:37:46.800
but the move from Python two to Python three

01:37:46.800 --> 01:37:47.920
is a little bit interesting

01:37:47.920 --> 01:37:50.040
because it took a very long time.

01:37:50.040 --> 01:37:55.040
It broke in quite a small way backward compatibility,

01:37:55.080 --> 01:37:57.720
but even that small way seemed to have been very painful

01:37:57.720 --> 01:37:58.680
for people.

01:37:58.680 --> 01:38:00.600
Is there lessons you draw?

01:38:00.600 --> 01:38:01.440
Tons of lessons.

01:38:01.440 --> 01:38:05.520
From how long it took and how painful it seemed to be?

01:38:05.520 --> 01:38:07.000
Yeah, tons of lessons.

01:38:07.000 --> 01:38:08.240
Well, I mentioned here earlier

01:38:08.240 --> 01:38:11.840
that NumPy was written in 2005.

01:38:11.840 --> 01:38:15.560
It was in 2005 that I actually went to Guido

01:38:15.560 --> 01:38:17.240
to talk about getting NumPy into Python three.

01:38:17.240 --> 01:38:18.880
Like my strategy was to,

01:38:18.880 --> 01:38:19.960
oh, we were moving to Python three.

01:38:19.960 --> 01:38:20.920
Let's have that be.

01:38:20.920 --> 01:38:22.200
And it seems funny in retrospect

01:38:22.200 --> 01:38:23.360
because like, wait, Python three,

01:38:23.360 --> 01:38:25.480
that was in 2020, right?

01:38:25.480 --> 01:38:27.760
When we finally ended support for Python two,

01:38:27.760 --> 01:38:29.000
or at least 2017.

01:38:29.000 --> 01:38:30.880
The reason it took a long time,

01:38:30.880 --> 01:38:32.720
a lot of time, I think it was because,

01:38:32.720 --> 01:38:34.840
well, one of the things is there wasn't much to like

01:38:34.840 --> 01:38:36.240
about Python three.

01:38:36.240 --> 01:38:40.320
3.0, 3.1, it really wasn't until 3.3.

01:38:40.320 --> 01:38:43.640
Like I consider Python 3.3 to be Python 3.0.

01:38:43.640 --> 01:38:44.920
But it wasn't until Python 3.3

01:38:44.920 --> 01:38:47.240
that I felt there's enough stuff in it

01:38:47.240 --> 01:38:49.840
to make it worth anybody using it, right?

01:38:49.840 --> 01:38:52.640
And then 3.4 started to be, oh yeah, I want that.

01:38:52.640 --> 01:38:54.920
And then 3.5 as the matrix will play operator.

01:38:54.920 --> 01:38:56.560
And now it's like, okay, we gotta use that.

01:38:56.560 --> 01:38:58.440
Plus the libraries that started leveraging

01:38:58.440 --> 01:38:59.640
some of the features of Python three.

01:38:59.640 --> 01:39:00.800
Exactly.

01:39:00.800 --> 01:39:03.840
So it really, the challenge was it was,

01:39:03.840 --> 01:39:06.760
but it also illustrated a truism that,

01:39:06.760 --> 01:39:08.240
you know, when you have inertia,

01:39:08.240 --> 01:39:10.520
when you have a group of people using something,

01:39:10.520 --> 01:39:11.920
it's really hard to move them away from it.

01:39:11.920 --> 01:39:13.920
You can't just change the world on them.

01:39:13.920 --> 01:39:15.480
And Python three, you know, made some,

01:39:15.480 --> 01:39:17.240
I think it fixed some things Guido had always hated.

01:39:17.240 --> 01:39:19.480
I think he didn't like the fact that print was a statement.

01:39:19.480 --> 01:39:20.800
He wanted to make it a function.

01:39:20.800 --> 01:39:23.240
But in some sense, that's a bit of gratuitous change

01:39:23.240 --> 01:39:24.160
to the language.

01:39:24.160 --> 01:39:27.360
And you could argue, and people have,

01:39:27.360 --> 01:39:31.560
but one of the challenges was there wasn't enough features

01:39:31.560 --> 01:39:35.000
and too many just changes without features.

01:39:35.000 --> 01:39:37.480
And so that empathy for the end user

01:39:37.480 --> 01:39:40.520
as to why they would switch wasn't there.

01:39:40.520 --> 01:39:43.000
I think also it illustrated just the funding realities.

01:39:43.000 --> 01:39:45.120
Like Python wasn't funded.

01:39:45.120 --> 01:39:46.200
Like it was also a project

01:39:46.200 --> 01:39:48.360
with a bunch of volunteer labor, right?

01:39:48.360 --> 01:39:50.280
It had more people, so more volunteer labor,

01:39:50.280 --> 01:39:52.320
but it was still, it was funded in the sense

01:39:52.320 --> 01:39:53.520
that at least Guido had a job.

01:39:53.520 --> 01:39:55.360
And I've learned some of the behind the scenes

01:39:55.360 --> 01:39:57.120
on that now since, since talking to people

01:39:57.120 --> 01:39:59.640
who lived through it and maybe not on air,

01:39:59.680 --> 01:40:01.560
we can talk about some of that.

01:40:01.560 --> 01:40:04.040
But it's interesting to see, but Guido had a job,

01:40:04.040 --> 01:40:07.080
but his full-time job wasn't just work on Python.

01:40:07.080 --> 01:40:08.920
Like he had other things to do.

01:40:08.920 --> 01:40:09.920
It's wild.

01:40:09.920 --> 01:40:10.920
It is wild, isn't it?

01:40:10.920 --> 01:40:13.360
It's wild how few people are funded.

01:40:13.360 --> 01:40:14.200
Yes.

01:40:14.200 --> 01:40:15.240
And how much impact they have.

01:40:15.240 --> 01:40:16.200
Yes.

01:40:16.200 --> 01:40:17.480
Maybe that's a feature in our bug.

01:40:17.480 --> 01:40:18.320
I don't know.

01:40:18.320 --> 01:40:19.160
Maybe, yes, exactly.

01:40:19.160 --> 01:40:21.840
At least early on, like it's sort of, I know, yeah.

01:40:21.840 --> 01:40:25.200
It's like Olympic athletes are often severely underfunded,

01:40:25.200 --> 01:40:27.920
but maybe that's what brings out the greatness.

01:40:27.920 --> 01:40:28.760
Yes, correct.

01:40:28.760 --> 01:40:29.720
Exactly.

01:40:29.720 --> 01:40:31.920
Maybe this is essential part of it.

01:40:31.920 --> 01:40:33.720
Cause I do think about that in terms of,

01:40:33.720 --> 01:40:36.280
I currently have an incubator for open source startups.

01:40:36.280 --> 01:40:37.680
Like what I'm trying to do right now

01:40:37.680 --> 01:40:40.520
is create the environment I wished had existed

01:40:40.520 --> 01:40:42.920
when I was leaving academia with NumPy

01:40:42.920 --> 01:40:44.160
and trying to figure out what to do.

01:40:44.160 --> 01:40:46.160
I'm trying to create those opportunities and environments.

01:40:46.160 --> 01:40:49.440
So, and that's, that's what drives me still is

01:40:49.440 --> 01:40:50.800
how do I make the world easier

01:40:50.800 --> 01:40:52.640
for the open source entrepreneur?

01:40:52.640 --> 01:40:54.880
So let me stay at, I mean,

01:40:54.880 --> 01:40:56.880
I could probably stay at NumPy for a long time,

01:40:56.880 --> 01:41:00.960
but this is fun question.

01:41:00.960 --> 01:41:04.680
So Andre Capati leads the Tesla Autopilot team

01:41:04.680 --> 01:41:09.440
and he's also one of the most like legit programmers.

01:41:09.440 --> 01:41:10.760
I know.

01:41:10.760 --> 01:41:13.760
It's like he builds stuff from scratch a lot.

01:41:13.760 --> 01:41:16.200
And that's how he builds intuition about how a problem works.

01:41:16.200 --> 01:41:18.320
He just built it from scratch and I always love that.

01:41:18.320 --> 01:41:21.320
And the primary language he uses is Python

01:41:21.320 --> 01:41:23.080
for the intuition building.

01:41:23.080 --> 01:41:27.200
But he posted something on Twitter

01:41:27.200 --> 01:41:31.280
saying that they got a significant improvement

01:41:31.280 --> 01:41:35.640
on some aspect of their like data loading, I think,

01:41:35.640 --> 01:41:39.840
by switching away from NP dot square root.

01:41:39.840 --> 01:41:42.160
So the NumPy's implementation of square root

01:41:42.160 --> 01:41:43.320
to math dot square root.

01:41:43.320 --> 01:41:45.440
And then somebody else commented that you can,

01:41:45.440 --> 01:41:48.120
you can get even a much greater improvement

01:41:48.120 --> 01:41:51.720
by using the vanilla Python square root,

01:41:51.720 --> 01:41:52.640
which is like.

01:41:52.640 --> 01:41:53.680
Power 0.5.

01:41:53.680 --> 01:41:55.240
Power 0.5.

01:41:55.240 --> 01:41:57.960
And it's fascinating to me, I just wanted to.

01:41:57.960 --> 01:41:58.800
Ha ha.

01:41:58.800 --> 01:42:02.120
So that was some shade throwing at some.

01:42:02.120 --> 01:42:04.680
No, no, yes, we're talking about.

01:42:04.680 --> 01:42:08.120
It's a good way to ask the trade off

01:42:08.120 --> 01:42:12.160
between usability and efficiency broadly in NumPy,

01:42:12.160 --> 01:42:14.960
but also on these specific weird quirks

01:42:14.960 --> 01:42:16.760
of like a single function.

01:42:16.760 --> 01:42:21.400
Yep, so on that point, if you use a NumPy math function

01:42:21.400 --> 01:42:25.040
on a scalar, it's gonna be slower

01:42:25.040 --> 01:42:28.000
than using a Python function on that scalar.

01:42:28.000 --> 01:42:33.000
But because the math object in NumPy is more complicated,

01:42:33.840 --> 01:42:36.800
because you can also call that math object on a array.

01:42:36.800 --> 01:42:39.240
And so effectively it goes through a similar machine.

01:42:39.240 --> 01:42:41.880
There aren't enough of the, which you would do

01:42:41.880 --> 01:42:46.000
and you could do like checks and fast paths.

01:42:46.000 --> 01:42:48.840
So yeah, if you're basically doing a list,

01:42:48.840 --> 01:42:50.720
if you run over a list, in fact,

01:42:50.720 --> 01:42:53.720
for problems that are less than 1,000,

01:42:53.720 --> 01:42:55.400
even maybe 10,000 is probably the,

01:42:55.400 --> 01:42:56.960
if you're going more than 10,000,

01:42:56.960 --> 01:42:59.120
that's where you definitely need to be using arrays.

01:42:59.120 --> 01:43:01.240
But if you're less than that, and for reading,

01:43:01.240 --> 01:43:02.800
if you're doing a reading process

01:43:02.800 --> 01:43:05.640
and essentially it's not compute bound, it's IO bound.

01:43:05.640 --> 01:43:08.520
And so you're really taking lists of 1,000 at a time

01:43:08.520 --> 01:43:09.600
and doing work on it.

01:43:09.600 --> 01:43:11.720
Yeah, you could be faster just using Python,

01:43:11.720 --> 01:43:12.800
straight up Python.

01:43:12.800 --> 01:43:14.720
See, but also.

01:43:14.720 --> 01:43:15.560
And then.

01:43:15.560 --> 01:43:16.400
This is the, sorry to interrupt,

01:43:16.400 --> 01:43:18.720
but there's the fundamental questions

01:43:18.720 --> 01:43:21.240
when you look at the long arc of history,

01:43:21.240 --> 01:43:25.600
it's very possible that NP.square root is much faster.

01:43:25.600 --> 01:43:26.440
It could be.

01:43:26.440 --> 01:43:29.480
So like in terms of like, don't worry about it.

01:43:29.480 --> 01:43:32.440
It's the evils of over optimization or whatever,

01:43:32.440 --> 01:43:34.080
all the different quotes around that.

01:43:34.080 --> 01:43:39.080
It's sometimes obsessing about this particular little quark

01:43:39.560 --> 01:43:41.720
is not sufficient.

01:43:41.720 --> 01:43:45.240
For somebody like, if you're trying to optimize your path,

01:43:45.240 --> 01:43:47.680
I mean, I agree, premature optimization

01:43:47.680 --> 01:43:49.320
creates all kinds of challenges, right?

01:43:49.320 --> 01:43:51.840
Because now, but you may have to do it.

01:43:51.840 --> 01:43:53.920
I believe the quote is, it's the root of all evil.

01:43:53.920 --> 01:43:55.560
It's the root of all evil, right?

01:43:55.560 --> 01:43:57.040
Let's give Donald Knuth, I think,

01:43:57.040 --> 01:43:58.480
or let's give him somebody else.

01:43:58.480 --> 01:44:00.800
He's, well, Donald Knuth is kind of like Mark Twain,

01:44:00.800 --> 01:44:02.840
people just attribute stuff to him, I don't know.

01:44:02.840 --> 01:44:04.640
And it's fine, because he's brilliant.

01:44:04.640 --> 01:44:07.640
So, no, I was a LaTeX user myself,

01:44:07.640 --> 01:44:09.280
and so I have a lot of respect,

01:44:09.280 --> 01:44:10.800
and he did more than that, of course,

01:44:10.800 --> 01:44:14.120
but yeah, someone I really appreciate

01:44:14.120 --> 01:44:15.640
in the computer science space.

01:44:15.640 --> 01:44:17.080
Yeah, I don't, I think that's appropriate.

01:44:17.080 --> 01:44:18.320
There's a lot of little things like that,

01:44:18.320 --> 01:44:20.120
where people, actually, if you understood it,

01:44:20.120 --> 01:44:22.000
you go, yeah, of course, that's the case.

01:44:22.000 --> 01:44:25.040
Like, the other part, the other part I didn't mention,

01:44:25.040 --> 01:44:27.960
and Numba was a thing we wrote early on,

01:44:27.960 --> 01:44:29.040
and I was really excited by Numba,

01:44:29.040 --> 01:44:30.040
because it's something we wanted,

01:44:30.040 --> 01:44:32.160
it was a compiler for Python syntax,

01:44:32.160 --> 01:44:35.440
and I wanted it from the beginning of writing NumPy,

01:44:35.440 --> 01:44:38.280
because of this function question.

01:44:38.280 --> 01:44:41.920
Like, taking, the power of arrays

01:44:41.920 --> 01:44:45.160
is really that you can write functions using all of it.

01:44:45.160 --> 01:44:47.000
It has implicit looping, right?

01:44:47.920 --> 01:44:49.200
So, you don't worry about this n-dimensional for loop

01:44:49.200 --> 01:44:51.240
with for loops, for for statements.

01:44:51.240 --> 01:44:53.560
You just say, oh, big four-dimensional array,

01:44:53.560 --> 01:44:54.800
I'm gonna do this operation,

01:44:54.800 --> 01:44:57.040
this plus, this minus, this reduction,

01:44:57.040 --> 01:44:59.560
and you get this, it's called vectorization in other areas,

01:44:59.560 --> 01:45:01.400
but you can basically think at a high level

01:45:01.400 --> 01:45:03.600
and get massive amounts of computation done,

01:45:03.600 --> 01:45:08.000
with the added benefit of, oh, it can be parallelized easily.

01:45:08.000 --> 01:45:09.000
It can be put in parallel,

01:45:09.000 --> 01:45:09.960
you don't have to think about that.

01:45:09.960 --> 01:45:12.720
In fact, it's worse to go decompose your,

01:45:12.720 --> 01:45:14.120
you write the for loops,

01:45:14.120 --> 01:45:16.280
and then try to infer parallelism from for loops.

01:45:16.280 --> 01:45:17.600
It's actually a harder problem

01:45:17.600 --> 01:45:19.600
than to take the array problem

01:45:19.600 --> 01:45:22.000
and just automatically parallelize that problem.

01:45:22.000 --> 01:45:25.280
That's what, and so functions in NumPy

01:45:25.280 --> 01:45:27.040
are called universal functions, ufuncs.

01:45:27.040 --> 01:45:28.960
So, square root is an example of a ufunc.

01:45:28.960 --> 01:45:32.360
There are others, sine, cosine, add, subtract.

01:45:32.360 --> 01:45:34.480
In fact, one of those first libraries to SciPy

01:45:34.480 --> 01:45:35.480
was something called special,

01:45:35.480 --> 01:45:36.880
where I added Bessel functions,

01:45:36.880 --> 01:45:40.200
and all these special functions that come up in physics,

01:45:40.200 --> 01:45:42.960
and I added them as ufuncs so they could work on arrays.

01:45:42.960 --> 01:45:44.680
So, I understood ufuncs very, very well

01:45:44.680 --> 01:45:45.920
from day one inside of Numeric.

01:45:45.920 --> 01:45:47.760
That was one of the things we tried to make better in NumPy

01:45:47.760 --> 01:45:49.120
was how do they work?

01:45:49.120 --> 01:45:50.360
Can they do broadcasting?

01:45:50.360 --> 01:45:51.960
What does broadcasting mean?

01:45:51.960 --> 01:45:54.600
But one of the problems is, okay,

01:45:54.600 --> 01:45:56.520
what do I do with a Python scalar?

01:45:57.320 --> 01:45:58.320
So, what happens?

01:45:58.320 --> 01:46:01.320
The Python scalar gets broadcast to a zero-dimensional array,

01:46:01.320 --> 01:46:02.800
and then it goes through the whole same machinery

01:46:02.800 --> 01:46:05.080
as if it were a 10,000-dimensional array,

01:46:05.080 --> 01:46:07.640
and then it kind of unpacks the element

01:46:07.640 --> 01:46:08.960
and then does the addition.

01:46:09.880 --> 01:46:12.600
That's not to mention the function it calls,

01:46:12.600 --> 01:46:13.640
in the case of square root,

01:46:13.640 --> 01:46:15.960
is just the clib square root, right?

01:46:15.960 --> 01:46:18.200
In some cases, like Python's power,

01:46:18.200 --> 01:46:20.360
there's some optimizations they're doing

01:46:20.360 --> 01:46:23.800
that can be faster than just calling the clib square root.

01:46:23.800 --> 01:46:25.320
In the interpreter or in the...

01:46:25.320 --> 01:46:27.680
No, in the C code, in the Python runtime.

01:46:27.680 --> 01:46:30.960
In the Python runtime, so they really optimize it,

01:46:30.960 --> 01:46:32.160
and they have the freedom to do that

01:46:32.160 --> 01:46:33.000
because they don't have to worry about...

01:46:33.000 --> 01:46:34.120
Because it's just a scalar.

01:46:34.120 --> 01:46:34.960
It's just a scalar.

01:46:34.960 --> 01:46:36.360
Right, they don't have to worry about the fact that,

01:46:36.360 --> 01:46:39.400
oh, this could be an object with many pieces.

01:46:39.400 --> 01:46:41.080
The ufunc machine is also generic

01:46:41.080 --> 01:46:44.640
in the sense that typecasting and broadcasting,

01:46:44.640 --> 01:46:46.160
broadcasting's the idea of I'm gonna go,

01:46:46.160 --> 01:46:48.000
I have a zero-dimensional array, I have a scalar

01:46:48.000 --> 01:46:50.520
with a four-dimensional array, and I add them.

01:46:50.520 --> 01:46:54.680
Oh, I have to kind of coerce the shape of this guy

01:46:54.680 --> 01:46:56.880
to make it work against the whole four-dimensional array.

01:46:56.880 --> 01:46:59.680
So it's the idea of I can do a one-dimensional array

01:46:59.680 --> 01:47:02.240
against a two-dimensional array and have it make sense.

01:47:02.240 --> 01:47:04.080
Well, that's what NumPy does is it challenges you

01:47:04.080 --> 01:47:07.080
to reformulate, rethink your problem

01:47:07.080 --> 01:47:09.080
as a multi-dimensional array problem

01:47:09.080 --> 01:47:12.680
versus move away from scalars completely.

01:47:12.680 --> 01:47:14.280
Right, exactly, exactly.

01:47:14.280 --> 01:47:16.720
In fact, that's where some of the edge cases boundaries are

01:47:16.720 --> 01:47:19.000
is that, well, they're still there,

01:47:19.000 --> 01:47:21.120
and this is where array scalars are particular.

01:47:21.120 --> 01:47:23.160
So array scalars are particularly bad

01:47:23.160 --> 01:47:24.400
in the sense that they were written

01:47:24.400 --> 01:47:26.860
so that you could optimize the math on them,

01:47:26.860 --> 01:47:29.040
but that hasn't happened, right?

01:47:29.040 --> 01:47:32.840
And so their default is to coerce the array scalar

01:47:32.840 --> 01:47:33.800
to a zero-dimensional array

01:47:33.800 --> 01:47:36.040
and then use the NumPy machinery.

01:47:36.040 --> 01:47:38.240
That's what, and you could specialize,

01:47:38.240 --> 01:47:40.000
but it doesn't happen all the time.

01:47:40.000 --> 01:47:41.800
So in fact, when we first wrote Numba,

01:47:41.800 --> 01:47:44.800
we'd do comparisons and say, look, it's 1,000x speedup.

01:47:45.760 --> 01:47:47.200
We're lying a little bit in the sense that,

01:47:47.200 --> 01:47:50.280
well, first do the 40x slowdown

01:47:50.280 --> 01:47:52.320
of using array scalars inside of a loop.

01:47:52.320 --> 01:47:53.600
Because if you just use Python scalars,

01:47:53.600 --> 01:47:56.240
you'd already be 10 times faster.

01:47:56.240 --> 01:47:58.120
But then we would get 100 times faster

01:47:58.120 --> 01:48:00.360
over that using just compilation.

01:48:00.360 --> 01:48:01.640
But what we do is compile the loop

01:48:01.640 --> 01:48:04.040
from out of the interpreter to machine code.

01:48:04.040 --> 01:48:06.320
And then that's always been the power of Python

01:48:06.320 --> 01:48:08.280
is this extensibility so that you can,

01:48:08.280 --> 01:48:09.720
because people say, oh, Python's so slow.

01:48:09.720 --> 01:48:11.560
Well, sure, if you do all your logic

01:48:11.560 --> 01:48:13.940
in the runtime of the Python interpreter, yeah.

01:48:13.940 --> 01:48:15.840
But the power is that you don't have to.

01:48:15.840 --> 01:48:18.520
You write all the logic, what you do at the high level

01:48:18.520 --> 01:48:19.880
is just high-level logic.

01:48:19.880 --> 01:48:21.960
And the actual calls you're making

01:48:21.960 --> 01:48:24.440
could be on gigabyte arrays of data,

01:48:24.440 --> 01:48:26.920
and that's all done at compiled speeds.

01:48:26.920 --> 01:48:30.360
And the fact that integration is, one, can happen,

01:48:30.360 --> 01:48:32.440
but two, is separable.

01:48:32.440 --> 01:48:35.280
That's one of the, the language like Julia says,

01:48:35.280 --> 01:48:36.420
we're gonna be all in one.

01:48:36.420 --> 01:48:37.440
You can do all of it together.

01:48:37.440 --> 01:48:39.920
And then there's, the jury's out, is that possible?

01:48:39.920 --> 01:48:41.800
I tend to think that you're gonna,

01:48:41.800 --> 01:48:43.320
there's separate concerns there.

01:48:43.320 --> 01:48:44.960
You wanna pre-compile, in fact,

01:48:44.960 --> 01:48:47.600
generally you will wanna pre-compile your,

01:48:47.600 --> 01:48:48.440
some of your loops.

01:48:48.440 --> 01:48:50.200
Like, SciPy is a compilation step.

01:48:50.200 --> 01:48:53.280
To install SciPy, it takes about two hours.

01:48:53.280 --> 01:48:54.520
If you have many machines, maybe you can get it

01:48:54.520 --> 01:48:56.680
down to one hour, but to compile those libraries

01:48:56.680 --> 01:48:57.960
takes about, takes a while.

01:48:57.960 --> 01:48:59.940
You don't wanna do that at runtime.

01:48:59.940 --> 01:49:00.840
You don't wanna do that all the time.

01:49:00.840 --> 01:49:02.760
You wanna have this pre-compiled binary available

01:49:02.760 --> 01:49:04.440
that you're then just linking into.

01:49:04.440 --> 01:49:07.400
So there's real questions about the whole, you know,

01:49:07.400 --> 01:49:10.840
source code, code is, running binary code

01:49:10.840 --> 01:49:11.880
is more than source code.

01:49:11.880 --> 01:49:13.880
It's creating object code, it's the linker,

01:49:13.880 --> 01:49:15.640
it's the loader, it's the, how does that interpret it

01:49:15.640 --> 01:49:17.680
inside of the virtual memory space?

01:49:17.680 --> 01:49:19.200
There's a lot of details there that actually,

01:49:19.200 --> 01:49:21.560
I didn't understand for a long time until I, you know,

01:49:21.560 --> 01:49:24.680
read books on the topic, and it led to,

01:49:24.680 --> 01:49:27.100
the more you know, the better off you are,

01:49:27.100 --> 01:49:28.480
and you can do more details,

01:49:28.480 --> 01:49:31.320
but sometimes it helps you with abstractions too.

01:49:31.320 --> 01:49:34.480
Well, the problem, as we mentioned earlier with abstractions

01:49:34.480 --> 01:49:36.800
is you kind of sometimes assume

01:49:37.740 --> 01:49:41.560
that whoever implemented this thing

01:49:41.560 --> 01:49:45.040
had your case in mind and found the optimal solution.

01:49:45.040 --> 01:49:45.880
Yes.

01:49:45.880 --> 01:49:47.360
Or like you assume certain things.

01:49:47.360 --> 01:49:48.200
I mean, there's a lot of,

01:49:48.200 --> 01:49:49.040
Correct.

01:49:49.040 --> 01:49:52.820
One of the really powerful things to me early on,

01:49:52.820 --> 01:49:55.500
I mean, it sounds silly to say, but with Python,

01:49:55.500 --> 01:49:58.480
probably one of the reasons I fell in love with it

01:49:58.480 --> 01:49:59.840
is dictionaries.

01:49:59.840 --> 01:50:00.960
Yes.

01:50:00.960 --> 01:50:04.520
So obviously probably most languages have some

01:50:04.520 --> 01:50:05.360
Mapping concept.

01:50:05.360 --> 01:50:06.480
Some mapping concept,

01:50:06.480 --> 01:50:09.080
but it felt like it was a first-class citizen,

01:50:09.080 --> 01:50:12.240
and it was just my brain was able to think in dictionaries.

01:50:12.240 --> 01:50:14.680
But then there's the thing that I guess I still use

01:50:14.680 --> 01:50:16.960
to this day is order dictionaries,

01:50:16.960 --> 01:50:20.160
because that seems like a more natural way

01:50:20.160 --> 01:50:21.720
to construct dictionaries.

01:50:21.720 --> 01:50:22.560
Yeah.

01:50:22.560 --> 01:50:23.760
And from a computer science perspective,

01:50:23.760 --> 01:50:26.040
the running time cost is not that significant,

01:50:26.040 --> 01:50:30.440
but there's a lot of things to understand about dictionaries

01:50:30.440 --> 01:50:34.880
that the abstraction kind of doesn't necessarily

01:50:34.880 --> 01:50:37.440
incentivize you to understand.

01:50:37.440 --> 01:50:38.280
Right.

01:50:38.280 --> 01:50:39.400
Do you really understand the notion of a hash map

01:50:39.400 --> 01:50:41.080
and how that dictionary is implemented?

01:50:41.080 --> 01:50:42.120
But you're right.

01:50:42.120 --> 01:50:44.200
Dictionaries are a good example of an abstraction

01:50:44.200 --> 01:50:45.040
that's powerful.

01:50:45.040 --> 01:50:46.040
And I agree with you.

01:50:46.040 --> 01:50:46.860
I agree.

01:50:46.860 --> 01:50:47.840
I love dictionaries too.

01:50:47.840 --> 01:50:49.160
Took me a while to understand that once you do,

01:50:49.160 --> 01:50:50.360
you realize, oh, they're everywhere.

01:50:50.360 --> 01:50:52.800
And Python uses them everywhere too.

01:50:52.800 --> 01:50:54.120
Like it's actually constructed

01:50:54.120 --> 01:50:55.800
that one of the foundational things is dictionaries

01:50:55.800 --> 01:50:57.000
and it does everything with dictionaries.

01:50:57.000 --> 01:50:57.840
Yeah.

01:50:57.840 --> 01:50:58.660
So it is, it's powerful.

01:50:58.660 --> 01:51:00.200
Order dictionaries came later,

01:51:00.960 --> 01:51:02.240
but it is very, very powerful.

01:51:02.240 --> 01:51:04.160
It took me a little while coming from

01:51:04.160 --> 01:51:06.000
just the array programming entirely

01:51:06.000 --> 01:51:07.400
to understand these other objects,

01:51:07.400 --> 01:51:11.600
like dictionaries and lists and tuples and binary trees.

01:51:11.600 --> 01:51:13.400
Like I said, I wasn't a computer scientist,

01:51:13.400 --> 01:51:15.160
I studied arrays first.

01:51:15.160 --> 01:51:17.400
And so I was very array centric and you realize,

01:51:17.400 --> 01:51:20.160
oh, these others don't have purposes and value actually.

01:51:21.240 --> 01:51:22.080
I agree.

01:51:22.080 --> 01:51:25.480
There's a friendliness about like one way to think

01:51:25.520 --> 01:51:30.520
about arrays is arrays are just like full of numbers,

01:51:31.960 --> 01:51:35.040
but to make them accessible to humans

01:51:35.040 --> 01:51:38.740
and make them less error prone to human users.

01:51:38.740 --> 01:51:41.520
Sometimes you want to attach names,

01:51:41.520 --> 01:51:44.720
human interpretable names that are sticky to those arrays.

01:51:44.720 --> 01:51:47.520
So that's how you start to think about dictionaries.

01:51:47.520 --> 01:51:48.560
Yes, good point.

01:51:48.560 --> 01:51:50.560
You start to convert numbers

01:51:50.560 --> 01:51:52.160
into something that's human interpretable.

01:51:52.160 --> 01:51:55.360
And that's actually the tension I've had with NumPy

01:51:56.200 --> 01:52:01.200
because I've built so much tooling around human interpretability

01:52:02.360 --> 01:52:05.720
and also protecting me from a year later

01:52:05.720 --> 01:52:08.000
not making the mistakes by being,

01:52:08.000 --> 01:52:12.920
I wanted to force myself to use English versus numbers.

01:52:12.920 --> 01:52:15.720
Yes, so there's a project called Label the Rays.

01:52:15.720 --> 01:52:18.080
Like very early it was recognized that,

01:52:18.080 --> 01:52:21.320
oh, we're indexing NumPy with just numbers,

01:52:21.320 --> 01:52:23.680
all the columns and particularly the dimensions.

01:52:23.680 --> 01:52:25.560
I mean, if you have an image,

01:52:25.560 --> 01:52:27.720
you don't necessarily need to label each column or row,

01:52:27.720 --> 01:52:29.200
but if you have a lot of images

01:52:29.200 --> 01:52:30.480
or you have another dimension,

01:52:30.480 --> 01:52:32.280
you at least like to label the dimension as this is X,

01:52:32.280 --> 01:52:34.680
this is Y, this is Z, or this is give us some human meaning

01:52:34.680 --> 01:52:36.800
or some domains of meaning.

01:52:36.800 --> 01:52:39.720
That was one of the impetuses for pandas actually

01:52:39.720 --> 01:52:43.080
was just, oh, we do need to label these things.

01:52:43.080 --> 01:52:45.840
And label array was an attempt to add that

01:52:45.840 --> 01:52:47.720
like a lighter weight version of that.

01:52:47.720 --> 01:52:49.400
And there's been like, that's an example of something

01:52:49.400 --> 01:52:53.120
I think NumPy could add, could be added to NumPy.

01:52:53.120 --> 01:52:55.440
But one of the challenges again, how do you fund this?

01:52:55.440 --> 01:52:58.320
Like I said, one of the tragedies I think is that,

01:52:58.320 --> 01:53:00.280
so I never had the chance to,

01:53:00.280 --> 01:53:02.400
I was never paid to work on NumPy, right?

01:53:02.400 --> 01:53:04.440
So I've always just done in my spare time,

01:53:04.440 --> 01:53:05.920
always taken from one thing,

01:53:05.920 --> 01:53:07.960
taken from another thing to do it.

01:53:07.960 --> 01:53:09.800
And at the time, I mean, today,

01:53:09.800 --> 01:53:11.040
it would be the wrong day and today,

01:53:11.040 --> 01:53:12.200
like paying me to work on NumPy now

01:53:12.200 --> 01:53:13.520
would not be a good use of effort.

01:53:13.520 --> 01:53:16.680
But we are finally at QuantSite Labs,

01:53:16.680 --> 01:53:19.480
I'm actually paying people to work on NumPy and SciPy,

01:53:19.480 --> 01:53:22.000
which is I'm thrilled with, I'm excited by.

01:53:22.000 --> 01:53:22.840
I've wanted to do that.

01:53:23.360 --> 01:53:25.200
And that's why I always wanted to do it from day one.

01:53:25.200 --> 01:53:28.360
It just took me a while to figure out a mechanism to do that.

01:53:28.360 --> 01:53:32.080
Even like in the university setting, respecting that,

01:53:32.080 --> 01:53:35.400
like pushing students, young minds,

01:53:35.400 --> 01:53:38.680
young graduate students to contribute

01:53:38.680 --> 01:53:41.960
and then figuring out financial mechanisms

01:53:41.960 --> 01:53:43.960
that enable them to contribute

01:53:43.960 --> 01:53:45.920
and then sort of reward them

01:53:45.920 --> 01:53:48.760
for their innovative scientific journey,

01:53:48.760 --> 01:53:49.840
that would be nice.

01:53:49.840 --> 01:53:52.800
But then also just the better allocation of resources.

01:53:53.680 --> 01:53:55.760
It's a 20 year anniversary since 9-11

01:53:55.760 --> 01:53:59.240
and I was just looking, we spent over $6 trillion

01:53:59.240 --> 01:54:02.200
in the Middle East after 9-11

01:54:02.200 --> 01:54:04.600
in the various efforts there.

01:54:04.600 --> 01:54:08.040
And sort of to put politics and all that aside,

01:54:08.040 --> 01:54:10.120
it's just, you think about the education system,

01:54:10.120 --> 01:54:11.760
all the other ways we could have possibly

01:54:11.760 --> 01:54:12.920
allocated that money.

01:54:14.280 --> 01:54:16.600
To me, to take it back,

01:54:18.320 --> 01:54:21.200
the amount of impact you would have

01:54:21.240 --> 01:54:23.560
by allocating a little bit of money

01:54:23.560 --> 01:54:27.720
to the programmers that build the tools

01:54:27.720 --> 01:54:30.680
that run the world is fascinating.

01:54:30.680 --> 01:54:31.520
It is.

01:54:32.680 --> 01:54:35.000
I don't know, I think, again,

01:54:35.000 --> 01:54:38.040
there is some aspect to being broke

01:54:38.040 --> 01:54:40.280
as somewhat of a feature, not a bug,

01:54:40.280 --> 01:54:42.440
that you make sure that your value.

01:54:42.440 --> 01:54:43.520
You still manage that.

01:54:43.520 --> 01:54:45.400
Right, no, I know.

01:54:45.400 --> 01:54:47.080
But I don't think that's a big part.

01:54:47.080 --> 01:54:50.800
So it's like, I think you can have enough money

01:54:51.320 --> 01:54:53.920
and actually be wealthy while maintaining your values.

01:54:53.920 --> 01:54:55.560
Agreed, agreed.

01:54:55.560 --> 01:54:57.840
There's an old adage that nations that trade together

01:54:57.840 --> 01:54:59.480
don't go to war together.

01:54:59.480 --> 01:55:02.040
I've often thought about nations that code together.

01:55:03.880 --> 01:55:06.760
Because one thing I love about open source is it's global.

01:55:06.760 --> 01:55:08.040
It's multinational.

01:55:08.040 --> 01:55:09.200
There aren't national boundaries.

01:55:09.200 --> 01:55:10.800
One of the challenges with business and open source

01:55:10.800 --> 01:55:13.000
is the fact that business is national.

01:55:13.000 --> 01:55:14.600
Businesses are entities that are recognized

01:55:14.600 --> 01:55:16.280
in legal jurisdictions

01:55:16.280 --> 01:55:18.320
and have laws that are respected in those jurisdictions

01:55:18.320 --> 01:55:21.400
and hiring, and yet the open source ecosystem

01:55:21.400 --> 01:55:23.280
is not there.

01:55:23.280 --> 01:55:25.160
Currently, one of the problems we're solving

01:55:25.160 --> 01:55:27.280
is hiring people all over the world.

01:55:27.280 --> 01:55:29.680
Because it's a global effort.

01:55:29.680 --> 01:55:32.000
And I've had the chance to work, and I've loved the chance.

01:55:32.000 --> 01:55:36.880
I've never been to Iran, but I once had a conference

01:55:36.880 --> 01:55:38.720
where I was able to talk to people there

01:55:38.720 --> 01:55:41.000
and talk to folks in Pakistan.

01:55:41.000 --> 01:55:44.440
Never been there, but we had a call.

01:55:44.440 --> 01:55:45.640
And there are people there.

01:55:45.680 --> 01:55:47.680
Just scientists and normal people.

01:55:47.680 --> 01:55:52.680
And there's a certain amount of humanizing

01:55:52.680 --> 01:55:54.560
that gets away from the...

01:55:54.560 --> 01:55:56.840
We often get the memes of society that bubble up

01:55:56.840 --> 01:55:58.600
and then get discussed,

01:55:58.600 --> 01:56:00.800
but the memes are not even an accurate reflection

01:56:00.800 --> 01:56:02.440
of the reality of what people are.

01:56:02.440 --> 01:56:05.480
Well, if you look at the major power centers

01:56:05.480 --> 01:56:08.280
that are leading to something like cyber war

01:56:08.280 --> 01:56:10.040
in the next few decades,

01:56:10.040 --> 01:56:13.360
it's the United States, it's Russia, and China.

01:56:13.360 --> 01:56:16.120
And those three countries, in particular,

01:56:16.120 --> 01:56:18.280
have incredible developers.

01:56:18.280 --> 01:56:21.360
So if they work together, I think that's one way.

01:56:21.360 --> 01:56:23.360
The politicians can do their stupid bickering,

01:56:23.360 --> 01:56:27.360
but there's a layer of infrastructure, of humanity.

01:56:27.360 --> 01:56:29.440
If they collaborate together,

01:56:29.440 --> 01:56:34.080
that I think can prevent major military conflict,

01:56:34.080 --> 01:56:37.880
which would, I think, most likely happen at the cyber level

01:56:37.880 --> 01:56:39.800
versus the actual hot war level.

01:56:39.800 --> 01:56:40.640
You're right.

01:56:40.640 --> 01:56:42.520
No, I think that's good prediction.

01:56:43.360 --> 01:56:46.520
Nations that code together don't go to war together.

01:56:46.520 --> 01:56:47.880
Don't go to war together.

01:56:47.880 --> 01:56:48.720
That's a hope, right?

01:56:48.720 --> 01:56:51.160
That's one of the philosophical hopes, but yeah.

01:56:52.360 --> 01:56:55.640
So you mentioned the project of Numba,

01:56:55.640 --> 01:56:58.520
which is fascinating.

01:56:58.520 --> 01:56:59.720
So from the early days,

01:56:59.720 --> 01:57:02.200
there was kind of a pushback on Python

01:57:02.200 --> 01:57:03.800
that it's not fast.

01:57:05.520 --> 01:57:06.920
If you wanna write something that's fast,

01:57:06.920 --> 01:57:08.240
you use C, C++.

01:57:08.240 --> 01:57:11.320
If you wanna write something that's usable and friendly,

01:57:11.320 --> 01:57:13.240
but slow, you use Python.

01:57:14.240 --> 01:57:15.880
What is Numba?

01:57:15.880 --> 01:57:16.800
What is its goal?

01:57:16.800 --> 01:57:17.640
How does it work?

01:57:17.640 --> 01:57:18.480
Great, yeah.

01:57:18.480 --> 01:57:19.800
Yes, that's what the argument,

01:57:19.800 --> 01:57:22.440
and the reality was people would write high level coding

01:57:22.440 --> 01:57:23.480
and use compiled code,

01:57:23.480 --> 01:57:25.240
but there's still user story, use cases,

01:57:25.240 --> 01:57:27.440
where you want to write Python,

01:57:27.440 --> 01:57:28.880
but then have it still be fast.

01:57:28.880 --> 01:57:30.880
You still need to write a for loop.

01:57:30.880 --> 01:57:34.200
Before Numba, it was always, don't write a for loop.

01:57:34.200 --> 01:57:37.240
Write it in a vectorized way, put it in an array,

01:57:37.240 --> 01:57:40.120
and often that can make a memory trade-off.

01:57:40.120 --> 01:57:41.040
Quite often you can do it,

01:57:41.040 --> 01:57:42.680
but then maybe you use more memory

01:57:42.720 --> 01:57:44.920
because you have to build this array of data

01:57:44.920 --> 01:57:46.680
that you don't necessarily need all the time.

01:57:46.680 --> 01:57:49.480
So Numba was, it started from a desire

01:57:49.480 --> 01:57:52.840
to have kind of a vectorized that worked.

01:57:52.840 --> 01:57:54.400
A vectorized was a tool.

01:57:54.400 --> 01:57:56.280
In NumPy, it was released.

01:57:56.280 --> 01:57:57.800
You give it a Python function,

01:57:57.800 --> 01:57:59.680
and it gave you a universal function,

01:57:59.680 --> 01:58:01.120
a ufunc that would work on arrays.

01:58:01.120 --> 01:58:03.640
So you get a function that just worked on a scalar.

01:58:03.640 --> 01:58:05.080
Like you could make a,

01:58:05.080 --> 01:58:06.680
the classic case was a simple function

01:58:06.680 --> 01:58:08.320
and an if then statement in it.

01:58:08.320 --> 01:58:12.200
So sine x over x function, sync function.

01:58:12.200 --> 01:58:13.600
If x equals zero, return one,

01:58:13.600 --> 01:58:15.160
otherwise do sine x over x.

01:58:16.120 --> 01:58:17.800
The challenge is you don't want that loop

01:58:17.800 --> 01:58:21.520
had gone in Python, so you want a compiled version of that.

01:58:21.520 --> 01:58:23.200
But the ufunc, the vectorized in NumPy

01:58:23.200 --> 01:58:24.880
would just give you a Python function.

01:58:24.880 --> 01:58:26.760
So it would take the array of numbers

01:58:26.760 --> 01:58:29.600
and at every call do a loop back into Python.

01:58:29.600 --> 01:58:30.480
So it was very slow.

01:58:30.480 --> 01:58:31.840
It gave you the appearance of a ufunc,

01:58:31.840 --> 01:58:32.880
but it was very slow.

01:58:32.880 --> 01:58:34.640
So I always wanted a vectorized

01:58:34.640 --> 01:58:36.320
that would take that Python scalar function

01:58:36.320 --> 01:58:39.520
and produce a ufunc working on binary, native code.

01:58:39.520 --> 01:58:42.840
So in fact, I had somebody work on that with PyPy.

01:58:42.840 --> 01:58:45.680
See if PyPy could be used to produce a ufunc like that

01:58:45.680 --> 01:58:50.600
early on in 2009 or something like that, 2010.

01:58:50.600 --> 01:58:51.520
It didn't work that well.

01:58:51.520 --> 01:58:52.920
It was kind of pretty bulky.

01:58:52.920 --> 01:58:57.040
But in 2012, Peter and I had just started Anaconda.

01:58:57.040 --> 01:59:00.720
We had, I had just, I'd learned to raise money.

01:59:00.720 --> 01:59:01.680
That's a different topic,

01:59:01.680 --> 01:59:03.600
but I'd learned to raise money

01:59:03.600 --> 01:59:06.040
from friends, family and fools, as they say.

01:59:06.040 --> 01:59:06.880
And-

01:59:06.880 --> 01:59:07.880
That's a good line.

01:59:09.880 --> 01:59:11.240
Oh, that's a good line.

01:59:11.240 --> 01:59:13.440
But so we were trying to do something.

01:59:13.440 --> 01:59:14.720
We were trying to change the world.

01:59:14.720 --> 01:59:15.880
Peter and I are super ambitious.

01:59:15.880 --> 01:59:17.600
We wanted to make array computing

01:59:17.600 --> 01:59:19.520
and we had ideas for really what's still,

01:59:19.520 --> 01:59:20.640
it's still the energy right now.

01:59:20.640 --> 01:59:23.560
How do you do at scale data science?

01:59:23.560 --> 01:59:25.880
And we had a bunch of ideas there, but one of them,

01:59:25.880 --> 01:59:27.760
I had just talked to people about LLVM

01:59:27.760 --> 01:59:30.080
and I was like, there's a way to do this.

01:59:30.080 --> 01:59:32.640
I just, I went, I heard about my friend, Dave Beasley

01:59:32.640 --> 01:59:33.960
at a compiler course.

01:59:33.960 --> 01:59:35.600
So I was looking at compilers like,

01:59:35.600 --> 01:59:37.640
and I realized, oh, this is what you do.

01:59:37.640 --> 01:59:40.040
And so I wrote a version of Numba

01:59:40.040 --> 01:59:45.040
that just basically mapped Python bytecode to LLVM.

01:59:45.640 --> 01:59:46.480
Nice.

01:59:46.480 --> 01:59:49.200
Right, so, and the first version is like, this works

01:59:49.200 --> 01:59:50.840
and it produces code that's fast.

01:59:50.840 --> 01:59:51.960
This is cool for, you know,

01:59:51.960 --> 01:59:53.440
obviously a reduced subset of Python.

01:59:53.440 --> 01:59:55.360
I didn't support all of the Python language.

01:59:55.360 --> 01:59:57.480
There had been efforts to speed up Python in the past,

01:59:57.480 --> 01:59:59.200
but those efforts were, I would say,

01:59:59.200 --> 02:00:00.800
not from the array computing perspective,

02:00:00.800 --> 02:00:02.160
not from the perspective of wanting to produce

02:00:02.160 --> 02:00:03.560
a vectorize improvement.

02:00:03.560 --> 02:00:05.640
They were from a perspective of speeding up the runtime

02:00:05.640 --> 02:00:07.520
of Python, which is fundamentally hard

02:00:07.520 --> 02:00:10.520
because Python allows for some constructs

02:00:10.520 --> 02:00:12.160
that aren't, you can't speed up.

02:00:12.160 --> 02:00:15.560
Like it's this generic, you know, when it does this variable.

02:00:15.560 --> 02:00:17.720
So I, from the start, did not try to replicate

02:00:17.720 --> 02:00:20.280
Python's semantics entirely.

02:00:20.280 --> 02:00:23.000
I said, I'm gonna take a subset of the Python syntax

02:00:23.000 --> 02:00:25.080
and let people write syntax in Python,

02:00:25.080 --> 02:00:27.480
but it's kind of a new language really.

02:00:27.480 --> 02:00:29.200
So it's almost like four loops,

02:00:29.200 --> 02:00:30.440
like focusing on four loops.

02:00:31.400 --> 02:00:34.400
Scalar arithmetic, you know, typed,

02:00:34.400 --> 02:00:37.200
you know, really typed language, a typed subset.

02:00:38.280 --> 02:00:39.360
That was the key.

02:00:39.360 --> 02:00:41.880
So, but we wanted to add inference of types.

02:00:41.880 --> 02:00:43.400
So you didn't have to spell all the types out

02:00:43.400 --> 02:00:45.840
because when you call a function,

02:00:45.840 --> 02:00:48.080
so Python is typed, it's just dynamically typed.

02:00:48.080 --> 02:00:49.360
So you don't tell it what the types are,

02:00:49.360 --> 02:00:52.080
but when it runs, every time an object runs,

02:00:52.080 --> 02:00:53.360
there's a type for the variables.

02:00:53.360 --> 02:00:54.560
You know what it is.

02:00:54.560 --> 02:00:56.800
And so that was the design goals of Numba

02:00:56.800 --> 02:00:59.200
were to make it possible to write functions

02:00:59.200 --> 02:01:03.480
that could be compiled and have them use for NumPy arrays,

02:01:03.480 --> 02:01:05.560
like the need to support NumPy arrays.

02:01:05.560 --> 02:01:07.080
And so how does it work?

02:01:07.080 --> 02:01:10.240
Do you add a comment within Python that tells it to do,

02:01:10.240 --> 02:01:11.920
like how do you help out the compiler?

02:01:11.920 --> 02:01:15.880
Yeah, so there isn't much actually.

02:01:15.880 --> 02:01:17.800
You don't, it's kind of magical in the sense

02:01:17.800 --> 02:01:19.640
that it just looks at the type of the objects

02:01:19.640 --> 02:01:21.360
and then does type inference to determine

02:01:21.360 --> 02:01:23.400
any of the other intermediate variables it needs.

02:01:23.400 --> 02:01:26.120
And then it was also because we had a use case

02:01:26.120 --> 02:01:29.040
that could work early, like one of the challenges

02:01:29.040 --> 02:01:30.720
with any kind of new development

02:01:30.720 --> 02:01:32.320
is if you have something that to make it work,

02:01:32.320 --> 02:01:34.240
it's going to take you a long time,

02:01:34.240 --> 02:01:36.000
it's really hard to get out off the ground.

02:01:36.000 --> 02:01:39.240
If you have a project where there's some incremental story,

02:01:39.240 --> 02:01:42.360
it can start working today and solve a problem,

02:01:42.360 --> 02:01:44.680
then you can start getting it out there, getting feedback.

02:01:44.680 --> 02:01:48.200
Because Numba today, now Numba is nine years old today,

02:01:48.200 --> 02:01:52.160
the first two, three versions were not great,

02:01:52.160 --> 02:01:54.120
but they solved a problem and so people could try it

02:01:54.120 --> 02:01:55.600
and we could get some feedback on it.

02:01:55.600 --> 02:01:57.560
Not great and that it was very focused.

02:01:57.920 --> 02:02:00.600
Very fragile, very subset.

02:02:00.600 --> 02:02:03.040
The subset it would actually compile was small.

02:02:03.040 --> 02:02:05.000
And so if you wrote Python code and said,

02:02:05.000 --> 02:02:06.880
so the way it worked is you write a function

02:02:06.880 --> 02:02:09.000
and you say at JIT, use decorators.

02:02:09.000 --> 02:02:11.040
So decorators, just these little constructs

02:02:11.040 --> 02:02:15.040
let you decorate code with an at and then a name.

02:02:15.040 --> 02:02:17.760
The at JIT would take your Python function

02:02:17.760 --> 02:02:20.240
and actually just compile it and replace the Python function

02:02:20.240 --> 02:02:23.200
with another function that interacts

02:02:23.200 --> 02:02:24.920
with this compiled function.

02:02:24.920 --> 02:02:25.800
And it would just do that.

02:02:25.800 --> 02:02:29.400
And we went from Python bytecode, then we went to AST.

02:02:29.400 --> 02:02:31.200
I mean, writing compiler is actually,

02:02:31.200 --> 02:02:32.920
I learned a lot about why computer science

02:02:32.920 --> 02:02:34.880
is taught the way it is because

02:02:34.880 --> 02:02:36.600
compilers can be hard to write.

02:02:36.600 --> 02:02:39.080
They use tree structures, they use all the concepts

02:02:39.080 --> 02:02:40.400
of computer science that are needed.

02:02:40.400 --> 02:02:42.480
And it's actually hard to,

02:02:42.480 --> 02:02:44.600
it's easy to write a compiler

02:02:44.600 --> 02:02:46.000
and then have it be spaghetti code.

02:02:46.000 --> 02:02:47.600
Like the passes become challenging

02:02:47.600 --> 02:02:49.920
and we ended up with three versions of Numba, right?

02:02:49.920 --> 02:02:51.520
Numba got written three times.

02:02:51.520 --> 02:02:55.560
What programming language is Numba written in?

02:02:55.560 --> 02:02:56.480
Python.

02:02:56.480 --> 02:02:57.480
Wait, okay.

02:02:57.480 --> 02:02:58.640
Yeah, Python.

02:02:58.640 --> 02:03:00.040
So.

02:03:00.040 --> 02:03:00.880
Really?

02:03:00.880 --> 02:03:01.720
That's fascinating.

02:03:01.720 --> 02:03:03.560
Yeah, so Python, but then the whole goal of Numba

02:03:03.560 --> 02:03:07.520
is to translate Python bytecode to LLVM.

02:03:07.520 --> 02:03:09.440
And so LLVM actually does the code generation.

02:03:09.440 --> 02:03:10.800
In fact, a lot of times they'd say,

02:03:10.800 --> 02:03:12.800
yeah, it's super easy to write a compiler

02:03:12.800 --> 02:03:14.480
if you're not writing in the parser

02:03:14.480 --> 02:03:16.240
nor the code generator, right?

02:03:16.240 --> 02:03:17.800
So for people who don't know,

02:03:17.800 --> 02:03:19.480
LLVM is a compiler itself.

02:03:19.480 --> 02:03:20.320
So you're compiling.

02:03:20.320 --> 02:03:22.720
Yeah, it's really badly named low level virtual machine

02:03:22.720 --> 02:03:24.520
which that part of it is not used.

02:03:24.520 --> 02:03:25.360
It's really low level.

02:03:25.360 --> 02:03:26.200
Chris, he doesn't mean that.

02:03:26.200 --> 02:03:29.280
Yeah, love Chris.

02:03:29.280 --> 02:03:30.920
But the name makes you imply

02:03:30.920 --> 02:03:32.280
that the virtual machine is what it's all about.

02:03:32.280 --> 02:03:34.200
It's actually the IR and the library,

02:03:34.200 --> 02:03:36.000
the code generation.

02:03:36.000 --> 02:03:37.680
That's the real beauty of it.

02:03:37.680 --> 02:03:39.360
The fact that what I love about LLVM

02:03:39.360 --> 02:03:41.680
was the fact that it was a plateau

02:03:41.680 --> 02:03:43.560
you could collaborate on, right?

02:03:43.560 --> 02:03:45.880
Instead of the internals of GCC

02:03:45.880 --> 02:03:47.480
or the internals of Intel compiler,

02:03:47.480 --> 02:03:49.120
like how do I extend that?

02:03:49.120 --> 02:03:51.000
And here's a place where you collaborate.

02:03:51.000 --> 02:03:52.400
And we were early.

02:03:52.400 --> 02:03:54.000
I mean, people had started before.

02:03:54.040 --> 02:03:55.640
It's a slow compiler.

02:03:55.640 --> 02:03:56.880
It's not a fast compiler.

02:03:56.880 --> 02:03:59.560
So for some kind of JITs,

02:03:59.560 --> 02:04:01.080
like JITs are common in language

02:04:01.080 --> 02:04:04.800
because every browser has a JavaScript JIT.

02:04:04.800 --> 02:04:06.600
It does real-time compilation

02:04:06.600 --> 02:04:09.120
of the JavaScript to machine code.

02:04:09.120 --> 02:04:09.960
For people who don't know,

02:04:09.960 --> 02:04:11.560
JIT is just-in-time compilation.

02:04:11.560 --> 02:04:13.280
Thank you, yeah, just-in-time compilation.

02:04:13.280 --> 02:04:14.880
They're actually really sophisticated.

02:04:14.880 --> 02:04:17.120
In fact, I got jealous of how much effort

02:04:17.120 --> 02:04:18.640
was put into the JavaScript JITs.

02:04:18.640 --> 02:04:20.200
Yes, well, it's kind of incredible

02:04:20.200 --> 02:04:22.040
what they've done with JavaScript JITs.

02:04:22.040 --> 02:04:24.760
I completely agree, I'm very impressed.

02:04:24.760 --> 02:04:29.320
But Numba was an effort to make that happen with Python.

02:04:29.320 --> 02:04:30.960
And so we used some of the money

02:04:30.960 --> 02:04:32.440
we raised from Anaconda to do it.

02:04:32.440 --> 02:04:34.800
And then we also applied for this DARPA grant

02:04:34.800 --> 02:04:36.800
and used some of that money to continue the development.

02:04:36.800 --> 02:04:40.680
And then we used proceeds from service projects we would do.

02:04:40.680 --> 02:04:43.760
We get consulting projects that we would then use

02:04:43.760 --> 02:04:45.400
some of the profits to invest in Numba.

02:04:45.400 --> 02:04:47.160
So we ended up with a team of two or three people

02:04:47.160 --> 02:04:48.880
working on Numba.

02:04:48.880 --> 02:04:50.720
It was a fits and starts, right?

02:04:50.760 --> 02:04:52.680
And ultimately, the fact that we had

02:04:52.680 --> 02:04:54.760
a commercial version of it, also we were writing.

02:04:54.760 --> 02:04:56.680
So part of the way I was trying to fund Numba

02:04:56.680 --> 02:04:58.600
is say, well, let's do the free Numba

02:04:58.600 --> 02:04:59.960
and then we'll have a commercial version of Numba

02:04:59.960 --> 02:05:00.880
called Numba Pro.

02:05:00.880 --> 02:05:03.280
And what Numba Pro did is it targeted GPUs.

02:05:03.280 --> 02:05:05.560
So we had the very first CUDA JIT

02:05:05.560 --> 02:05:07.920
and the very first At-JIT compiler

02:05:07.920 --> 02:05:10.880
that in 2012 through 13,

02:05:10.880 --> 02:05:14.160
you could run not just a U-FUNC on CPU,

02:05:14.160 --> 02:05:15.680
but a U-FUNC on GPUs.

02:05:15.680 --> 02:05:17.520
And it would automatically paralyze it

02:05:17.520 --> 02:05:19.280
and get thousand X speed ups.

02:05:19.280 --> 02:05:21.120
That's an interesting funding mechanism

02:05:21.120 --> 02:05:26.120
because large companies or larger companies

02:05:26.880 --> 02:05:30.120
care about speed in just this way.

02:05:30.120 --> 02:05:33.160
So it's exactly a really good way.

02:05:33.160 --> 02:05:34.240
Yeah, there's been a couple things

02:05:34.240 --> 02:05:35.200
you know people will pay for.

02:05:35.200 --> 02:05:37.960
One, they'll pay for really good user interfaces, right?

02:05:37.960 --> 02:05:39.720
And so I'm always looking for

02:05:39.720 --> 02:05:40.840
what are the things people will pay for

02:05:40.840 --> 02:05:41.760
that you could actually adapt

02:05:41.760 --> 02:05:43.240
to the open source infrastructure.

02:05:43.240 --> 02:05:45.560
One is definitely user interfaces.

02:05:45.560 --> 02:05:49.120
The second is speed, like a better runtime, faster runtime.

02:05:49.960 --> 02:05:50.800
And then when you say people,

02:05:50.800 --> 02:05:52.280
you mean like a small number of people pay a lot of money,

02:05:52.280 --> 02:05:54.480
but then there's also this other mechanism that-

02:05:54.480 --> 02:05:55.320
That's true.

02:05:55.320 --> 02:05:56.400
A ton of people pay-

02:05:56.400 --> 02:05:57.240
That's true.

02:05:57.240 --> 02:05:58.080
A little bit.

02:05:58.080 --> 02:06:00.320
First, I gotta, we mentioned Anaconda,

02:06:00.320 --> 02:06:04.280
we mentioned Friends, Family, and Fools.

02:06:04.280 --> 02:06:06.800
So Anaconda is yet another.

02:06:06.800 --> 02:06:09.080
So there's a company, but there's also a project-

02:06:09.080 --> 02:06:09.920
Correct.

02:06:09.920 --> 02:06:12.520
That is exceptionally impactful

02:06:12.520 --> 02:06:15.440
and in terms of for many reasons,

02:06:15.440 --> 02:06:17.920
but one of which is bringing a lot more people

02:06:17.920 --> 02:06:22.920
into the community of folks who use Python.

02:06:23.640 --> 02:06:26.920
So what is Anaconda?

02:06:26.920 --> 02:06:28.960
What is its goals?

02:06:28.960 --> 02:06:31.520
Maybe what is Conda versus Anaconda?

02:06:31.520 --> 02:06:33.080
Yeah, I'll tell you a little bit of the history of that

02:06:33.080 --> 02:06:35.280
because Anaconda, we wanted to do,

02:06:35.280 --> 02:06:37.440
we wanted to scale Python

02:06:37.440 --> 02:06:38.680
because we, you know, that was the goal.

02:06:38.680 --> 02:06:40.720
Peter and I had the goal of when we started Anaconda,

02:06:40.720 --> 02:06:42.480
we actually started as Continuum Analytics

02:06:42.480 --> 02:06:44.000
was the name of the company that started.

02:06:44.000 --> 02:06:47.000
It got renamed Anaconda in 2015,

02:06:47.000 --> 02:06:49.880
but we said we want to scale analytics.

02:06:49.880 --> 02:06:52.680
NumPy is great, Pan is emerging,

02:06:52.680 --> 02:06:55.320
but these need to run at scale with lots of machines.

02:06:55.320 --> 02:06:56.160
The other thing we wanted to do

02:06:56.160 --> 02:06:59.360
was make user interfaces that were web.

02:06:59.360 --> 02:07:00.480
We wanted to make sure the web

02:07:00.480 --> 02:07:02.920
did not pass by the Python community,

02:07:02.920 --> 02:07:06.000
that we had ways to translate your data science to the web.

02:07:06.000 --> 02:07:07.720
So those are the two kind of technical areas

02:07:07.720 --> 02:07:09.920
we thought, oh, we'll build products in this space.

02:07:09.920 --> 02:07:12.520
And that was the idea.

02:07:12.520 --> 02:07:13.640
Very quickly in, but of course,

02:07:13.640 --> 02:07:15.760
the thing I knew how to do was to do consulting,

02:07:15.760 --> 02:07:18.920
to make money and to make sure my family and friends

02:07:18.920 --> 02:07:21.680
and fools that had invested didn't lose their money.

02:07:21.680 --> 02:07:22.640
So it's a little different

02:07:22.640 --> 02:07:24.360
than if you take money from a venture fund.

02:07:24.360 --> 02:07:25.520
If you take money from a venture fund,

02:07:25.520 --> 02:07:27.720
the venture fund, they want you to go big or go home.

02:07:27.720 --> 02:07:30.280
And they're kind of like expecting nine out of 10 to fail

02:07:30.280 --> 02:07:33.080
or 99 out of 100 to fail.

02:07:33.080 --> 02:07:35.480
It's different, I was at a barbell strategy.

02:07:35.480 --> 02:07:37.280
I was like, I can't fail.

02:07:37.280 --> 02:07:38.680
I mean, I may not do super well,

02:07:38.680 --> 02:07:40.440
but I cannot lose their money.

02:07:40.440 --> 02:07:43.560
So I'm gonna do something I know can return a profit,

02:07:43.560 --> 02:07:46.240
but I wanna have exposure to an upside.

02:07:46.240 --> 02:07:48.280
So that's what happened at Anaconda.

02:07:48.280 --> 02:07:50.320
There was lots of things we did not well

02:07:50.320 --> 02:07:51.280
in terms of that structure,

02:07:51.280 --> 02:07:53.720
and I've learned from since and how to do better.

02:07:53.720 --> 02:07:56.680
But we did a really good job

02:07:56.680 --> 02:07:59.120
of kind of attracting the interest around the area

02:07:59.120 --> 02:08:00.360
to get good people working

02:08:00.360 --> 02:08:03.080
and then get funnel some money on some interesting projects.

02:08:03.080 --> 02:08:05.200
Super excited about what came out of our energy there,

02:08:05.200 --> 02:08:06.800
like a lot did.

02:08:06.800 --> 02:08:08.320
So what are some of the interesting projects?

02:08:08.320 --> 02:08:12.120
So Dask, Numba, Bokeh, Conda.

02:08:12.120 --> 02:08:15.200
There was a data shader, Panel, Holoviz.

02:08:16.200 --> 02:08:19.000
These are all tools that are extremely relevant

02:08:19.000 --> 02:08:21.400
in terms of helping you build applications,

02:08:21.400 --> 02:08:25.040
build tools, build faster code.

02:08:25.040 --> 02:08:25.880
There's a couple I'm forgetting.

02:08:25.880 --> 02:08:26.720
Oh, JupyterLab.

02:08:26.720 --> 02:08:28.680
JupyterLab came out of this too.

02:08:28.680 --> 02:08:30.320
That's fascinating.

02:08:30.320 --> 02:08:33.080
Okay, so Bokeh does plotting?

02:08:33.080 --> 02:08:33.920
Bokeh does plotting.

02:08:33.920 --> 02:08:35.880
So Bokeh was one of the foundational things to say,

02:08:35.880 --> 02:08:37.360
I wanna do plot in Python,

02:08:37.360 --> 02:08:39.160
but have the things show up in a web.

02:08:39.160 --> 02:08:41.400
Right, that's right, that's right, that's right.

02:08:41.440 --> 02:08:43.320
Plotting to me still,

02:08:43.320 --> 02:08:46.520
with all due respect to Matplotlib and Bokeh,

02:08:46.520 --> 02:08:48.800
it feels like still an unsolved problem,

02:08:48.800 --> 02:08:50.280
not a solved problem.

02:08:50.280 --> 02:08:52.200
It is, it's a big problem.

02:08:52.200 --> 02:08:53.480
Right, because you're,

02:08:54.720 --> 02:08:55.680
I mean, I don't know,

02:08:55.680 --> 02:08:58.160
it's visualization broadly.

02:08:58.160 --> 02:09:01.000
Yes, I think we've got a pretty good API story

02:09:01.000 --> 02:09:03.480
around certain use cases of plotting,

02:09:03.480 --> 02:09:04.960
but there's a difference between static plots

02:09:04.960 --> 02:09:06.040
versus interactive plots,

02:09:06.040 --> 02:09:07.840
versus I'm an end user,

02:09:07.840 --> 02:09:10.240
I just wanna write a simple,

02:09:10.240 --> 02:09:12.040
Panda started the idea of here's a data frame

02:09:12.040 --> 02:09:12.880
on a dot plot,

02:09:12.880 --> 02:09:16.400
I'm just gonna attach plot as a method to my object,

02:09:16.400 --> 02:09:18.320
which was a little bit controversial, right?

02:09:18.320 --> 02:09:20.200
But works pretty well actually,

02:09:20.200 --> 02:09:23.720
because there's a lot less you have to pass in, right?

02:09:23.720 --> 02:09:25.040
You can just say, here's my object,

02:09:25.040 --> 02:09:26.320
you know what you are,

02:09:26.320 --> 02:09:29.040
you tell the visualization what to do.

02:09:29.040 --> 02:09:31.360
So that, and there's things like that

02:09:31.360 --> 02:09:33.760
that have not been super well developed entirely,

02:09:33.760 --> 02:09:36.360
but Bokeh was focused on interactive plotting.

02:09:36.360 --> 02:09:38.440
So you could, it's a short path

02:09:38.440 --> 02:09:41.120
between interactive plotting and application,

02:09:41.120 --> 02:09:42.720
dashboard application.

02:09:42.720 --> 02:09:44.800
And there's some incredible work that got done there, right?

02:09:44.800 --> 02:09:45.840
And it was a hard project,

02:09:45.840 --> 02:09:49.480
because then you're basically doing JavaScript and Python.

02:09:49.480 --> 02:09:51.600
So we wanted to tackle some of these hard problems

02:09:51.600 --> 02:09:53.480
and try to just go after them.

02:09:53.480 --> 02:09:54.960
We got some DARPA funding to help,

02:09:54.960 --> 02:09:56.200
and it was super helpful.

02:09:56.200 --> 02:09:57.040
It's a funny story there,

02:09:57.040 --> 02:09:58.360
we actually did two DARPA proposals,

02:09:58.360 --> 02:10:00.640
but one we were five minutes late for,

02:10:00.640 --> 02:10:03.080
and DARPA has a very strict cutoff window.

02:10:03.080 --> 02:10:04.800
And so we had two proposals,

02:10:04.800 --> 02:10:06.760
one for the Bokeh and one for actually Numba

02:10:06.760 --> 02:10:09.440
and the other work.

02:10:09.440 --> 02:10:10.960
Which one were you late for?

02:10:10.960 --> 02:10:12.960
The foundational numerical work.

02:10:12.960 --> 02:10:14.920
So Bokeh got funded.

02:10:14.920 --> 02:10:17.160
Fortunately, Chris let us use some of the money to fund

02:10:17.160 --> 02:10:19.320
still some of the other foundational work,

02:10:19.320 --> 02:10:22.080
but it wasn't as, yeah, his hands were tired,

02:10:22.080 --> 02:10:23.920
he couldn't do anything about it.

02:10:23.920 --> 02:10:25.920
That was a whole interesting story.

02:10:25.920 --> 02:10:27.760
So one of the incredible projects

02:10:27.760 --> 02:10:29.280
that you worked on is Conda.

02:10:29.280 --> 02:10:30.120
Yes.

02:10:30.120 --> 02:10:30.960
So what is Conda?

02:10:30.960 --> 02:10:32.600
So how that came about, yeah, Conda,

02:10:32.600 --> 02:10:35.560
it was early on, like I said, with SciPy.

02:10:35.560 --> 02:10:37.920
SciPy was a distribution masquerade in the library.

02:10:37.920 --> 02:10:40.360
And you heard me talking about compiler issues

02:10:40.360 --> 02:10:41.520
and trying to get the stuff shipped

02:10:41.520 --> 02:10:43.360
and the fact that people can use your libraries

02:10:43.360 --> 02:10:44.680
if they have it.

02:10:44.680 --> 02:10:45.560
So for a long time,

02:10:45.560 --> 02:10:47.840
we'd understood the packaging problem in Python.

02:10:47.840 --> 02:10:50.720
And one of the first things you did at Continuum Analytics

02:10:50.720 --> 02:10:54.280
became Anaconda was organize the Pi data ecosystem

02:10:54.280 --> 02:10:56.200
in conjunction with NumFocus.

02:10:56.200 --> 02:10:58.040
We actually started NumFocus

02:10:59.000 --> 02:11:00.520
with some other folks in the community

02:11:00.520 --> 02:11:02.880
the same year we started Anaconda.

02:11:02.880 --> 02:11:04.240
I said, we're gonna build a corporation,

02:11:04.520 --> 02:11:07.080
also gotta reify the community aspect

02:11:07.080 --> 02:11:08.320
and build a nonprofit.

02:11:08.320 --> 02:11:09.440
So we did both of those.

02:11:09.440 --> 02:11:10.480
Can we pause real quick

02:11:10.480 --> 02:11:13.320
and can you say what is PyPy,

02:11:13.320 --> 02:11:14.760
the Python package index,

02:11:14.760 --> 02:11:19.360
like this whole story of packaging in Python?

02:11:19.360 --> 02:11:20.920
Yeah, that's what I'm gonna get to actually.

02:11:20.920 --> 02:11:22.280
This is exactly the journey I'm on

02:11:22.280 --> 02:11:24.240
is to sort of explain packaging in Python.

02:11:24.240 --> 02:11:25.400
I think it's best expressed

02:11:25.400 --> 02:11:27.640
through the conversation I had with Guido at a conference

02:11:27.640 --> 02:11:30.160
where I said, so, you know,

02:11:30.160 --> 02:11:31.320
packaging is kind of a problem.

02:11:31.320 --> 02:11:34.120
And Guido said, I don't ever care about packaging.

02:11:34.960 --> 02:11:35.800
I don't use it.

02:11:35.800 --> 02:11:36.640
I don't install new libraries.

02:11:36.640 --> 02:11:38.280
I'm like, I guess if you're the language creator

02:11:38.280 --> 02:11:39.120
and if you need something,

02:11:39.120 --> 02:11:40.520
you just put it in the distribution,

02:11:40.520 --> 02:11:42.560
maybe you don't worry about packaging.

02:11:42.560 --> 02:11:45.240
But Guido has never really cared about packaging, right?

02:11:45.240 --> 02:11:47.480
And never really cared about the problem of distribution,

02:11:47.480 --> 02:11:48.520
somebody else's problem.

02:11:48.520 --> 02:11:49.960
And that's a fair position to take,

02:11:49.960 --> 02:11:51.720
I think, as a language creator.

02:11:51.720 --> 02:11:54.200
In fact, there's a philosophical question about

02:11:54.200 --> 02:11:56.720
should you have different development packaging managers?

02:11:56.720 --> 02:11:58.440
Should you have a package manager per language?

02:11:58.440 --> 02:11:59.840
Is that really the right approach?

02:11:59.840 --> 02:12:01.920
I think there are some answers of

02:12:01.920 --> 02:12:04.200
it is appropriate to have development tools.

02:12:04.200 --> 02:12:06.040
And there's an aspect of development tool

02:12:06.040 --> 02:12:07.640
that is related to packaging.

02:12:07.640 --> 02:12:10.600
And every language should have some story there

02:12:10.600 --> 02:12:12.120
to help their developers create.

02:12:12.120 --> 02:12:14.960
So you should have language specific development tools.

02:12:14.960 --> 02:12:17.080
Development tools that relate to package managers.

02:12:17.080 --> 02:12:19.480
But then there's a very specific user story

02:12:19.480 --> 02:12:20.680
around package management

02:12:20.680 --> 02:12:22.280
that those language specific package managers

02:12:22.280 --> 02:12:23.600
have to interact with

02:12:23.600 --> 02:12:25.920
and currently aren't doing a good job of that.

02:12:25.920 --> 02:12:27.000
That was one of the challenges

02:12:27.000 --> 02:12:29.160
of not seeing that difference

02:12:29.160 --> 02:12:31.720
and it still exists in the difference today.

02:12:32.240 --> 02:12:34.520
Conda always was a user,

02:12:34.520 --> 02:12:36.560
I'm gonna use Python to do data science.

02:12:36.560 --> 02:12:38.280
I'm gonna use Python to do something.

02:12:38.280 --> 02:12:39.600
How do I get this installed?

02:12:39.600 --> 02:12:41.200
It was always focused on that.

02:12:41.200 --> 02:12:43.920
So it didn't have like a develop.

02:12:43.920 --> 02:12:46.000
Classic example is PIP has a PIP develop.

02:12:46.000 --> 02:12:47.520
It's like, I wanna install this

02:12:47.520 --> 02:12:49.200
into my current development environment today.

02:12:49.200 --> 02:12:51.560
Now, Conda doesn't have that concept

02:12:51.560 --> 02:12:52.880
because it's not part of the story.

02:12:52.880 --> 02:12:54.680
For people who don't know,

02:12:54.680 --> 02:12:59.680
PIP is a Python specific packaging manager.

02:13:01.760 --> 02:13:04.680
That's exceptionally popular.

02:13:04.680 --> 02:13:06.400
That's probably like the default thing you've learned.

02:13:06.400 --> 02:13:07.240
It's the default user.

02:13:07.240 --> 02:13:08.880
Yeah, and so the story there emerged

02:13:08.880 --> 02:13:11.520
because what happened is in 2012,

02:13:11.520 --> 02:13:13.800
we had this meeting at the Googleplex

02:13:13.800 --> 02:13:15.640
and Guido was there to come talk about what we're gonna do,

02:13:15.640 --> 02:13:17.280
how we're gonna make things work better.

02:13:17.280 --> 02:13:20.000
And Wes McKinney, me, Peter,

02:13:20.000 --> 02:13:21.920
Peter has a great photo of me talking to Guido

02:13:21.920 --> 02:13:23.600
and he pretends we're talking about this story.

02:13:23.600 --> 02:13:24.440
Maybe we were, maybe we weren't.

02:13:24.440 --> 02:13:26.360
But we did at that meeting talk about it

02:13:26.360 --> 02:13:27.240
and asked Guido,

02:13:27.240 --> 02:13:29.960
Guido, we need to fix packaging in Python.

02:13:29.960 --> 02:13:31.080
People can't get the stuff.

02:13:31.120 --> 02:13:32.440
And he said, go fix it yourself.

02:13:32.440 --> 02:13:33.600
I don't think we're gonna do it.

02:13:33.600 --> 02:13:35.760
All right.

02:13:35.760 --> 02:13:37.000
The origin story right there.

02:13:37.000 --> 02:13:39.480
All right, you said, okay, you said to do this ourselves.

02:13:39.480 --> 02:13:41.680
So at the same time,

02:13:41.680 --> 02:13:44.640
people did start to work on the packaging story in Python.

02:13:44.640 --> 02:13:45.720
It just took a little longer.

02:13:45.720 --> 02:13:47.440
So in 2012,

02:13:47.440 --> 02:13:49.640
kind of motivated by our training courses we were teaching.

02:13:49.640 --> 02:13:50.480
Like how do we,

02:13:50.480 --> 02:13:52.240
very similar to what you just mentioned about your mother.

02:13:52.240 --> 02:13:54.160
Like it was motivated by the same purpose.

02:13:54.160 --> 02:13:56.080
Like how do we get this into people's hands?

02:13:56.080 --> 02:13:58.600
And it's this big, long process that takes too expensive.

02:13:58.600 --> 02:14:00.280
It was actually hurting NumPy development

02:14:00.280 --> 02:14:02.360
because I would hear people were saying,

02:14:02.360 --> 02:14:03.560
don't make that change to NumPy

02:14:03.560 --> 02:14:05.560
because I just spent a week getting my Python environment.

02:14:05.560 --> 02:14:07.760
And if you change NumPy,

02:14:07.760 --> 02:14:09.240
I have to reinstall everything.

02:14:09.240 --> 02:14:10.960
And reinstalling such a pain, don't do it.

02:14:10.960 --> 02:14:12.200
I'm like, wait, okay.

02:14:12.200 --> 02:14:14.720
So now we're not making changes to a library

02:14:14.720 --> 02:14:16.080
because of the installation problem

02:14:16.080 --> 02:14:17.520
that it'll cause for end users.

02:14:17.520 --> 02:14:19.480
Okay, there's a problem with installation.

02:14:19.480 --> 02:14:20.600
We gotta fix this.

02:14:20.600 --> 02:14:23.840
So we said, we're gonna make a distribution of Python.

02:14:23.840 --> 02:14:26.960
And we'd previously done that at Mthought.

02:14:26.960 --> 02:14:28.560
I wanted to make one that would give away for free

02:14:28.560 --> 02:14:29.840
that everyone could just get.

02:14:30.080 --> 02:14:32.080
That was critical that we could just get it.

02:14:32.080 --> 02:14:33.880
It wasn't tied to a product.

02:14:33.880 --> 02:14:35.400
It was just you could get it.

02:14:35.400 --> 02:14:36.960
And then we had constantly thought about,

02:14:36.960 --> 02:14:39.120
well, do we just leverage RPM?

02:14:39.120 --> 02:14:40.400
But the challenge had always been,

02:14:40.400 --> 02:14:42.280
we want a package manager that works on Windows,

02:14:42.280 --> 02:14:45.040
Mac OS X, and Linux the same, right?

02:14:45.040 --> 02:14:46.600
And it wasn't there.

02:14:46.600 --> 02:14:48.400
Like you don't have anything like that.

02:14:48.400 --> 02:14:49.560
And for people who don't know,

02:14:49.560 --> 02:14:54.560
RPM is an operating system specific package manager.

02:14:54.640 --> 02:14:56.640
Correct, it's an operating specific, yes, exactly.

02:14:56.640 --> 02:15:00.200
Do you create the design questions?

02:15:00.200 --> 02:15:02.280
Do you create an umbrella package manager

02:15:02.280 --> 02:15:03.880
that works across operating systems?

02:15:03.880 --> 02:15:05.720
Yes, that was the decision.

02:15:05.720 --> 02:15:08.120
And the neighboring design questions,

02:15:08.120 --> 02:15:09.960
do you also create a package manager

02:15:09.960 --> 02:15:11.880
that spans multiple programming languages?

02:15:11.880 --> 02:15:12.800
Correct, exactly.

02:15:12.800 --> 02:15:14.320
That was the world we faced.

02:15:14.320 --> 02:15:17.120
And we decided to go multiple operating systems,

02:15:17.120 --> 02:15:19.240
multiple and programming language independent.

02:15:19.240 --> 02:15:20.600
Because even Python,

02:15:20.600 --> 02:15:22.520
and particularly what was important was,

02:15:22.520 --> 02:15:24.960
SciPy has a bunch of Fortran in it, right?

02:15:24.960 --> 02:15:27.800
And Scikit-learn has links to a bunch of C++.

02:15:27.800 --> 02:15:30.000
There's a lot of compiled code.

02:15:30.000 --> 02:15:31.440
And the Python package managers,

02:15:31.440 --> 02:15:34.360
especially early on, didn't even support that.

02:15:34.360 --> 02:15:38.520
So in 2000, so we released Anaconda,

02:15:38.520 --> 02:15:40.000
which was just a distribution of libraries,

02:15:40.000 --> 02:15:42.520
but we started to work on Conda in 2012.

02:15:42.520 --> 02:15:44.720
First version of Conda came out in early 2013,

02:15:44.720 --> 02:15:47.880
summer of 2013, and it was a package manager.

02:15:47.880 --> 02:15:49.600
So you could say Conda install Scikit-learn.

02:15:49.600 --> 02:15:51.080
In fact, that was the,

02:15:51.080 --> 02:15:54.040
Scikit-learn was a fantastic project that had emerged.

02:15:54.280 --> 02:15:57.120
It was the classic example of the Scikits.

02:15:57.120 --> 02:15:59.760
I talked to me earlier about SciPy being too big

02:15:59.760 --> 02:16:01.240
to be a single library.

02:16:01.240 --> 02:16:02.640
Well, what the community had done is said,

02:16:02.640 --> 02:16:04.160
let's make Scikits.

02:16:04.160 --> 02:16:05.840
And there's Scikit-image, there's Scikit-learn,

02:16:05.840 --> 02:16:07.640
there's a lot of Scikits.

02:16:07.640 --> 02:16:10.200
And it was a fantastic move that the community did.

02:16:10.200 --> 02:16:11.480
I didn't do it.

02:16:11.480 --> 02:16:12.560
I was like, okay, that's a good idea.

02:16:12.560 --> 02:16:13.520
I didn't like the name.

02:16:13.520 --> 02:16:15.480
I didn't like the fact you type Scikit-image.

02:16:15.480 --> 02:16:17.400
I was like, that's gotta be simpler.

02:16:17.400 --> 02:16:19.800
SK-learn, we gotta make that a little smaller.

02:16:19.800 --> 02:16:21.920
I don't like typing all this stuff from imports.

02:16:21.920 --> 02:16:23.240
So I was kind of a pressure that way.

02:16:23.240 --> 02:16:24.720
But I love the energy.

02:16:24.720 --> 02:16:26.200
I love the fact that they went out and they did it

02:16:26.200 --> 02:16:27.560
and lots of people, Jared Millman,

02:16:27.560 --> 02:16:29.400
and then of course, Gael,

02:16:29.400 --> 02:16:31.280
and there's people I'm not even naming.

02:16:31.280 --> 02:16:34.640
Scikit-learn really emerged this fantastic project.

02:16:34.640 --> 02:16:36.480
And the documentation around that is also incredible.

02:16:36.480 --> 02:16:37.840
And the fact that it was incredible, exactly.

02:16:37.840 --> 02:16:40.160
I don't know who did that, but they did a great job.

02:16:40.160 --> 02:16:41.440
A lot of people in Inria,

02:16:41.440 --> 02:16:44.600
a lot of people, a lot of European contributors.

02:16:44.600 --> 02:16:47.120
Andreas, there's some Andreas in the US.

02:16:47.120 --> 02:16:48.920
There's a lot of just people I just adore.

02:16:48.920 --> 02:16:51.200
I think they're amazing people.

02:16:51.200 --> 02:16:52.480
Awesome use of SciPy, right?

02:16:52.480 --> 02:16:54.240
I love the fact that they were using SciPy,

02:16:54.240 --> 02:16:55.320
effectively do something I love,

02:16:55.320 --> 02:16:57.200
which is machine learning.

02:16:57.200 --> 02:16:59.040
But couldn't install it.

02:16:59.040 --> 02:17:00.680
Because there's so many pieces involved.

02:17:00.680 --> 02:17:02.240
So many dependencies, right?

02:17:02.240 --> 02:17:05.480
So our use case of Conda was Conda install Scikit-learn.

02:17:06.520 --> 02:17:11.520
And it was the best way to install Scikit-learn in 2013,

02:17:12.200 --> 02:17:15.480
to really 2018, 17, 18.

02:17:15.480 --> 02:17:16.840
PIP finally caught up.

02:17:16.840 --> 02:17:19.480
I still think it's you should Conda install Scikit-learn

02:17:19.480 --> 02:17:20.480
for the PIP install Scikit-learn,

02:17:20.480 --> 02:17:22.320
but you can PIP install Scikit-learn.

02:17:23.160 --> 02:17:24.800
The issue is the package they created was wheels,

02:17:24.800 --> 02:17:27.400
and PIP does not handle the multi-vendor approach.

02:17:27.400 --> 02:17:29.480
They don't handle the fact you have C++ libraries

02:17:29.480 --> 02:17:30.560
you're depending on.

02:17:30.560 --> 02:17:32.240
They just stop at the Python boundary.

02:17:32.240 --> 02:17:34.200
And so what you have to do in the wheel world

02:17:34.200 --> 02:17:36.160
is you have to vendor.

02:17:36.160 --> 02:17:38.560
You have to take all of the binary and vendor it.

02:17:38.560 --> 02:17:41.360
Now, if your change happens in early dependency,

02:17:41.360 --> 02:17:43.200
you have to redo the whole wheel.

02:17:43.200 --> 02:17:45.680
So TensorFlow is a good example of a,

02:17:45.680 --> 02:17:47.400
you should not PIP install TensorFlow.

02:17:47.400 --> 02:17:48.240
It's a terrible idea.

02:17:48.240 --> 02:17:51.520
People do it because the popularity of PIP,

02:17:51.520 --> 02:17:52.440
many people think, oh, of course,

02:17:52.440 --> 02:17:54.320
that's how I install everything in Python.

02:17:54.320 --> 02:17:56.840
Yeah, this is one of the big challenges.

02:17:56.840 --> 02:18:00.720
You take a GitHub repository or just a basic blog post.

02:18:00.720 --> 02:18:03.640
The number of time PIP is mentioned over Conda

02:18:03.640 --> 02:18:05.480
is like 100X to one.

02:18:05.480 --> 02:18:06.320
Correct, correct.

02:18:06.320 --> 02:18:07.160
So it just has to do with the-

02:18:07.160 --> 02:18:08.040
And that was increasing.

02:18:08.040 --> 02:18:10.320
It wasn't true early because PIP didn't exist.

02:18:10.320 --> 02:18:11.680
Like Conda came first.

02:18:11.680 --> 02:18:13.120
So, but that's like the long tail

02:18:13.120 --> 02:18:15.960
of the internet documentation, user generated.

02:18:15.960 --> 02:18:19.240
So that, like you think, how do I install Google?

02:18:19.240 --> 02:18:20.520
How do I install TensorFlow?

02:18:20.520 --> 02:18:23.080
You're just not gonna see Conda in that first page.

02:18:23.080 --> 02:18:24.200
Correct, exactly.

02:18:24.200 --> 02:18:25.040
And that-

02:18:25.040 --> 02:18:29.480
Not today, you would have in 2016, 2017.

02:18:29.480 --> 02:18:32.160
And it's sad because you saw the,

02:18:32.160 --> 02:18:34.240
Conda solves a lot of usability issues.

02:18:34.240 --> 02:18:35.080
Correct.

02:18:35.080 --> 02:18:36.560
Like for, especially super challenging thing.

02:18:36.560 --> 02:18:37.400
I don't know.

02:18:37.400 --> 02:18:39.880
One of the big pain points for me was just

02:18:39.880 --> 02:18:43.720
on the computer vision side, OpenCV installation that-

02:18:43.720 --> 02:18:44.760
Perfect example, yes.

02:18:44.760 --> 02:18:47.480
I think Conda is, I don't know if Conda has solved that one.

02:18:47.480 --> 02:18:49.120
Conda has an OpenCV package.

02:18:49.120 --> 02:18:49.960
I don't know.

02:18:49.960 --> 02:18:53.480
I certainly know PIP has not solved.

02:18:53.480 --> 02:18:55.880
I mean, there's complexities there because-

02:18:55.880 --> 02:18:56.720
Right.

02:18:56.720 --> 02:18:57.680
I actually don't know.

02:18:57.680 --> 02:18:59.160
I should probably know a good answer for this.

02:18:59.160 --> 02:19:03.320
But, you know, if you compile OpenCV

02:19:03.320 --> 02:19:05.480
with certain dependencies,

02:19:05.480 --> 02:19:07.480
you'll be able to do certain things.

02:19:07.480 --> 02:19:09.880
So there's this kind of flexibility of what you,

02:19:09.880 --> 02:19:13.160
like what options you compile with.

02:19:13.160 --> 02:19:17.840
And I don't think it's trivial to do that with Conda or-

02:19:17.840 --> 02:19:20.600
So Conda has a notion of variance of a package.

02:19:20.600 --> 02:19:23.200
You can actually have different compilation versions

02:19:23.200 --> 02:19:24.040
of a package.

02:19:24.040 --> 02:19:24.880
So not just the versions different,

02:19:24.880 --> 02:19:26.960
but, oh, this is compiled with these optimizations on it.

02:19:26.960 --> 02:19:28.280
So Conda does have an answer.

02:19:28.280 --> 02:19:29.120
As a flavors, yeah.

02:19:29.120 --> 02:19:30.160
As a flavors, basically.

02:19:30.160 --> 02:19:32.440
Well, PIP, as far as I know, does not have flavors.

02:19:32.440 --> 02:19:33.360
No, no.

02:19:33.360 --> 02:19:36.520
PIP generally hasn't thought deeply

02:19:36.520 --> 02:19:38.440
about the binary dependency problem, right?

02:19:38.440 --> 02:19:41.920
And that's why fundamentally it doesn't work

02:19:41.920 --> 02:19:43.680
for the SciPy ecosystem.

02:19:43.680 --> 02:19:46.200
It barely, you can sort of paper over it and duct tape

02:19:46.200 --> 02:19:48.120
and it kind of works until it doesn't

02:19:48.120 --> 02:19:49.600
and it falls apart entirely.

02:19:49.600 --> 02:19:51.600
So it's been a mixed bag.

02:19:51.600 --> 02:19:54.440
Like, and I've been having lots of conversations

02:19:54.440 --> 02:19:56.200
with people over the years because again,

02:19:56.200 --> 02:19:58.440
it's an area where if you understand some things,

02:19:58.440 --> 02:19:59.280
but not all the things,

02:19:59.280 --> 02:20:02.240
but they've done a great job of community appeal.

02:20:02.240 --> 02:20:05.000
This is an area where I think Anaconda

02:20:05.000 --> 02:20:07.080
as a company needed to do some things

02:20:07.080 --> 02:20:10.520
in order to make Conda more community centric, right?

02:20:10.520 --> 02:20:13.120
And this is a, I talk about this all the time.

02:20:13.120 --> 02:20:15.120
There's a balance between,

02:20:15.640 --> 02:20:17.800
every project starts with what I called company-backed

02:20:17.800 --> 02:20:19.520
open source, even if the company is yourself,

02:20:19.520 --> 02:20:23.400
it's just one person, just doing business ads.

02:20:23.400 --> 02:20:26.120
But ultimately for projects to succeed virally

02:20:26.120 --> 02:20:28.360
and become massive influencers,

02:20:28.360 --> 02:20:29.200
they have to create,

02:20:29.200 --> 02:20:30.560
they have to get community people on board.

02:20:30.560 --> 02:20:32.160
They have to get other people on board.

02:20:32.160 --> 02:20:33.720
So it has to become community driven.

02:20:33.720 --> 02:20:35.600
And a big part of that is engagement with those people,

02:20:35.600 --> 02:20:38.640
empowering people, governance around it.

02:20:38.640 --> 02:20:40.600
And there was, and what happened with Conda

02:20:40.600 --> 02:20:42.080
in the early days, PIP emerged

02:20:42.080 --> 02:20:45.000
and we did do some good things, Conda Forge,

02:20:45.880 --> 02:20:48.200
Conda Forge community is sort of the community

02:20:48.200 --> 02:20:49.880
recipe creation community.

02:20:49.880 --> 02:20:52.160
But Conda itself, I still believe,

02:20:52.160 --> 02:20:55.120
and Peter is CEO of Anaconda, he's my co-founder.

02:20:55.120 --> 02:20:58.160
I ran Anaconda until 2017, 2018.

02:20:58.160 --> 02:21:00.040
Is Peter still in Anaconda? Peter's still in Anaconda.

02:21:00.040 --> 02:21:02.560
We're still great friends, we talk all the time.

02:21:02.560 --> 02:21:03.640
I love him to death.

02:21:03.640 --> 02:21:06.040
There's a long story there about like why and how,

02:21:06.040 --> 02:21:08.640
and we can cover in some other podcasts, perhaps.

02:21:08.640 --> 02:21:09.480
Yeah.

02:21:09.480 --> 02:21:11.400
It's sort of a more, maybe a more business focused one.

02:21:11.400 --> 02:21:15.160
But there's one area where I think Conda

02:21:15.160 --> 02:21:17.280
should be more community driven.

02:21:17.280 --> 02:21:18.960
Like he should be pushing more

02:21:18.960 --> 02:21:21.200
to get more community contributors to Conda

02:21:21.200 --> 02:21:26.200
and let the, Anaconda shouldn't be fighting this battle.

02:21:26.640 --> 02:21:28.600
It's actually, it's really a developers.

02:21:28.600 --> 02:21:30.440
Like you said, like help the developers

02:21:30.440 --> 02:21:32.440
and then they'll actually move us the right direction.

02:21:32.440 --> 02:21:34.720
That was the problem I have is many of the cool kids

02:21:34.720 --> 02:21:36.520
I know don't use Conda.

02:21:36.520 --> 02:21:38.880
And that to me is confusing.

02:21:38.880 --> 02:21:39.800
It is confusing.

02:21:39.800 --> 02:21:42.640
It's really a matter of, Conda has some challenges.

02:21:42.640 --> 02:21:44.080
First of all, Conda still needs to be improved.

02:21:44.080 --> 02:21:45.280
There's lots of improvements to be made.

02:21:45.280 --> 02:21:47.600
And that it's that aspect of wait, who's doing this.

02:21:47.600 --> 02:21:50.960
And the fact that then the Pi PA really stepped up.

02:21:50.960 --> 02:21:53.400
Like they were not solving the problem at all.

02:21:53.400 --> 02:21:55.640
And now they kind of got to where they're solving it

02:21:55.640 --> 02:21:56.720
for the most part.

02:21:56.720 --> 02:21:58.160
And then effectively you could get,

02:21:58.160 --> 02:22:00.360
like Conda solved a problem that was there

02:22:00.360 --> 02:22:01.200
and it still does.

02:22:01.200 --> 02:22:03.960
And it's still, there's still great things it can do.

02:22:03.960 --> 02:22:07.160
But, and we still use it all the time at Quonsight

02:22:07.200 --> 02:22:08.040
with other clients.

02:22:08.040 --> 02:22:10.760
But with, but you can kind of do similar things

02:22:10.760 --> 02:22:12.760
with PIP and Docker, right?

02:22:12.760 --> 02:22:15.360
So especially with the web development community,

02:22:15.360 --> 02:22:17.120
that part of it again is the,

02:22:17.120 --> 02:22:19.200
there's a lot of different kinds of developers

02:22:19.200 --> 02:22:20.240
in the Python ecosystem.

02:22:20.240 --> 02:22:23.760
And there's still a lack of some clear understanding.

02:22:23.760 --> 02:22:25.360
I go to the Python conference all the time

02:22:25.360 --> 02:22:28.320
and there's only a few people in the Pi PA who get it.

02:22:28.320 --> 02:22:30.720
And then others who are just massively trumpeting

02:22:30.720 --> 02:22:32.880
the power of PIP, but just do not understand the problem.

02:22:32.880 --> 02:22:36.080
Yeah, so one of the obvious things to me from a mom,

02:22:36.080 --> 02:22:37.880
from a non-programmer perspective

02:22:37.880 --> 02:22:41.800
is the across operating system usability

02:22:41.800 --> 02:22:42.720
that's much more natural.

02:22:42.720 --> 02:22:45.040
So there's people that use Windows

02:22:45.040 --> 02:22:49.120
and just, it seems much easier to recommend Conda there.

02:22:49.120 --> 02:22:51.880
But then it, you should also recommend it across the board.

02:22:51.880 --> 02:22:53.600
So I'll definitely sort of-

02:22:53.600 --> 02:22:55.360
But what I recommend now is a hybrid.

02:22:55.360 --> 02:22:56.720
I do, I mean, I have no problem with PIP.

02:22:56.720 --> 02:22:57.840
Is it possible to use?

02:22:57.840 --> 02:22:58.800
Oh, it is, it is.

02:22:58.800 --> 02:23:01.640
What I, like build the environment with PIP with Conda,

02:23:01.640 --> 02:23:03.400
build an environment with Conda,

02:23:03.400 --> 02:23:05.360
and then PIP install on top of that, that's fine.

02:23:05.360 --> 02:23:09.880
Be careful about PIP installing OpenCV or TensorFlow or,

02:23:09.880 --> 02:23:11.400
because if somebody's allowed that,

02:23:11.400 --> 02:23:13.080
it's gonna be most surely done

02:23:13.080 --> 02:23:15.160
in a way that can't be updated that easily.

02:23:15.160 --> 02:23:17.720
So install like the big packages,

02:23:17.720 --> 02:23:21.640
the infrastructure with Conda, and then the weirdos

02:23:21.640 --> 02:23:24.760
that like the weird like implementation for some.

02:23:24.760 --> 02:23:28.480
I had a, there's a cool library I used

02:23:28.480 --> 02:23:33.560
that based on your location and time of day and date

02:23:33.560 --> 02:23:36.240
tells you the exact position of the sun relative

02:23:36.240 --> 02:23:38.200
to the earth.

02:23:38.200 --> 02:23:39.760
And it's just like a simple library,

02:23:39.760 --> 02:23:41.400
but it's very precise.

02:23:41.400 --> 02:23:42.240
And I was like, all right.

02:23:42.240 --> 02:23:45.160
But that was, and it's PIP.

02:23:45.160 --> 02:23:48.640
Well, the thing they did really well is Python developers

02:23:48.640 --> 02:23:50.120
who wanna get their stuff published,

02:23:50.120 --> 02:23:52.920
they, you have to have a PIP recipe, right?

02:23:52.920 --> 02:23:56.480
I mean, even if it's, you know, the challenge is,

02:23:56.480 --> 02:23:58.840
and there's a key thing that needs to be added to PIP,

02:23:58.840 --> 02:24:00.160
just simply add the PIP,

02:24:00.160 --> 02:24:03.480
the ability to defer to a system package manager.

02:24:04.320 --> 02:24:05.160
Like, cause it's, you know,

02:24:05.160 --> 02:24:07.320
recognize you're not gonna solve all the dependency problem.

02:24:07.320 --> 02:24:12.320
So let like give up and allow the system packager to work.

02:24:12.440 --> 02:24:15.200
That way Anaconda is installed and it has PIP,

02:24:15.200 --> 02:24:17.000
it would default to Conda to install its stuff.

02:24:17.000 --> 02:24:19.280
But Red Hat RPM would default to RPM

02:24:19.280 --> 02:24:20.640
to install some more things.

02:24:20.640 --> 02:24:23.520
Like that's the, that's a key, not difficult,

02:24:23.520 --> 02:24:26.000
but somewhat where some work feature needs to be added.

02:24:26.000 --> 02:24:27.480
That's an example of something like,

02:24:27.480 --> 02:24:28.640
I've known we need to root and do it.

02:24:28.640 --> 02:24:30.960
I mean, it's where I wish I had more money.

02:24:30.960 --> 02:24:33.520
I wish I was more successful in the business side,

02:24:33.520 --> 02:24:35.080
trying to get there, but I wish my, you know,

02:24:35.080 --> 02:24:37.360
my family, friends, and full community that I know-

02:24:37.360 --> 02:24:38.200
Was larger.

02:24:38.200 --> 02:24:39.360
Was larger and had more money

02:24:39.360 --> 02:24:42.720
cause I know tons of things to do effectively

02:24:42.720 --> 02:24:46.520
with more resources, but you know,

02:24:46.520 --> 02:24:49.240
I have not yet been successful at channel, tons of it.

02:24:49.240 --> 02:24:51.520
There are some, you know, I'm happy with what we've done.

02:24:51.520 --> 02:24:54.880
We've created again at Quantysite

02:24:54.880 --> 02:24:56.520
what we created to get Anaconda started.

02:24:56.520 --> 02:24:58.200
We created community analytics to get Anaconda started,

02:24:58.200 --> 02:25:00.520
done it again with Quantysite, super excited by that.

02:25:00.840 --> 02:25:02.200
It took three years to do it.

02:25:02.200 --> 02:25:03.200
What is Quantysite?

02:25:03.200 --> 02:25:04.440
What is its mission?

02:25:04.440 --> 02:25:06.440
We've talked a few times about different,

02:25:06.440 --> 02:25:08.920
fascinating aspects of it, but it's like big picture.

02:25:08.920 --> 02:25:10.240
What is Quantysite?

02:25:10.240 --> 02:25:13.480
Quantysite is, its mission is to connect data

02:25:13.480 --> 02:25:14.480
to an open economy.

02:25:14.480 --> 02:25:17.680
So it's basically consulting the pie data ecosystem, right?

02:25:17.680 --> 02:25:19.280
It's a consulting company.

02:25:19.280 --> 02:25:20.840
And what I've said when I started it

02:25:20.840 --> 02:25:24.680
was we're trying to create products, people, and technology.

02:25:24.680 --> 02:25:28.320
So it's divided into two groups and a third one as well.

02:25:28.320 --> 02:25:30.360
The two groups are a consulting services company

02:25:30.360 --> 02:25:31.960
that just helps people do data science

02:25:31.960 --> 02:25:35.080
and data engineering and data management better

02:25:35.080 --> 02:25:35.920
and more efficiently.

02:25:35.920 --> 02:25:36.760
Like full stack, like full thing.

02:25:36.760 --> 02:25:38.200
Full stack, full science, full thing.

02:25:38.200 --> 02:25:40.040
We'll help you build a infrastructure

02:25:40.040 --> 02:25:40.880
if you're using Jupiter.

02:25:40.880 --> 02:25:42.880
We need, we do staff augmentation,

02:25:42.880 --> 02:25:44.880
need more programmers, help you use DAS more effectively,

02:25:44.880 --> 02:25:46.520
help you use GPUs more effectively.

02:25:46.520 --> 02:25:48.400
Just basically a lot of people need help.

02:25:48.400 --> 02:25:50.800
So we do training as well to help people, you know,

02:25:50.800 --> 02:25:55.000
both immediate help and then get, learn from somebody.

02:25:55.840 --> 02:25:57.080
We've added a bunch of stuff too.

02:25:57.080 --> 02:25:58.600
We've kind of separated some of these other things

02:25:58.600 --> 02:26:00.120
into another company called OpenTeams

02:26:00.960 --> 02:26:01.800
that we currently started.

02:26:01.800 --> 02:26:03.400
One of the things I loved about what we did at Anaconda

02:26:03.400 --> 02:26:05.520
was creating a community innovation team.

02:26:05.520 --> 02:26:06.720
And so I wanted to replicate that.

02:26:06.720 --> 02:26:09.400
This time we did a lot of innovation at Anaconda.

02:26:09.400 --> 02:26:10.640
I wanted to do innovation,

02:26:10.640 --> 02:26:13.720
but also contribute to the projects that existed.

02:26:13.720 --> 02:26:16.480
Like create a place where maintainers,

02:26:16.480 --> 02:26:18.520
so the SciPy and NumPy and NumPy

02:26:18.520 --> 02:26:20.440
and all these projects we already started

02:26:20.440 --> 02:26:22.720
can pay people to work on them and keep them going.

02:26:22.720 --> 02:26:23.560
So that's Labs.

02:26:23.560 --> 02:26:26.000
QuantSight Labs is a separate organization.

02:26:26.000 --> 02:26:28.080
It's a nonprofit mission.

02:26:28.080 --> 02:26:29.960
The profits of QuantSight help fund it

02:26:30.800 --> 02:26:33.280
and in fact, every project that we have at QuantSight,

02:26:33.280 --> 02:26:36.080
a portion of the money goes directly to QuantSight Labs

02:26:36.080 --> 02:26:37.080
to help keep it funded.

02:26:37.080 --> 02:26:38.360
So we've gotten several mechanisms

02:26:38.360 --> 02:26:40.080
to keep QuantSight Labs funded.

02:26:40.080 --> 02:26:42.000
And currently, so I'm really excited about Labs

02:26:42.000 --> 02:26:43.720
because it's been a mission for a long time.

02:26:43.720 --> 02:26:45.280
What kind of projects are within Labs?

02:26:45.280 --> 02:26:47.720
So Labs is working to make the software better,

02:26:47.720 --> 02:26:49.480
like make NumPy better, make SciPy better,

02:26:49.480 --> 02:26:52.360
it only works on open source.

02:26:52.360 --> 02:26:54.360
So, you know, if somebody wants to,

02:26:54.360 --> 02:26:55.440
so, you know, companies do,

02:26:55.440 --> 02:26:57.480
we have a thing called a community work order, we call it.

02:26:57.480 --> 02:26:59.960
If a company says, I want to make Spyder better.

02:26:59.960 --> 02:27:01.640
Okay, cool.

02:27:01.640 --> 02:27:05.400
You can pay for a month of a developer of Spyder

02:27:05.400 --> 02:27:07.920
or a developer of NumPy or a developer of SciPy.

02:27:07.920 --> 02:27:09.760
You're not, you can't tell them what you want them to do.

02:27:09.760 --> 02:27:10.960
You can give them your priorities

02:27:10.960 --> 02:27:12.720
and things you wish existed.

02:27:12.720 --> 02:27:15.280
And they'll work on those priorities

02:27:15.280 --> 02:27:17.440
with the community to get what the community wants

02:27:17.440 --> 02:27:18.800
and what emerges what the community wants.

02:27:18.800 --> 02:27:21.080
Is there some aspect on the consulting side

02:27:21.080 --> 02:27:24.320
that is helping as we were talking about morphology

02:27:24.320 --> 02:27:26.560
and so on, is there specific application

02:27:26.560 --> 02:27:29.080
that are particularly like driving,

02:27:29.080 --> 02:27:31.600
sort of inspiring the need for updates

02:27:31.600 --> 02:27:32.440
to SciPy and NumPy and all that stuff?

02:27:32.440 --> 02:27:33.280
Correct, absolutely, absolutely.

02:27:33.280 --> 02:27:34.520
GPUs are absolutely one of them.

02:27:34.520 --> 02:27:35.360
GPUs.

02:27:35.360 --> 02:27:36.800
And new hardware beyond GPUs.

02:27:36.800 --> 02:27:38.640
I mean, Tesla's Dojo chip,

02:27:38.640 --> 02:27:42.160
I'm hoping we'll have a chance to work on that perhaps.

02:27:42.160 --> 02:27:43.800
Things like that are definitely driving it.

02:27:43.800 --> 02:27:47.600
The other thing is driving is scalable, like speed and scale.

02:27:47.600 --> 02:27:50.320
How do I write NumPy code or NumPy Lite code

02:27:50.320 --> 02:27:52.120
if I want it to run across a cluster?

02:27:52.120 --> 02:27:54.200
You know, well, that's Dask or maybe it's Ray.

02:27:54.200 --> 02:27:56.320
I mean, there's sort of ways to do that now

02:27:57.080 --> 02:27:58.360
or there's mode in and there's,

02:27:58.360 --> 02:28:01.000
so pandas code, NumPy code, SciPy code,

02:28:01.000 --> 02:28:03.280
Scikit-learn code that I want to scale.

02:28:03.280 --> 02:28:04.920
So that's one big area.

02:28:04.920 --> 02:28:06.600
Have you gotten the chance to chat

02:28:06.600 --> 02:28:09.880
with Andre and Elon about, because like-

02:28:09.880 --> 02:28:11.400
No, I would love to, by the way.

02:28:11.400 --> 02:28:12.320
I would not, but I'd love to.

02:28:12.320 --> 02:28:15.560
I just saw their Tesla AI days video.

02:28:15.560 --> 02:28:16.400
Super exciting.

02:28:16.400 --> 02:28:18.600
So this one of the, you know, I love great engineering,

02:28:18.600 --> 02:28:21.000
software engineering teams and engineering teams in general

02:28:21.000 --> 02:28:23.040
and they're doing a lot of incredible stuff with Python.

02:28:23.040 --> 02:28:24.000
They're like- They are.

02:28:24.000 --> 02:28:26.360
They're revolutionizing so many aspects

02:28:26.360 --> 02:28:28.800
of the machine learning pipeline-

02:28:28.800 --> 02:28:29.640
I agree.

02:28:29.640 --> 02:28:30.600
That's operating in the real world

02:28:30.600 --> 02:28:31.880
and so much of that is Python.

02:28:31.880 --> 02:28:34.040
Like you said, the guy running, you know,

02:28:34.040 --> 02:28:37.400
Andre Kapathi running Autopilot is tweeting

02:28:37.400 --> 02:28:41.200
about optimization of NumPy versus-

02:28:41.200 --> 02:28:42.920
I would love to talk to him.

02:28:42.920 --> 02:28:44.160
In fact, we have at Quantysite,

02:28:44.160 --> 02:28:46.240
we've been fortunate enough to work with Facebook

02:28:46.240 --> 02:28:47.600
on PyTorch directly.

02:28:47.600 --> 02:28:49.920
So we have about 13 developers at Quantysite.

02:28:49.920 --> 02:28:52.600
Some of them are in labs working directly on PyTorch.

02:28:52.600 --> 02:28:53.440
On PyTorch.

02:28:53.440 --> 02:28:54.280
On PyTorch, right.

02:28:54.280 --> 02:28:55.720
So basically when we started Quantysite,

02:28:55.720 --> 02:28:57.160
I went to both TensorFlow and PyTorch and said,

02:28:57.160 --> 02:29:00.240
hey, I want to help connect what you're doing

02:29:00.240 --> 02:29:01.960
to the broader SciPy ecosystem

02:29:01.960 --> 02:29:03.240
because I see what you're doing.

02:29:03.240 --> 02:29:04.240
We have this bigger mission

02:29:04.240 --> 02:29:06.760
and we want to make sure we don't lose energy here.

02:29:06.760 --> 02:29:09.880
So, and Facebook responded really positively

02:29:09.880 --> 02:29:12.440
and I didn't get the same reaction.

02:29:12.440 --> 02:29:13.280
Not yet.

02:29:13.280 --> 02:29:14.120
Not yet.

02:29:14.120 --> 02:29:15.960
I love the folks at TensorFlow.

02:29:15.960 --> 02:29:17.520
I really love the folks at TensorFlow too.

02:29:17.520 --> 02:29:18.520
They're fantastic.

02:29:18.520 --> 02:29:21.160
I think it's the, just how it integrates

02:29:21.160 --> 02:29:22.000
with their business.

02:29:22.080 --> 02:29:23.800
Like I said, there's a lot of reasons.

02:29:23.800 --> 02:29:25.720
Just the timing, the integration with their business,

02:29:25.720 --> 02:29:27.160
what they're looking for.

02:29:27.160 --> 02:29:28.760
They're probably looking for more users

02:29:28.760 --> 02:29:31.600
and I was looking to kind of cut some development effort

02:29:31.600 --> 02:29:33.840
and they couldn't receive that as easily, I think.

02:29:33.840 --> 02:29:36.000
So I'm hoping, I'm really hopeful

02:29:36.000 --> 02:29:37.640
and love the people there.

02:29:37.640 --> 02:29:39.800
What's the idea behind OpenTeams?

02:29:39.800 --> 02:29:41.960
So OpenTeams, I'm super excited about OpenTeams

02:29:41.960 --> 02:29:43.400
because it's one of the,

02:29:43.400 --> 02:29:46.760
I mentioned my idea for investing directly in open source.

02:29:46.760 --> 02:29:48.880
So that's a concept called Fair OSS.

02:29:48.880 --> 02:29:51.000
But one of the things we, when we started Quantysite,

02:29:51.000 --> 02:29:53.680
we knew we would do is we develop products and ideas

02:29:53.680 --> 02:29:55.440
and new companies might come out.

02:29:55.440 --> 02:29:57.680
At Anaconda, this was clear, right?

02:29:57.680 --> 02:30:00.240
Anaconda, we did so much innovation

02:30:00.240 --> 02:30:02.920
that like five or six companies could have come out of that.

02:30:02.920 --> 02:30:05.000
And we just didn't structure it so they could.

02:30:05.000 --> 02:30:05.840
But in fact, they have.

02:30:05.840 --> 02:30:09.080
You look at Dask, there's two companies coming out of Dask.

02:30:09.080 --> 02:30:10.040
Bokeh could be a company.

02:30:10.040 --> 02:30:11.720
There's like lots of companies that could exist

02:30:11.720 --> 02:30:13.120
off the work we did there.

02:30:13.120 --> 02:30:16.080
And so I thought, oh, here's a recipe for an incubation,

02:30:16.080 --> 02:30:19.480
a concept that we could actually spawn new companies

02:30:19.480 --> 02:30:20.800
and new innovations.

02:30:21.640 --> 02:30:22.840
And then the idea has always been,

02:30:22.840 --> 02:30:24.720
well, money they earn should come back

02:30:24.720 --> 02:30:26.560
to fund the open source project.

02:30:26.560 --> 02:30:29.880
So labs is, I think there should be a lot of things

02:30:29.880 --> 02:30:30.760
like Quantysite Labs.

02:30:30.760 --> 02:30:32.600
I think this concept is one that scales.

02:30:32.600 --> 02:30:35.160
You could have a lot of open source research labs.

02:30:35.160 --> 02:30:36.600
Along the way, so in 2018,

02:30:36.600 --> 02:30:38.600
when the bigger idea came how to make open source investable,

02:30:38.600 --> 02:30:41.160
I said, oh, I need to write, I need to create a venture fund.

02:30:41.160 --> 02:30:43.880
So we created a venture fund called Quantysite Initiate

02:30:43.880 --> 02:30:44.720
at the same time.

02:30:44.720 --> 02:30:46.560
It's an angel fund really.

02:30:46.560 --> 02:30:47.880
We started to learn that process.

02:30:47.880 --> 02:30:48.720
How do we actually do this?

02:30:48.720 --> 02:30:49.560
How do we get LPs?

02:30:49.560 --> 02:30:50.640
How do we actually go in this direction?

02:30:51.480 --> 02:30:52.480
And build a fund.

02:30:52.480 --> 02:30:54.280
And I'm like, every venture fund should have

02:30:54.280 --> 02:30:55.720
an associated open source research lab.

02:30:55.720 --> 02:30:56.560
There's just no reason.

02:30:56.560 --> 02:31:00.360
Like our venture fund, the carried interest portion of it

02:31:00.360 --> 02:31:01.840
goes to the lab.

02:31:01.840 --> 02:31:03.280
It directly will fund the lab.

02:31:03.280 --> 02:31:04.120
That's fascinating, brother.

02:31:04.120 --> 02:31:06.800
So you use the power of the organic formation of teams

02:31:06.800 --> 02:31:08.400
in the open source community,

02:31:08.400 --> 02:31:12.640
and then like naturally that leads to a business

02:31:12.640 --> 02:31:13.960
that can make money.

02:31:13.960 --> 02:31:14.800
Yeah, correct.

02:31:14.800 --> 02:31:16.040
And then it always maintains

02:31:16.040 --> 02:31:17.480
and loops back to the open source.

02:31:17.480 --> 02:31:18.320
Loops back to the open source, exactly.

02:31:18.320 --> 02:31:19.680
And to me, it's a natural fit.

02:31:20.400 --> 02:31:22.360
There's absolutely a repeatable pattern there.

02:31:22.360 --> 02:31:24.760
And it's also beneficial because,

02:31:24.760 --> 02:31:27.480
oh, I have natural connections to the open source.

02:31:27.480 --> 02:31:29.240
If I have an open source research lab,

02:31:29.240 --> 02:31:31.920
like they'll all be out there talking to people.

02:31:31.920 --> 02:31:34.600
And so we've had a chance to talk

02:31:34.600 --> 02:31:35.920
to a lot of early stage companies.

02:31:35.920 --> 02:31:37.880
And our fund focused on the early stage.

02:31:37.880 --> 02:31:41.880
So Quantysite has the services, the lab, the fund, right?

02:31:41.880 --> 02:31:44.240
In that process, a lot of stuff started to happen.

02:31:44.240 --> 02:31:45.080
They're like, oh, you know,

02:31:45.080 --> 02:31:48.080
we started to do recruiting and support and training.

02:31:48.120 --> 02:31:50.240
And I was starting to build a bigger sales team

02:31:50.240 --> 02:31:52.920
and marketing team and people besides just developers.

02:31:52.920 --> 02:31:54.120
And one of the challenges with that

02:31:54.120 --> 02:31:56.040
is you end up with different cultural aspects.

02:31:56.040 --> 02:31:58.840
You know, developers, you know, there's a,

02:31:58.840 --> 02:32:00.800
in any company you go to, you can kind of go look,

02:32:00.800 --> 02:32:03.120
is this a business led company, a developer led company?

02:32:03.120 --> 02:32:04.360
Do they kind of coexist?

02:32:04.360 --> 02:32:06.200
Are they, what's the interface between them?

02:32:06.200 --> 02:32:07.360
There's always a bit of a tension there,

02:32:07.360 --> 02:32:08.800
like we were talking about before.

02:32:08.800 --> 02:32:10.240
You know, what is the tension there?

02:32:10.240 --> 02:32:11.400
With open teams, I thought, wait a minute,

02:32:11.400 --> 02:32:13.200
we can actually just create,

02:32:13.200 --> 02:32:15.600
like this concept of Quantysite plus labs,

02:32:16.280 --> 02:32:18.480
while it's specific to the Pydata ecosystem,

02:32:18.480 --> 02:32:20.840
the concept is general for all open source.

02:32:20.840 --> 02:32:22.520
So open teams emerged as a,

02:32:22.520 --> 02:32:24.400
oh, we can create a business development company

02:32:24.400 --> 02:32:28.440
for many, many Quantysites, like thousands of Quantysites.

02:32:28.440 --> 02:32:30.840
And it can be a marketplace to connect,

02:32:30.840 --> 02:32:33.440
essentially be the enterprise software company

02:32:33.440 --> 02:32:34.440
of the future.

02:32:34.440 --> 02:32:36.760
If you look at what enterprise software wants

02:32:36.760 --> 02:32:38.640
from the customer side, and during this journey,

02:32:38.640 --> 02:32:42.360
I've had the chance to work and sell to lots of companies,

02:32:42.360 --> 02:32:45.240
Exxon and Shell and JPMorgan, Bank of America.

02:32:45.240 --> 02:32:46.720
Like the Fortune 100,

02:32:46.720 --> 02:32:48.280
and talk to a lot of people in procurement

02:32:48.280 --> 02:32:50.440
and see what are they buying and why are they buying?

02:32:50.440 --> 02:32:51.800
So, you know, I don't know everything,

02:32:51.800 --> 02:32:52.760
but I've learned a lot about,

02:32:52.760 --> 02:32:54.520
oh, what are they really looking for?

02:32:54.520 --> 02:32:56.440
And they're looking for solutions.

02:32:56.440 --> 02:33:01.200
They're constantly given products from enterprise software.

02:33:01.200 --> 02:33:02.600
Here's open source, lead enterprise software,

02:33:02.600 --> 02:33:04.240
now I buy it, and then they have to stitch it together

02:33:04.240 --> 02:33:05.920
into a solution.

02:33:05.920 --> 02:33:07.040
Open source is fantastic

02:33:07.040 --> 02:33:08.800
for gluing those solutions together.

02:33:08.800 --> 02:33:11.520
So, whereas they keep getting new platforms

02:33:11.520 --> 02:33:15.040
they're trying to buy, but most enterprises want

02:33:15.880 --> 02:33:17.160
is tools that they can customize

02:33:17.160 --> 02:33:18.960
that are as inexpensive as they can.

02:33:18.960 --> 02:33:20.440
Yeah, and so you always want to maintain

02:33:20.440 --> 02:33:21.600
the connection to the open source

02:33:21.600 --> 02:33:22.440
because that's-

02:33:22.440 --> 02:33:24.880
Yes, so open teams is about solving

02:33:24.880 --> 02:33:26.760
enterprise software problems.

02:33:26.760 --> 02:33:28.760
Brilliant, brilliant idea, by the way.

02:33:28.760 --> 02:33:31.000
But we do it honoring the topology.

02:33:31.000 --> 02:33:32.440
We don't hire all the people.

02:33:32.440 --> 02:33:35.160
We are a network connecting the sales energy

02:33:35.160 --> 02:33:36.560
and the procurement energy,

02:33:36.560 --> 02:33:39.120
and we were on the business side, get the deals closed,

02:33:39.120 --> 02:33:41.480
and then have a network of partners like Quantysite

02:33:41.480 --> 02:33:44.120
and others who we hand the deals to, right?

02:33:44.120 --> 02:33:44.960
We have to actually do the work,

02:33:44.960 --> 02:33:46.560
and then we have to maintain,

02:33:46.560 --> 02:33:47.400
I feel like we have to maintain

02:33:47.400 --> 02:33:48.840
some level of quality control

02:33:48.840 --> 02:33:51.040
so that the client can rely on open teams

02:33:51.040 --> 02:33:52.160
to ensure their delivery.

02:33:52.160 --> 02:33:54.760
It's not just, here's a lead, go figure that out,

02:33:54.760 --> 02:33:56.720
but no, we're gonna make sure you get what you need.

02:33:56.720 --> 02:33:58.960
Yeah, by the way, it's such a skill,

02:33:58.960 --> 02:34:00.760
and I don't know if I have the patience.

02:34:00.760 --> 02:34:04.160
I will have the patience to talk to the business people

02:34:04.160 --> 02:34:05.680
or more specifically, I mean,

02:34:05.680 --> 02:34:07.560
there's all kinds of flavors of business people

02:34:07.560 --> 02:34:10.600
or like marketing people.

02:34:12.040 --> 02:34:13.320
There's a challenge, I hear what you're saying

02:34:13.320 --> 02:34:15.600
because I've had the same challenge, and it's true.

02:34:15.600 --> 02:34:16.920
There's some times you think, okay,

02:34:16.920 --> 02:34:18.440
this is way overwrought.

02:34:18.440 --> 02:34:20.200
Yeah, but you have to become an adult,

02:34:20.200 --> 02:34:22.320
and you have to, because the companies have needs.

02:34:22.320 --> 02:34:24.320
They have ways to make money,

02:34:24.320 --> 02:34:26.480
and they also want to learn and grow,

02:34:26.480 --> 02:34:28.960
and it's your job to kind of educate them in the best way,

02:34:28.960 --> 02:34:31.000
like the value of open source, for example.

02:34:31.000 --> 02:34:32.960
Right, and I'm really grateful for all my experiences

02:34:32.960 --> 02:34:34.320
over the past 14 years,

02:34:34.320 --> 02:34:37.120
understanding that side of it, and still learning, for sure,

02:34:37.120 --> 02:34:38.640
but not just understanding from companies,

02:34:38.640 --> 02:34:40.520
but also dealing with marketing professionals

02:34:40.520 --> 02:34:42.880
and sales professionals and people that make a career

02:34:42.880 --> 02:34:44.360
by that and understanding what they're thinking about,

02:34:44.360 --> 02:34:46.840
and also understanding, well, let's make this better.

02:34:46.840 --> 02:34:48.160
We can really make a place.

02:34:48.160 --> 02:34:50.480
Open Teams, I see, is the transmission layer

02:34:50.480 --> 02:34:53.720
between companies and open source communities

02:34:53.720 --> 02:34:55.640
producing enterprise software solutions.

02:34:55.640 --> 02:34:58.480
Eventually, we wanna, today, we're taking on SAS

02:34:58.480 --> 02:35:01.720
and MATLAB and tools that we know we can replace for folks.

02:35:01.720 --> 02:35:04.560
Really, anytime you have a software tool at an organization

02:35:04.560 --> 02:35:06.200
where you have to do a lot of customization

02:35:06.200 --> 02:35:07.360
to make it work for you.

02:35:07.360 --> 02:35:08.520
It's not like you're just buying this thing

02:35:08.520 --> 02:35:09.400
off the shelf and it works.

02:35:09.400 --> 02:35:11.080
It's like, okay, you buy this system,

02:35:11.080 --> 02:35:12.840
and then you customize it a lot.

02:35:13.840 --> 02:35:15.280
Usually, with expensive consultants

02:35:15.280 --> 02:35:17.200
to actually make it work for you.

02:35:17.200 --> 02:35:19.760
All of those should be replaced by open source foundations

02:35:19.760 --> 02:35:20.600
with the same customization.

02:35:20.600 --> 02:35:22.360
You're doing such important work,

02:35:22.360 --> 02:35:25.440
such important work in these giant organizations

02:35:25.440 --> 02:35:26.520
that are doing exactly that,

02:35:26.520 --> 02:35:28.360
taking some proprietary software

02:35:28.360 --> 02:35:31.400
and hiring a huge team of consultants that customize it,

02:35:31.400 --> 02:35:33.720
and then that whole thing gets outdated quick.

02:35:33.720 --> 02:35:34.560
Correct.

02:35:34.560 --> 02:35:37.040
And so, I mean, that's brilliant.

02:35:37.040 --> 02:35:42.040
The one solution to that is kind of what Tesla's doing

02:35:42.080 --> 02:35:43.280
a little bit of,

02:35:43.280 --> 02:35:46.680
which is basically build up a software engineering team,

02:35:46.680 --> 02:35:48.360
like build a team from scratch.

02:35:48.360 --> 02:35:49.200
Build a team from scratch,

02:35:49.200 --> 02:35:50.040
and companies are doing it well,

02:35:50.040 --> 02:35:50.880
that's what they're doing right now.

02:35:50.880 --> 02:35:51.720
Yeah, exactly.

02:35:51.720 --> 02:35:52.560
And that's okay.

02:35:52.560 --> 02:35:54.360
And you're creating a topology for some of that.

02:35:54.360 --> 02:35:55.680
You're right, you just don't have to do it.

02:35:55.680 --> 02:35:57.080
That's not the only answer, right?

02:35:57.080 --> 02:35:58.920
And so, other companies can access this,

02:35:58.920 --> 02:35:59.920
maybe more accessible.

02:35:59.920 --> 02:36:01.160
We literally, let's really, really say,

02:36:01.160 --> 02:36:03.960
OpenTeam is the future of enterprise software.

02:36:03.960 --> 02:36:04.800
We're still early,

02:36:04.800 --> 02:36:07.440
like this idea just percolated over the past year

02:36:07.440 --> 02:36:08.520
as we've kind of grown quonsight

02:36:08.520 --> 02:36:10.440
and realized the extensibility of it.

02:36:10.440 --> 02:36:12.240
We just finished in our seed round

02:36:13.240 --> 02:36:15.160
to help get more salespeople

02:36:15.160 --> 02:36:17.640
and then push the messaging correctly.

02:36:17.640 --> 02:36:19.160
And there's lots of tools we're building

02:36:19.160 --> 02:36:20.000
to make this easier.

02:36:20.000 --> 02:36:21.720
Like we wanna automate the processes.

02:36:21.720 --> 02:36:23.560
We feel like a lot of the power

02:36:23.560 --> 02:36:25.560
is the efficiency of the sales process.

02:36:25.560 --> 02:36:29.400
There's a lot of wasted energy in small teams

02:36:29.400 --> 02:36:31.600
and the sales energy to get into large companies

02:36:31.600 --> 02:36:32.640
and make a deal.

02:36:32.640 --> 02:36:34.640
There's a lot of money spent on that process.

02:36:34.640 --> 02:36:36.480
So, creating the tools and processes for that sales.

02:36:36.480 --> 02:36:38.120
So, make that super seamless,

02:36:38.120 --> 02:36:39.560
so a single company can go,

02:36:39.560 --> 02:36:41.360
oh, I've got my contract with OpenTeams.

02:36:41.360 --> 02:36:43.000
We've got a subscription they can get.

02:36:43.000 --> 02:36:45.160
They can make that procurement seamless.

02:36:45.160 --> 02:36:46.640
And then the fact they have access

02:36:46.640 --> 02:36:48.760
to the entire open source ecosystem.

02:36:48.760 --> 02:36:51.160
And we have a part of our work

02:36:51.160 --> 02:36:53.320
that's embracing open source ecosystems

02:36:53.320 --> 02:36:55.000
and making sure we're doing things useful for them.

02:36:55.000 --> 02:36:56.120
We're serving them.

02:36:56.120 --> 02:36:57.520
And then companies making sure

02:36:57.520 --> 02:36:59.160
they're getting solutions they care about.

02:36:59.160 --> 02:37:02.960
And then figuring out which targets we have.

02:37:02.960 --> 02:37:06.000
We're not taking on all of enterprise software yet,

02:37:06.000 --> 02:37:07.480
but we're definitely set.

02:37:07.480 --> 02:37:08.480
Well, this feels like the future.

02:37:08.520 --> 02:37:10.600
The idea and the vision is brilliant.

02:37:10.600 --> 02:37:14.440
Can I ask you, why do you think Microsoft bought GitHub

02:37:14.440 --> 02:37:16.560
and what do you think is the future of GitHub?

02:37:16.560 --> 02:37:17.400
Great point.

02:37:17.400 --> 02:37:18.240
I thought it was a brilliant move.

02:37:18.240 --> 02:37:20.600
I think they did because Microsoft has always

02:37:20.600 --> 02:37:22.880
had a developer-centric culture.

02:37:22.880 --> 02:37:23.720
They always have.

02:37:23.720 --> 02:37:25.160
One of the things Microsoft's always done well

02:37:25.160 --> 02:37:27.440
is understand that their power is the developers.

02:37:27.440 --> 02:37:31.600
It's been, Balmer didn't necessarily make a good meme

02:37:31.600 --> 02:37:32.560
about how he approached that,

02:37:32.560 --> 02:37:34.520
but they're broadening that.

02:37:34.520 --> 02:37:35.360
I think that's why,

02:37:35.360 --> 02:37:38.400
because they recognize GitHub is where developers are at.

02:37:39.240 --> 02:37:40.080
But do they have a vision

02:37:40.080 --> 02:37:42.040
like Open Teams type of situation?

02:37:42.040 --> 02:37:43.640
I don't think so yet.

02:37:43.640 --> 02:37:46.680
Are they just basically throwing money at developers

02:37:46.680 --> 02:37:47.960
to show their support?

02:37:47.960 --> 02:37:48.800
I think so.

02:37:48.800 --> 02:37:50.840
Without a topology, like you put it,

02:37:50.840 --> 02:37:53.280
like a way to leverage that,

02:37:53.280 --> 02:37:55.480
like to give developers actual money.

02:37:55.480 --> 02:37:56.320
Right.

02:37:56.320 --> 02:37:57.160
I don't think so.

02:37:57.160 --> 02:37:59.440
I think they're still, it's an enterprise software company

02:37:59.440 --> 02:38:00.520
and they make a bunch of money.

02:38:00.520 --> 02:38:01.360
They make a bunch of games.

02:38:01.360 --> 02:38:02.640
They're a big company.

02:38:02.640 --> 02:38:03.760
They sell products.

02:38:03.760 --> 02:38:06.080
I think part of it is they know there's opportunity

02:38:06.080 --> 02:38:07.920
to make money from GitHub.

02:38:07.920 --> 02:38:10.120
There's definitely a business there

02:38:10.120 --> 02:38:11.360
to sell to developers

02:38:11.360 --> 02:38:13.320
or to sell to people using development.

02:38:13.320 --> 02:38:14.280
I think there's part of that.

02:38:14.280 --> 02:38:15.920
I think part of it is also there's,

02:38:15.920 --> 02:38:18.120
they had definitely wanted to recognize

02:38:18.120 --> 02:38:20.600
that you need to value open source

02:38:20.600 --> 02:38:21.960
to get great developers,

02:38:21.960 --> 02:38:23.400
which is an important concept

02:38:23.400 --> 02:38:25.040
that was emerging over the past 10 years

02:38:25.040 --> 02:38:28.040
that Pydata,

02:38:28.040 --> 02:38:30.680
we were able to convince JP Morgan to support Pydata

02:38:30.680 --> 02:38:32.040
because of that fact, right?

02:38:32.040 --> 02:38:33.960
That was where the money for them putting a couple hundred

02:38:33.960 --> 02:38:36.680
thousand into supporting Pydata for several conferences

02:38:36.680 --> 02:38:37.840
was they want developers

02:38:38.760 --> 02:38:40.160
and they realized that developers want

02:38:40.160 --> 02:38:41.000
to participate in open source.

02:38:41.000 --> 02:38:43.560
So enterprise software folks don't always understand

02:38:43.560 --> 02:38:45.040
how their software gets used.

02:38:45.040 --> 02:38:47.880
Having spent a lot of time on the floors at JP Morgan

02:38:47.880 --> 02:38:50.000
at InShell, at ExxonMobil,

02:38:50.000 --> 02:38:53.280
you see, oh, these companies have large development teams

02:38:53.280 --> 02:38:54.920
and then you're, they're kind of dealing

02:38:54.920 --> 02:38:57.160
with what's being delivered to them.

02:38:57.160 --> 02:38:58.760
So I really feel kind of a privilege

02:38:58.760 --> 02:39:00.920
that I had a chance to learn some of these people

02:39:00.920 --> 02:39:01.760
and see what they're doing

02:39:01.760 --> 02:39:05.400
and even work alongside them as a consultant

02:39:05.880 --> 02:39:07.680
using my, using open source and traffic.

02:39:07.680 --> 02:39:10.000
How do we make this work inside of our large organization?

02:39:10.000 --> 02:39:13.040
Some of it is actually for a large organization.

02:39:13.040 --> 02:39:14.840
Some of it is messaging to the world

02:39:14.840 --> 02:39:17.480
that you care about developers and you're the cool.

02:39:17.480 --> 02:39:18.320
Yep.

02:39:18.320 --> 02:39:19.140
You care.

02:39:19.140 --> 02:39:21.080
Like, for example, like if Ford,

02:39:21.080 --> 02:39:23.920
cause I talked to them, like car companies, right?

02:39:23.920 --> 02:39:26.720
They, they want to attract, you know,

02:39:26.720 --> 02:39:28.800
you want to take on Tesla and autopilot.

02:39:28.800 --> 02:39:30.000
You want to take that, right?

02:39:30.000 --> 02:39:31.760
And so what do you do there?

02:39:31.760 --> 02:39:33.000
You show that you're cool.

02:39:33.000 --> 02:39:34.760
Like you, you try to show off

02:39:34.760 --> 02:39:36.520
that you care about developers

02:39:36.520 --> 02:39:39.080
and they have a lot of trouble doing that.

02:39:39.080 --> 02:39:42.760
And like one way, I think like Ford should have bought GitHub.

02:39:42.760 --> 02:39:44.040
Like just to show off.

02:39:44.040 --> 02:39:45.200
Yeah, yeah.

02:39:45.200 --> 02:39:47.800
Like these old school companies and it's in a lot.

02:39:47.800 --> 02:39:48.640
Good point.

02:39:48.640 --> 02:39:50.000
A lot of different industries.

02:39:50.000 --> 02:39:51.120
There's probably different ways.

02:39:51.120 --> 02:39:54.120
It's probably an art to show that you care to developers

02:39:54.120 --> 02:39:57.040
and the developers, it's, it's, it's exactly what you say.

02:39:57.040 --> 02:40:00.560
Like, for example, just spitballing here,

02:40:00.560 --> 02:40:02.560
but like Ford or somebody like that

02:40:02.560 --> 02:40:06.000
could give a hundred million dollars

02:40:06.000 --> 02:40:07.920
to the development of NumPy.

02:40:07.920 --> 02:40:12.080
And like, like literally look at like the top

02:40:12.080 --> 02:40:16.080
most popular projects in Python and just say,

02:40:16.080 --> 02:40:17.080
we're just going to give money.

02:40:17.080 --> 02:40:17.920
Right.

02:40:17.920 --> 02:40:20.480
Like that's going to immediately make you cool.

02:40:20.480 --> 02:40:21.640
They could actually, yeah.

02:40:21.640 --> 02:40:23.840
And in fact, we set up NumFocus to make it easy.

02:40:23.840 --> 02:40:24.680
Yeah.

02:40:24.680 --> 02:40:26.760
But the challenge was, is also you have to have

02:40:26.760 --> 02:40:28.520
some busy business development.

02:40:28.520 --> 02:40:31.320
Like it's a bit of a, it's a bit of a seeding problem, right?

02:40:31.320 --> 02:40:32.720
And you look at how I've talked to the folks

02:40:32.720 --> 02:40:34.400
at Linux Foundation know how they're doing it.

02:40:34.400 --> 02:40:36.640
I know how, and starting NumFocus.

02:40:36.640 --> 02:40:39.440
Cause we had two babies in 2012.

02:40:39.440 --> 02:40:41.160
One was Anaconda, one was NumFocus, right?

02:40:41.160 --> 02:40:42.760
And they were both important efforts.

02:40:42.760 --> 02:40:45.240
They had distinct journeys and super grateful

02:40:45.240 --> 02:40:47.840
that both existed and still grateful both exist.

02:40:48.880 --> 02:40:51.960
But there's different energies in getting donations

02:40:51.960 --> 02:40:55.440
as there is getting, this is important to my business.

02:40:55.440 --> 02:40:58.040
Like I'm selling you something that this is a,

02:40:58.040 --> 02:41:00.360
it's a, I'm going to make money this way.

02:41:00.360 --> 02:41:02.160
If you can tie it, if you can tie the message

02:41:02.160 --> 02:41:05.280
to an ROI for the company, it becomes a brainer.

02:41:05.280 --> 02:41:07.040
It's much more effective, right?

02:41:07.040 --> 02:41:09.640
So, and there are rational arguments to make.

02:41:09.640 --> 02:41:11.240
I've tried to have conversations with marketing,

02:41:11.240 --> 02:41:12.320
especially in marketing departments.

02:41:12.320 --> 02:41:16.040
Like very early on, it was clear to me that, oh,

02:41:16.040 --> 02:41:18.240
you could just take a fraction of your marketing budget

02:41:18.240 --> 02:41:20.320
and just spend it on open source development

02:41:20.320 --> 02:41:23.840
and you get better results from your marketing.

02:41:23.840 --> 02:41:24.680
Like because-

02:41:24.680 --> 02:41:26.920
How did those, can I, sorry, I'm gonna try not to go

02:41:26.920 --> 02:41:28.000
on rants here. No, it's fine.

02:41:28.000 --> 02:41:29.880
What have you learned from the interaction

02:41:29.880 --> 02:41:31.480
with the marketing folks on that kind of,

02:41:31.480 --> 02:41:34.560
cause you gave a great example of something

02:41:34.560 --> 02:41:37.280
that will obviously be much better investment

02:41:37.280 --> 02:41:40.400
in terms of marketing is supporting open source projects.

02:41:40.400 --> 02:41:42.400
The challenge is not dissimilar from the challenge

02:41:42.400 --> 02:41:46.520
you have in academia at the different colleges, right?

02:41:46.520 --> 02:41:50.000
Knowledge gets very specific and very channeled, right?

02:41:50.000 --> 02:41:52.280
And so people get, they get a lot of learning

02:41:52.280 --> 02:41:53.920
in the thing they know about.

02:41:53.920 --> 02:41:56.760
And it's hard then to bridge that and to get them

02:41:56.760 --> 02:42:00.520
to think differently enough to have a sense

02:42:00.520 --> 02:42:02.200
that you might have something to offer.

02:42:02.200 --> 02:42:03.040
Cause it's different.

02:42:03.040 --> 02:42:04.320
It's like, well, how do I implement that?

02:42:04.320 --> 02:42:06.160
How do I, what do I do with that?

02:42:06.160 --> 02:42:07.880
Do I, which budget do I take from?

02:42:07.880 --> 02:42:10.360
Do I slow down my spend on Google ads

02:42:10.360 --> 02:42:11.640
or my spend on Facebook ads?

02:42:11.640 --> 02:42:13.760
Or do I not hire a content creator instead?

02:42:13.760 --> 02:42:16.200
Like there's an operational aspect to that

02:42:16.200 --> 02:42:19.120
that you have to be the CMO, right?

02:42:19.120 --> 02:42:19.960
Or the CEO.

02:42:19.960 --> 02:42:21.040
You have to get the right level.

02:42:21.040 --> 02:42:24.400
So you have to hire at a high position level

02:42:24.400 --> 02:42:25.760
people that care about this and they-

02:42:26.040 --> 02:42:27.640
Or they won't know how, right?

02:42:27.640 --> 02:42:30.440
And because you can also do it very clumsily, right?

02:42:30.440 --> 02:42:32.040
And I've seen, cause you can,

02:42:32.040 --> 02:42:33.760
you absolutely have to honor and recognize

02:42:33.760 --> 02:42:36.200
the people you're going to.

02:42:36.200 --> 02:42:37.800
And the fact that if you just throw money at them,

02:42:37.800 --> 02:42:39.240
it could actually create more problems.

02:42:39.240 --> 02:42:40.800
Can I just say, this is not you saying,

02:42:40.800 --> 02:42:44.400
can I just, cause I just need, I need to say this.

02:42:44.400 --> 02:42:46.240
I've been very surprised

02:42:47.520 --> 02:42:51.760
how often marketing people are terrible at marketing.

02:42:51.760 --> 02:42:54.200
I feel like the best marketing

02:42:54.240 --> 02:42:56.360
is doing something novel and unique

02:42:56.360 --> 02:42:58.320
that anticipates the future.

02:42:58.320 --> 02:43:01.560
It feels like so much of the marketing practice

02:43:01.560 --> 02:43:04.400
is like what they took in school,

02:43:04.400 --> 02:43:06.720
or maybe they're studying for what was the best thing

02:43:06.720 --> 02:43:08.440
that was done in the past decade,

02:43:08.440 --> 02:43:10.840
and they're just repeating that over and over,

02:43:10.840 --> 02:43:12.400
as opposed to innovating.

02:43:12.400 --> 02:43:13.800
Like taking the risk.

02:43:13.800 --> 02:43:15.400
To me, marketing- That's a great point.

02:43:15.400 --> 02:43:17.120
Is taking the big risk.

02:43:17.120 --> 02:43:17.960
That's a great point.

02:43:17.960 --> 02:43:18.840
And being the first one to risk.

02:43:18.840 --> 02:43:21.240
Yeah, there's an aspect of data observation

02:43:21.240 --> 02:43:22.200
from that risk, right?

02:43:23.160 --> 02:43:25.160
I think could share to what they're doing already.

02:43:25.160 --> 02:43:27.720
But it absolutely, it's about, I think it's content.

02:43:27.720 --> 02:43:30.240
Like there's this whole world on content marketing

02:43:30.240 --> 02:43:33.560
that you could almost say, well, yeah, it can get over.

02:43:33.560 --> 02:43:36.440
You can get inundated with stuff that's not relevant to you.

02:43:36.440 --> 02:43:39.200
Whereas what you're saying would be highly relevant

02:43:39.200 --> 02:43:41.560
and highly useful and highly beneficial.

02:43:41.560 --> 02:43:42.960
Yeah, but it's risky.

02:43:42.960 --> 02:43:44.600
I mean, that's why sort of,

02:43:44.600 --> 02:43:46.240
there's a lot of innovative ways of doing that.

02:43:46.240 --> 02:43:48.000
Telsa is an example of people

02:43:48.000 --> 02:43:49.960
that basically don't do marketing.

02:43:49.960 --> 02:43:52.760
They do marketing in a very, like,

02:43:52.760 --> 02:43:55.760
it's like Elon hired a person who's just good at Twitter

02:43:55.760 --> 02:43:57.520
for running Tesla's Twitter account.

02:43:57.520 --> 02:43:59.160
No, right, right.

02:43:59.160 --> 02:44:00.840
I mean, that's exactly what you wanna be doing.

02:44:00.840 --> 02:44:03.120
You want to be constantly innovating in-

02:44:03.120 --> 02:44:04.280
Right, there's an aspect of telling.

02:44:04.280 --> 02:44:06.920
I mean, I've definitely seen people doing great work

02:44:06.920 --> 02:44:08.400
where you're not talking about it.

02:44:08.400 --> 02:44:10.120
Like I would say that's actually a problem I have right now

02:44:10.120 --> 02:44:11.360
with Quantysite Labs.

02:44:11.360 --> 02:44:12.720
Quantysite Labs has been doing amazing work.

02:44:12.720 --> 02:44:13.560
Really excited about it.

02:44:13.560 --> 02:44:15.480
But we have not been talking about it enough.

02:44:15.480 --> 02:44:16.320
We haven't been-

02:44:16.320 --> 02:44:17.760
And there's different ways to talk about it.

02:44:17.760 --> 02:44:19.600
There's different ways to, there's different channels

02:44:19.600 --> 02:44:20.760
of which to communicate.

02:44:20.760 --> 02:44:25.560
There's also like, I'll just throw some shade

02:44:25.560 --> 02:44:26.880
at companies I love.

02:44:27.840 --> 02:44:29.120
So for example, iRobot,

02:44:29.120 --> 02:44:30.520
I just had a conversation with them.

02:44:30.520 --> 02:44:31.800
They make Roombas.

02:44:31.800 --> 02:44:32.640
Sure.

02:44:32.640 --> 02:44:35.400
And they, I think I love, and they're incredible robots,

02:44:35.400 --> 02:44:38.920
but like every time they do like advertisement,

02:44:38.920 --> 02:44:41.840
not advertisement, but like marketing type stuff,

02:44:41.840 --> 02:44:44.040
it just looks so corporate.

02:44:44.040 --> 02:44:48.520
And to me, the incredible, I may be wrong

02:44:48.520 --> 02:44:50.240
in the case of iRobot, I don't know.

02:44:50.240 --> 02:44:53.960
But to me, when you're talking about engineering systems,

02:44:53.960 --> 02:44:56.960
it's really nice to show off the magic of the engineering

02:44:56.960 --> 02:45:01.960
and the software and all the geniuses behind this product

02:45:03.200 --> 02:45:06.120
and the tinkering and like the raw authenticity

02:45:06.120 --> 02:45:07.920
of what it takes to build that system

02:45:07.920 --> 02:45:11.080
versus the marketing people who want to have like

02:45:11.080 --> 02:45:13.240
pretty people like standing there all pretty

02:45:13.240 --> 02:45:15.680
with the robots like moving perfectly.

02:45:15.680 --> 02:45:17.640
So to me, there's some aspect,

02:45:17.640 --> 02:45:19.120
it's like speaking to the hackers.

02:45:19.120 --> 02:45:22.120
You have to throw some bones,

02:45:22.120 --> 02:45:26.640
some care towards the engineers, the developers,

02:45:26.640 --> 02:45:29.800
because there's some aspect, one, for the hiring,

02:45:29.800 --> 02:45:31.760
but two, there's an authenticity

02:45:31.760 --> 02:45:33.080
to that kind of communication

02:45:33.080 --> 02:45:36.080
that's really inspiring to the end user as well.

02:45:36.080 --> 02:45:38.440
Like if they know that brilliant people,

02:45:38.440 --> 02:45:40.680
the best in the world are working at your company,

02:45:40.680 --> 02:45:42.640
they start to believe that that product

02:45:42.640 --> 02:45:43.960
that you're creating is really good.

02:45:43.960 --> 02:45:44.800
It's interesting.

02:45:44.800 --> 02:45:45.640
Because your initial reaction would be,

02:45:45.640 --> 02:45:46.760
wait, there's different users here.

02:45:46.760 --> 02:45:48.440
Why would you do that to,

02:45:48.440 --> 02:45:50.680
my wife bought a Roomba,

02:45:50.680 --> 02:45:52.560
and she loves developers, she loves me,

02:45:52.560 --> 02:45:56.600
but she doesn't care about that type of culture.

02:45:56.600 --> 02:45:59.640
So essentially what you said is actually the authenticity,

02:45:59.640 --> 02:46:00.560
because everyone has a friend,

02:46:00.560 --> 02:46:01.920
everyone knows people, there's word of mouth.

02:46:01.920 --> 02:46:02.760
I mean, if you-

02:46:02.760 --> 02:46:04.160
Word of mouth is so, so powerful.

02:46:04.160 --> 02:46:05.000
Yeah, exactly.

02:46:05.000 --> 02:46:05.840
That's interesting.

02:46:05.840 --> 02:46:07.600
Because I think it's the lack of that realization

02:46:07.600 --> 02:46:08.960
there's this halo effect

02:46:08.960 --> 02:46:11.240
that influences your general marketing.

02:46:11.240 --> 02:46:12.080
Interesting.

02:46:12.080 --> 02:46:14.640
For some stupid reason, I do have a platform

02:46:14.680 --> 02:46:16.960
and it seems that the reason I have a platform,

02:46:16.960 --> 02:46:19.520
many others like me, millions of others,

02:46:19.520 --> 02:46:21.240
is the authenticity.

02:46:21.240 --> 02:46:23.960
And we get excited naturally about stuff.

02:46:23.960 --> 02:46:27.840
And I don't want to get excited about that iRobot video,

02:46:27.840 --> 02:46:30.800
because it's boring, it's marketing, it's corporate,

02:46:30.800 --> 02:46:33.640
as opposed to, I wanted to do some fun,

02:46:33.640 --> 02:46:36.280
this is me, like a shout out to iRobot,

02:46:36.280 --> 02:46:39.400
is they're not letting me get into the robot.

02:46:39.400 --> 02:46:42.200
Yeah, well there's an aspect that could be benefiting

02:46:42.640 --> 02:46:45.640
from a culture of modularity, like add-ons,

02:46:45.640 --> 02:46:47.840
and that could actually dramatically help.

02:46:47.840 --> 02:46:49.320
You've seen that over history.

02:46:49.320 --> 02:46:51.200
I mean, Apple is an example of a company like that,

02:46:51.200 --> 02:46:54.400
or the, I can see what your point is,

02:46:54.400 --> 02:46:56.960
is that you have something that needs to be,

02:46:56.960 --> 02:46:58.240
it needs to be adopted broadly.

02:46:58.240 --> 02:47:00.040
The concept needs to be adopted broadly.

02:47:00.040 --> 02:47:01.640
And if you want to go beyond this one device,

02:47:01.640 --> 02:47:04.240
you need to engage this community.

02:47:04.240 --> 02:47:07.560
Yeah, and connecting to the open source, as you said.

02:47:07.560 --> 02:47:11.800
I got to ask you, your programmer,

02:47:12.040 --> 02:47:14.840
one of the most impactful programmers ever.

02:47:14.840 --> 02:47:18.560
You've led many programmers, you lead many programmers.

02:47:18.560 --> 02:47:21.160
What are some, from a programmer perspective,

02:47:21.160 --> 02:47:23.360
what makes a good programmer?

02:47:23.360 --> 02:47:25.000
What makes a productive programmer?

02:47:25.000 --> 02:47:28.560
Is there a device you can give to be a great programmer?

02:47:28.560 --> 02:47:30.280
That's a great, great question.

02:47:30.280 --> 02:47:31.640
And there are times in my life

02:47:31.640 --> 02:47:32.920
I'd probably answer this even better

02:47:32.920 --> 02:47:35.040
than I hope maybe give an answer today.

02:47:35.040 --> 02:47:36.720
Because I thought about this numerous times,

02:47:36.720 --> 02:47:38.280
like right now I've spent on so much time

02:47:38.280 --> 02:47:39.960
recently hiring salespeople that-

02:47:40.800 --> 02:47:43.440
That your mind is a little bit on something else.

02:47:43.440 --> 02:47:44.280
On something else.

02:47:44.280 --> 02:47:47.440
But I reflected on the past and also,

02:47:47.440 --> 02:47:49.280
I have some really, the only way I can do this,

02:47:49.280 --> 02:47:51.440
I have some really great programmers that I work with

02:47:51.440 --> 02:47:53.240
who lead the teams that they lead.

02:47:53.240 --> 02:47:56.600
And my goal is to inspire them and hopefully help them,

02:47:56.600 --> 02:47:59.640
encourage them and help them encourage with their teams.

02:47:59.640 --> 02:48:01.200
I would say there's a number of things, a couple of things.

02:48:01.200 --> 02:48:03.440
One is curiosity.

02:48:04.400 --> 02:48:09.400
I think a programmer without curiosity is mundane.

02:48:10.000 --> 02:48:12.280
You'll lose interest, you won't do your best work.

02:48:12.280 --> 02:48:13.680
So it's an affect.

02:48:13.680 --> 02:48:16.840
It's sort of, have some curiosity about things.

02:48:16.840 --> 02:48:19.640
I think two, don't try to do everything at once.

02:48:19.640 --> 02:48:22.000
Recognize that we're limited as humans.

02:48:22.000 --> 02:48:23.240
You're limited as a human.

02:48:23.240 --> 02:48:25.280
And each one of us are limited in different ways.

02:48:25.280 --> 02:48:26.680
We all have our different strengths and skills.

02:48:26.680 --> 02:48:29.960
So it's adapting the art of programming to your skills.

02:48:29.960 --> 02:48:31.280
One of the things that always works

02:48:31.280 --> 02:48:33.920
is to limit what you're trying to solve, right?

02:48:33.920 --> 02:48:36.720
So if you're part of a team,

02:48:36.720 --> 02:48:39.000
usually maybe somebody else has put the architecture together

02:48:39.000 --> 02:48:41.760
and they've given a portion for you if you're young.

02:48:41.760 --> 02:48:43.480
If you're not part of a team,

02:48:43.480 --> 02:48:46.680
it's sort of breaking down the problem into smaller parts

02:48:46.680 --> 02:48:48.640
is essential for you to make progress.

02:48:48.640 --> 02:48:50.720
It's very easy to take on a big project

02:48:50.720 --> 02:48:52.840
and try to do it all at once and you get lost

02:48:52.840 --> 02:48:53.720
and then you do it badly.

02:48:53.720 --> 02:48:58.720
And so thinking about very concretely what you're doing,

02:49:00.040 --> 02:49:01.480
defining the inputs and outputs,

02:49:01.480 --> 02:49:04.000
defining what you want to get done.

02:49:04.000 --> 02:49:05.520
Even just talking about that

02:49:05.520 --> 02:49:08.120
and like writing down before you write code,

02:49:08.120 --> 02:49:09.520
just what are you trying to accomplish?

02:49:09.520 --> 02:49:12.880
I mean, very specific about it really, really helps.

02:49:12.880 --> 02:49:17.080
I think using other people's work, right?

02:49:17.080 --> 02:49:20.080
Don't be afraid that somehow you're,

02:49:20.080 --> 02:49:21.320
like you should do it all.

02:49:21.320 --> 02:49:23.320
Like nobody does.

02:49:23.320 --> 02:49:24.160
Stand on the shoulders of giants.

02:49:24.160 --> 02:49:25.000
Stand on the shoulders of giants.

02:49:25.000 --> 02:49:26.840
And copy and paste some Stack Overflow.

02:49:26.840 --> 02:49:27.680
Copy and paste some Stack Overflow.

02:49:27.680 --> 02:49:30.160
It's like, but don't just copy and paste.

02:49:30.160 --> 02:49:31.800
It's particularly relevant in the era of codecs

02:49:31.800 --> 02:49:34.280
and the auto-generated code,

02:49:34.280 --> 02:49:36.840
which is essentially I see as an indexing of Stack Overflow.

02:49:36.840 --> 02:49:37.680
Right, exactly.

02:49:38.520 --> 02:49:39.360
It's a search engine.

02:49:39.360 --> 02:49:41.280
It's a search engine over Stack Overflow basically.

02:49:41.280 --> 02:49:43.520
So it's not, I mean, we've had this for a while,

02:49:43.520 --> 02:49:47.360
but really you want to cut and paste, but not blindly.

02:49:47.360 --> 02:49:51.040
Like absolutely have cut and paste to understand,

02:49:51.040 --> 02:49:53.640
but then you understand, oh, this is what this means.

02:49:53.640 --> 02:49:54.960
Oh, this is what it's doing.

02:49:54.960 --> 02:49:56.720
And understand as much as you can.

02:49:56.720 --> 02:49:57.680
So it's critical.

02:49:57.680 --> 02:49:59.080
That's where the curiosity comes in.

02:49:59.080 --> 02:50:01.040
If you're just blindly cutting and pasting,

02:50:01.040 --> 02:50:02.280
you're not gonna understand.

02:50:02.280 --> 02:50:07.280
So understand and then be sensitive to hype.

02:50:07.600 --> 02:50:09.320
Cycles, right?

02:50:09.320 --> 02:50:10.960
Every few, often there's always a,

02:50:10.960 --> 02:50:12.560
oh, test-driven development is the answer.

02:50:12.560 --> 02:50:13.880
Oh, object-oriented is the answer.

02:50:13.880 --> 02:50:16.560
Oh, there's always an answer.

02:50:16.560 --> 02:50:18.440
Agile is the answer.

02:50:18.440 --> 02:50:20.920
Be cautious of jumping onto a hype cycle.

02:50:20.920 --> 02:50:22.600
Like likely there's signal,

02:50:22.600 --> 02:50:24.520
like there's a thing there that's actually valuable

02:50:24.520 --> 02:50:25.360
you can learn from,

02:50:25.360 --> 02:50:27.800
but it's almost certainly not the answer

02:50:27.800 --> 02:50:29.000
to everything you need.

02:50:29.000 --> 02:50:31.000
What lessons do you draw from

02:50:31.000 --> 02:50:34.160
you having created NumPy and SciPy,

02:50:34.160 --> 02:50:37.280
like in service of sort of answering the question

02:50:37.280 --> 02:50:38.920
of what it takes to be a great programmer

02:50:38.920 --> 02:50:40.640
and giving advice to people?

02:50:40.640 --> 02:50:43.000
How can you be the next person to create a SciPy?

02:50:43.000 --> 02:50:45.720
Yeah, so one is listen.

02:50:45.720 --> 02:50:46.560
Two?

02:50:46.560 --> 02:50:47.400
Listen. To who?

02:50:47.400 --> 02:50:51.480
To people that have a problem, right?

02:50:51.480 --> 02:50:52.560
Which is everybody, right?

02:50:52.560 --> 02:50:55.000
But listen and listen to many,

02:50:55.000 --> 02:50:57.480
and try to then do,

02:50:57.480 --> 02:50:59.800
like you're gonna have to do an experiment.

02:50:59.800 --> 02:51:00.640
Do, fall down.

02:51:00.640 --> 02:51:01.960
Don't be afraid to fall down.

02:51:01.960 --> 02:51:02.800
Don't be afraid.

02:51:02.920 --> 02:51:05.400
The first thing you do is probably gonna suck,

02:51:05.400 --> 02:51:07.640
and that's okay, right?

02:51:07.640 --> 02:51:11.280
It's honestly, I think iteration is the key to innovation.

02:51:11.280 --> 02:51:16.280
And it's almost that psychological hesitation we have

02:51:16.760 --> 02:51:18.560
to just iterate.

02:51:18.560 --> 02:51:20.600
Like, yeah, we know it's not great,

02:51:20.600 --> 02:51:22.040
but next I wanna be better.

02:51:22.040 --> 02:51:23.920
I mean, just keep learning

02:51:23.920 --> 02:51:25.600
and keep improving and keep improving.

02:51:25.600 --> 02:51:27.720
So it's an attitude.

02:51:27.720 --> 02:51:32.160
And then it doesn't take intense concentration, right?

02:51:32.280 --> 02:51:34.600
Good things don't happen just,

02:51:34.600 --> 02:51:38.240
it's not quite like TikTok or like Facebook.

02:51:38.240 --> 02:51:40.560
You can't scroll your way to good programming, right?

02:51:40.560 --> 02:51:44.760
There are sincere hours of deep,

02:51:44.760 --> 02:51:46.080
don't be afraid of the deep problem.

02:51:46.080 --> 02:51:47.720
Like often people will run away from something

02:51:47.720 --> 02:51:49.040
because, oh, I can't solve this.

02:51:49.040 --> 02:51:51.400
And you might be right, but give it an hour.

02:51:51.400 --> 02:51:53.400
Give it a couple of hours and see.

02:51:53.400 --> 02:51:56.600
And just five minutes, not gonna give you that.

02:51:56.600 --> 02:52:00.560
Was it lonely when you were building SciPy and Numpah?

02:52:01.000 --> 02:52:04.040
Yeah, absolutely lonely in the sense of,

02:52:04.040 --> 02:52:05.760
you had to have an inner drive.

02:52:05.760 --> 02:52:08.000
And that inner drive for me always comes from,

02:52:08.000 --> 02:52:11.640
I have to see that this is right in some angle.

02:52:11.640 --> 02:52:13.360
I have to believe it, that this is the right approach,

02:52:13.360 --> 02:52:14.720
the right thing to do.

02:52:14.720 --> 02:52:16.400
With SciPy, it was like, oh yeah,

02:52:16.400 --> 02:52:19.080
the world needs libraries in Python.

02:52:19.080 --> 02:52:20.720
Clearly Python's popular enough

02:52:20.720 --> 02:52:23.240
with enough influential people to start.

02:52:23.240 --> 02:52:24.640
It needs more libraries.

02:52:24.640 --> 02:52:26.640
So that is a good in and of itself.

02:52:26.640 --> 02:52:28.400
So I'm gonna go do that good.

02:52:28.400 --> 02:52:30.360
So find a good, find a thing that you know is good

02:52:31.200 --> 02:52:33.040
and just work on it.

02:52:33.040 --> 02:52:34.720
So that has to happen and it is.

02:52:34.720 --> 02:52:37.000
And you kind of have to have enough realization

02:52:37.000 --> 02:52:40.280
of your mission to be okay with the naysayer

02:52:40.280 --> 02:52:42.200
or the fact that not everybody joins you upfront.

02:52:42.200 --> 02:52:43.520
In fact, one thing I've talked to people a lot,

02:52:43.520 --> 02:52:45.480
I've seen a lot of projects come and some fail.

02:52:45.480 --> 02:52:47.600
Not everything I've done has actually worked perfectly.

02:52:47.600 --> 02:52:48.960
I've tried a bunch of stuff that,

02:52:48.960 --> 02:52:49.920
okay, that didn't really work

02:52:49.920 --> 02:52:51.920
or this isn't working and why.

02:52:51.920 --> 02:52:53.680
But you see the patterns.

02:52:53.680 --> 02:52:55.800
And one of the key things is,

02:52:55.800 --> 02:52:59.040
you can't even know for six months.

02:52:59.040 --> 02:53:00.200
I say 18 months right now.

02:53:01.040 --> 02:53:01.800
If you're starting a new project,

02:53:01.800 --> 02:53:03.240
you gotta give it a good 18 month run

02:53:03.240 --> 02:53:05.320
before you even know if the feedback's there.

02:53:05.320 --> 02:53:07.880
Like you're not gonna know in six months.

02:53:07.880 --> 02:53:08.760
You might have the perfect thing,

02:53:08.760 --> 02:53:11.520
but six months from now it's still kind of still emerging.

02:53:11.520 --> 02:53:13.400
So give it time because you're dealing with humans

02:53:13.400 --> 02:53:16.000
and humans have an inertial energy

02:53:16.000 --> 02:53:18.160
that just doesn't change that quickly.

02:53:18.160 --> 02:53:19.000
So.

02:53:19.000 --> 02:53:20.920
Let me ask a silly question.

02:53:20.920 --> 02:53:23.600
But like you said,

02:53:23.600 --> 02:53:26.160
you're focused on the sales side of things currently.

02:53:26.160 --> 02:53:29.000
But back when you were actively programming,

02:53:29.000 --> 02:53:31.720
maybe in the 90s, you talked about IDEs.

02:53:31.720 --> 02:53:36.240
What's a setup that you have that brings you joy?

02:53:36.240 --> 02:53:38.400
Keyboard, number of screens.

02:53:38.400 --> 02:53:39.240
Yeah, I will.

02:53:39.240 --> 02:53:40.080
Linux.

02:53:40.080 --> 02:53:40.920
I do still like to program some.

02:53:40.920 --> 02:53:42.200
It's not as much as I used to.

02:53:42.200 --> 02:53:44.560
I have two projects I'm super interested in.

02:53:44.560 --> 02:53:45.640
Trying to find funding for them,

02:53:45.640 --> 02:53:47.200
trying to figure out some good teams for them,

02:53:47.200 --> 02:53:49.080
but I could talk about those.

02:53:49.080 --> 02:53:52.000
But what I, yeah, I'm an Emacs guy.

02:53:52.000 --> 02:53:53.080
Great, thank you.

02:53:54.160 --> 02:53:56.120
The superior editor, everybody.

02:53:56.120 --> 02:53:59.000
I've got, I don't often delete tweets,

02:53:59.000 --> 02:54:01.600
but one of the tweets I deleted when I said Emacs

02:54:01.600 --> 02:54:04.520
was better than Vim and then the hate I got.

02:54:04.520 --> 02:54:05.360
It is.

02:54:05.360 --> 02:54:07.640
I was like, I'm walking away from this.

02:54:07.640 --> 02:54:09.120
I do too, I don't push it.

02:54:09.120 --> 02:54:09.960
I mean, I'm not.

02:54:09.960 --> 02:54:11.080
I'm just joking, of course.

02:54:11.080 --> 02:54:12.160
Yeah, exactly, it's kind of like,

02:54:12.160 --> 02:54:14.520
but people do take the editor seriously, right?

02:54:14.520 --> 02:54:15.360
I did as a joke.

02:54:15.360 --> 02:54:16.560
That's your life.

02:54:16.560 --> 02:54:19.160
It is, but there's something,

02:54:19.160 --> 02:54:20.760
there's something beautiful to me about Emacs,

02:54:20.760 --> 02:54:22.360
but there's, for people that love them,

02:54:22.360 --> 02:54:23.760
there's something beautiful to them about that.

02:54:23.760 --> 02:54:26.320
I mean, I do use them for quick editing.

02:54:26.320 --> 02:54:27.920
Like, command line, if I said quick editing,

02:54:27.920 --> 02:54:30.320
I will still sometimes use it, but not much.

02:54:30.320 --> 02:54:31.720
Like, it's simple, corrective,

02:54:31.720 --> 02:54:32.840
corrective single editor character.

02:54:32.840 --> 02:54:34.120
So when you were developing SciPy,

02:54:34.120 --> 02:54:34.960
you were using Emacs?

02:54:34.960 --> 02:54:35.920
Emacs, yep.

02:54:35.920 --> 02:54:39.080
SciPy and NumPy are already in Emacs on that Linux box.

02:54:39.080 --> 02:54:43.200
And CVS and then SVN, version control.

02:54:43.200 --> 02:54:44.040
Git came later.

02:54:44.040 --> 02:54:48.120
Like, Git has, I love distributed branch stuff.

02:54:48.120 --> 02:54:50.200
I think Git is pretty complicated,

02:54:50.200 --> 02:54:51.640
but I love the concept.

02:54:51.640 --> 02:54:54.160
And also, of course, GitHub is,

02:54:54.160 --> 02:54:57.720
and then GitLab make Git definitely consumable.

02:54:58.640 --> 02:54:59.480
But that came later.

02:54:59.480 --> 02:55:01.080
Did you ever touch Lisp at all?

02:55:01.080 --> 02:55:03.400
Like, what were your emotional feelings

02:55:03.400 --> 02:55:04.600
about all the parentheses?

02:55:04.600 --> 02:55:05.440
Great question.

02:55:05.440 --> 02:55:08.240
So I find myself appreciating Lisp today

02:55:08.240 --> 02:55:09.680
much more than I did early.

02:55:09.680 --> 02:55:10.960
Because when I came to programming,

02:55:10.960 --> 02:55:13.000
I knew programming, but I was a domain expert, right?

02:55:13.000 --> 02:55:15.680
And to me, the parentheses were in the way.

02:55:15.680 --> 02:55:17.800
It's like, wow, it's just all this,

02:55:17.800 --> 02:55:19.320
like, it just gets in the way of my thinking

02:55:19.320 --> 02:55:20.160
about what I'm doing.

02:55:20.160 --> 02:55:22.400
Why would I have all these, right?

02:55:22.400 --> 02:55:24.720
That was my initial reaction to it.

02:55:24.720 --> 02:55:27.280
And now as I appreciate kind of the structure

02:55:27.280 --> 02:55:30.240
that kind of naturally maps to a logical thinking

02:55:30.240 --> 02:55:32.960
about a program, I can appreciate them, right?

02:55:32.960 --> 02:55:35.640
And why it's actually, you could create editors

02:55:35.640 --> 02:55:39.640
that make it not so problematic, right, honestly.

02:55:40.720 --> 02:55:43.000
So I actually have a much more appreciation of Lisp

02:55:43.000 --> 02:55:44.720
and things like Clojure and there's Hi-V,

02:55:44.720 --> 02:55:48.560
which is a Python, a Lisp that compiles the Python bytecode.

02:55:48.560 --> 02:55:50.320
I think it's challenging.

02:55:50.320 --> 02:55:53.200
Like typically these languages are,

02:55:53.200 --> 02:55:55.320
I even saw the whole data science programming system

02:55:55.320 --> 02:55:58.560
in Lisp that somebody created, which is cool.

02:55:58.560 --> 02:56:00.880
But again, I think it's the lack of recognition

02:56:00.880 --> 02:56:02.440
of the fact that there exists what I call

02:56:02.440 --> 02:56:04.120
occasional programmers.

02:56:04.120 --> 02:56:05.880
People that are never gonna be programmers for a living.

02:56:05.880 --> 02:56:08.480
They don't want to have all this cuteness in their head.

02:56:08.480 --> 02:56:10.920
They want just, it's why BASIC,

02:56:10.920 --> 02:56:14.520
you know, Microsoft had the right idea with BASIC

02:56:14.520 --> 02:56:17.680
in terms of having that be the language of Visual BASIC,

02:56:17.680 --> 02:56:21.280
the language of Excel and SQL Server.

02:56:21.280 --> 02:56:23.520
They should have converted that to Python 10 years ago,

02:56:23.520 --> 02:56:27.200
but the world would be a better place if they had, but.

02:56:27.200 --> 02:56:29.680
There's also, there's a beauty and a magic

02:56:29.680 --> 02:56:31.640
to the history behind a language in Lisp.

02:56:31.640 --> 02:56:34.440
You know, some of the most interesting people

02:56:34.440 --> 02:56:35.880
in the history of computer science

02:56:35.880 --> 02:56:38.360
and artificial intelligence have used Lisp, so.

02:56:38.360 --> 02:56:39.200
Yes.

02:56:39.200 --> 02:56:40.040
You feel.

02:56:40.040 --> 02:56:41.200
Well, it's back to that language.

02:56:41.200 --> 02:56:43.040
When you have a language, you can think in it.

02:56:43.040 --> 02:56:43.880
Yeah.

02:56:43.880 --> 02:56:44.700
And it helps you think better.

02:56:44.700 --> 02:56:45.640
And it attracts a certain kinds of people

02:56:45.640 --> 02:56:46.920
that think in a certain kind of way.

02:56:46.920 --> 02:56:48.560
And then that's there.

02:56:48.560 --> 02:56:52.160
Okay, so what about like small laptop with a tiny keyboard?

02:56:52.160 --> 02:56:55.000
Or is there like three screens?

02:56:55.000 --> 02:56:55.840
You know, good question.

02:56:55.840 --> 02:56:58.080
I've never gotten into the many screens, to be honest.

02:56:58.080 --> 02:57:00.720
I mean, and maybe it's because in my head,

02:57:00.720 --> 02:57:03.480
I kind of just, I just swap between windows.

02:57:03.480 --> 02:57:07.480
Like, partly because I guess I really can't process

02:57:07.480 --> 02:57:09.200
three screens at once anyway.

02:57:09.200 --> 02:57:12.560
Like, I just am looking at one and I just flip.

02:57:12.560 --> 02:57:14.440
You know, I flip an application open.

02:57:14.440 --> 02:57:15.720
So what about.

02:57:16.000 --> 02:57:18.080
Where it's really helpful is actually when I'm trying to,

02:57:18.080 --> 02:57:20.280
you know, here's data and I want to input it from here.

02:57:20.280 --> 02:57:22.320
Like, this is the only time I really need another screen.

02:57:22.320 --> 02:57:25.980
So now, because you're both a developer, lead developers,

02:57:25.980 --> 02:57:27.920
but then there's also these businesses

02:57:27.920 --> 02:57:29.080
and there's sales people,

02:57:29.080 --> 02:57:30.880
you're working with large companies.

02:57:30.880 --> 02:57:32.560
Operations people, hiring people, yeah.

02:57:32.560 --> 02:57:33.440
The whole thing.

02:57:33.440 --> 02:57:37.280
Which operating system is your favorite at this point?

02:57:37.280 --> 02:57:39.000
So Linux was the early days.

02:57:39.000 --> 02:57:41.480
So yeah, I love Linux as a server side.

02:57:41.480 --> 02:57:44.380
And it was early days I had my own Linux desktop.

02:57:44.380 --> 02:57:47.820
I've been on Mac laptops for 10 years now.

02:57:47.820 --> 02:57:48.660
Yeah.

02:57:48.660 --> 02:57:50.100
This is what leadership looks like.

02:57:50.100 --> 02:57:52.820
As you switch to Mac.

02:57:52.820 --> 02:57:53.820
Okay, great.

02:57:53.820 --> 02:57:54.640
Pretty much.

02:57:54.640 --> 02:57:57.420
I mean, just the fact that I had to do PowerPoints,

02:57:57.420 --> 02:58:00.500
I had to do presentations and, you know, plug in.

02:58:00.500 --> 02:58:02.340
I just couldn't mess with plugging in laptops.

02:58:02.340 --> 02:58:04.460
I wouldn't project and yeah.

02:58:04.460 --> 02:58:08.400
So you mentioned also QuantSight Labs and things like that.

02:58:09.260 --> 02:58:13.660
Can you give advice on how to hire great programmers

02:58:13.660 --> 02:58:14.620
and great people?

02:58:14.620 --> 02:58:18.040
Yeah, I would say produce an open source project.

02:58:19.420 --> 02:58:21.580
Get people contributing to it and hire those people.

02:58:21.580 --> 02:58:22.580
Yeah.

02:58:22.580 --> 02:58:25.100
I mean, you're doing it sort of,

02:58:25.100 --> 02:58:27.080
you might be perhaps a little biased,

02:58:27.080 --> 02:58:30.340
but that's probably 100% really good advice.

02:58:30.340 --> 02:58:31.820
I find it hard to hire.

02:58:31.820 --> 02:58:32.900
I still find it hard to hire.

02:58:32.900 --> 02:58:35.660
Like in terms of, I don't think,

02:58:35.660 --> 02:58:37.540
it's not hard to hire if I've worked with somebody

02:58:37.540 --> 02:58:39.340
for a couple of weeks.

02:58:39.340 --> 02:58:43.620
But an hour or two of interviews, I have no idea.

02:58:44.620 --> 02:58:47.300
So that instinct, that radar of knowing

02:58:47.300 --> 02:58:50.180
if you're good or not, you've found that you're still

02:58:50.180 --> 02:58:51.000
not able to really do it.

02:58:51.000 --> 02:58:51.840
It's really hard.

02:58:51.840 --> 02:58:53.780
I mean, the resume can help, but again,

02:58:53.780 --> 02:58:55.540
the resume is like a presentation

02:58:55.540 --> 02:58:56.940
of the things they want you to see,

02:58:56.940 --> 02:59:00.880
not the reality of, and there's also,

02:59:01.940 --> 02:59:03.940
you know, you have to understand what you're hiring for.

02:59:03.940 --> 02:59:06.820
There are different stages and different kinds of skills.

02:59:06.820 --> 02:59:10.940
And so it isn't just, one of the things I talk a lot about

02:59:10.980 --> 02:59:14.500
internally at my companies is that the whole idea

02:59:14.500 --> 02:59:18.620
of measuring ourselves against a single axis is flawed

02:59:18.620 --> 02:59:20.660
because we're not, it's a multidimensional space.

02:59:20.660 --> 02:59:22.160
And how do you order a multidimensional space?

02:59:22.160 --> 02:59:23.460
There isn't one ordering.

02:59:23.460 --> 02:59:26.200
So this whole idea, you immediately get projected

02:59:26.200 --> 02:59:28.780
into a thing when you're talking about hiring or best

02:59:28.780 --> 02:59:30.700
or worst or better or not better.

02:59:30.700 --> 02:59:33.540
So what is the thing you're actually needing?

02:59:33.540 --> 02:59:36.020
And you can even hire for that.

02:59:36.020 --> 02:59:39.080
There is such a thing, generally I really value people

02:59:39.080 --> 02:59:42.920
who have the affect, the care about open source.

02:59:42.920 --> 02:59:45.720
Like, so in some cases, their affinity to open source

02:59:45.720 --> 02:59:48.120
is simply a kind of a filter of an affect.

02:59:49.080 --> 02:59:52.560
However, I have found this interesting dichotomy

02:59:52.560 --> 02:59:57.100
between open source contributors and product creation.

02:59:59.360 --> 03:00:00.580
I don't know if it's fully true,

03:00:00.580 --> 03:00:04.960
but there does seem to be the more experience,

03:00:04.960 --> 03:00:08.160
the more affect somebody has in open source community,

03:00:08.160 --> 03:00:11.640
the less ability to actually produce product that they have.

03:00:11.640 --> 03:00:13.540
But the opposite is kind of true too.

03:00:13.540 --> 03:00:16.000
The more product focused are, I find a lot of people,

03:00:16.000 --> 03:00:16.840
I've talked to a lot of people

03:00:16.840 --> 03:00:19.400
who produce really great products and they have a,

03:00:19.400 --> 03:00:21.120
they're looking over the open source communities,

03:00:21.120 --> 03:00:23.320
kind of wanting to participate and play,

03:00:23.320 --> 03:00:26.000
but they've played here and they do a great job here.

03:00:26.000 --> 03:00:29.520
And then they don't necessarily have some of the same.

03:00:29.520 --> 03:00:32.040
Now, I don't think that's entirely necessary.

03:00:32.040 --> 03:00:34.880
I think part of it is cultural, how they've emerged.

03:00:34.880 --> 03:00:36.280
Cause one of the things that open source communities

03:00:36.280 --> 03:00:39.120
often lack is great product management,

03:00:39.120 --> 03:00:40.960
like some product management energy.

03:00:40.960 --> 03:00:41.800
That's brilliant.

03:00:41.800 --> 03:00:43.600
But you want both of those energies

03:00:43.600 --> 03:00:44.880
in the same place together.

03:00:44.880 --> 03:00:45.840
Yes, you really do.

03:00:45.840 --> 03:00:48.080
And so it's a lot of it's creating these teams of people

03:00:48.080 --> 03:00:51.880
that have these needed skills and attributes that are hard.

03:00:51.880 --> 03:00:54.640
And so, one of the big things I look for

03:00:54.640 --> 03:00:56.360
is somebody that fundamentally recognizes

03:00:56.360 --> 03:00:57.800
their need to learn.

03:00:57.800 --> 03:00:59.560
Like one of the values that we have

03:00:59.560 --> 03:01:01.400
in all of the things we do is learning.

03:01:01.400 --> 03:01:04.560
Like if somebody thinks they know it all,

03:01:04.560 --> 03:01:06.240
they're gonna struggle.

03:01:07.080 --> 03:01:09.480
And some of that is just, there's more basic things

03:01:09.480 --> 03:01:12.840
like humility, just being humble in the face

03:01:12.840 --> 03:01:14.440
of all the things you don't know.

03:01:14.440 --> 03:01:15.880
And that's like step one of learning.

03:01:15.880 --> 03:01:17.000
That's step one of learning, right?

03:01:17.000 --> 03:01:20.880
And I've spent a lot of time learning, right?

03:01:20.880 --> 03:01:21.880
Other people spend a lot more time,

03:01:21.880 --> 03:01:23.320
but I've spent a lot of time learning.

03:01:23.320 --> 03:01:26.360
My whole goal was to get a PhD because I love school

03:01:26.360 --> 03:01:28.280
and I wanted to be a scientist.

03:01:28.280 --> 03:01:31.160
And then what I found is what's been written about

03:01:31.160 --> 03:01:32.640
elsewhere as well is the more I learned,

03:01:32.640 --> 03:01:33.800
the more I didn't know.

03:01:33.840 --> 03:01:37.720
The more I realized, man, I know about this,

03:01:37.720 --> 03:01:40.080
but this is such a tiny thing in the global scope

03:01:40.080 --> 03:01:41.240
of what I might wanna know about.

03:01:41.240 --> 03:01:43.880
So, I need to be listening a whole lot better

03:01:43.880 --> 03:01:46.400
than I am just talking.

03:01:47.880 --> 03:01:48.880
That's changed a little bit actually.

03:01:48.880 --> 03:01:50.640
My wife says that I used to be a better listener.

03:01:50.640 --> 03:01:52.920
Now that I'm so full of all these ideas I wanna do,

03:01:52.920 --> 03:01:55.560
she kind of says, you gotta give people time to talk.

03:01:55.560 --> 03:01:58.440
So you've succeeded on multiple dimensions.

03:01:58.440 --> 03:02:01.720
So one is the tenure track faculty,

03:02:01.720 --> 03:02:03.120
the other is just creating all these products

03:02:03.120 --> 03:02:04.320
and building up the businesses,

03:02:04.320 --> 03:02:06.880
then working with businesses.

03:02:06.880 --> 03:02:09.240
Do you have advice for young people today

03:02:09.240 --> 03:02:13.880
in high school, in college, of how to live a life

03:02:13.880 --> 03:02:18.280
as non-linear and as successful as yours,

03:02:18.280 --> 03:02:21.200
a life that they could be proud of?

03:02:21.200 --> 03:02:22.960
Well, Lex, that's a super compliment.

03:02:22.960 --> 03:02:24.600
I'm humbled by that actually.

03:02:24.600 --> 03:02:27.960
I would say a life they can be proud of,

03:02:27.960 --> 03:02:31.560
honestly, one thing that I've said to people is first,

03:02:31.600 --> 03:02:34.280
find people you love and care about them.

03:02:34.280 --> 03:02:36.080
Like, family matters to me a lot.

03:02:36.080 --> 03:02:39.480
And family means people you love and have committed to.

03:02:39.480 --> 03:02:42.240
Right, so it can be whatever you mean by that,

03:02:42.240 --> 03:02:45.200
but you need to have a foundation.

03:02:45.200 --> 03:02:48.000
So find people you love and wanna commit to and do that.

03:02:49.000 --> 03:02:51.840
Cause it anchors you in a way that nothing else can.

03:02:51.840 --> 03:02:55.240
Right, and then you find other things.

03:02:55.240 --> 03:02:56.680
And then kind of from out there,

03:02:56.680 --> 03:02:58.880
you find other kinds of things you can commit to,

03:02:58.880 --> 03:03:03.320
whether it's ideas or people or groups of people.

03:03:04.240 --> 03:03:06.440
So, you know, especially in high school,

03:03:06.440 --> 03:03:09.360
I would say don't settle on what you think you know.

03:03:09.360 --> 03:03:13.360
Like give yourself 10 years to think about the world.

03:03:13.360 --> 03:03:15.520
Like there's, I see a lot of high school students

03:03:15.520 --> 03:03:17.640
who seem to know everything already.

03:03:17.640 --> 03:03:18.760
I think I did too.

03:03:18.760 --> 03:03:21.320
I think it's maybe natural, but recognize

03:03:21.320 --> 03:03:23.200
that the things you care about,

03:03:23.200 --> 03:03:26.560
you might change your perspective over time.

03:03:26.560 --> 03:03:28.160
I certainly have over time.

03:03:28.640 --> 03:03:30.680
I was really passionate about one specific thing

03:03:30.680 --> 03:03:32.400
and I was kind of softened.

03:03:32.400 --> 03:03:34.080
You know, I was a big,

03:03:34.080 --> 03:03:36.240
I didn't like the Federal Reserve, right?

03:03:36.240 --> 03:03:38.520
And there's still, we can have a longer conversation

03:03:38.520 --> 03:03:40.160
about monetary policy and finances,

03:03:40.160 --> 03:03:45.160
but I'm a little more nuanced in my perspective

03:03:46.040 --> 03:03:46.880
at this point.

03:03:48.040 --> 03:03:50.200
But you know, that's one area where you learn about something

03:03:50.200 --> 03:03:51.480
and go, ah, I wanna attack it.

03:03:51.480 --> 03:03:54.720
You know, build, don't destroy.

03:03:54.720 --> 03:03:57.400
Like build, like so often the tendency

03:03:57.400 --> 03:04:00.000
is to not like something, they wanna go attack it.

03:04:00.000 --> 03:04:02.600
Build something, build something to replace it.

03:04:02.600 --> 03:04:05.640
Build up, you know, attract people to your new thing.

03:04:05.640 --> 03:04:08.840
You'll get far more, be far better, right?

03:04:08.840 --> 03:04:12.640
You don't need to destroy something to build something else.

03:04:12.640 --> 03:04:14.920
So that's, I guess, generally.

03:04:14.920 --> 03:04:19.000
And then, you know, definitely like curiosity,

03:04:19.000 --> 03:04:20.880
you know, follow your curiosity

03:04:20.880 --> 03:04:24.560
and let it, don't just follow the money.

03:04:24.680 --> 03:04:25.840
And all of that, like you said,

03:04:25.840 --> 03:04:30.200
is grounded in family, friendship, and ultimately love.

03:04:30.200 --> 03:04:31.200
Yes.

03:04:31.200 --> 03:04:34.680
Which is a great way to end it.

03:04:34.680 --> 03:04:37.120
Travis, you're one of the most impactful people

03:04:37.120 --> 03:04:39.960
in the engineer and the computer science in the human world.

03:04:39.960 --> 03:04:43.560
So I truly appreciate everything you've done.

03:04:43.560 --> 03:04:44.920
And I really appreciate

03:04:44.920 --> 03:04:47.000
that you would spend your valuable time with me.

03:04:47.000 --> 03:04:47.840
It was an honor.

03:04:47.840 --> 03:04:48.880
It was a real pleasure for me.

03:04:48.880 --> 03:04:50.520
I appreciate that.

03:04:50.520 --> 03:04:52.160
Thanks for listening to this conversation

03:04:52.160 --> 03:04:54.040
with Travis Olyphant.

03:04:54.040 --> 03:04:55.360
To support this podcast,

03:04:55.360 --> 03:04:57.920
please check out our sponsors in the description.

03:04:57.920 --> 03:05:00.240
And now, let me leave you with something

03:05:00.240 --> 03:05:04.080
that in the programming world is called Hodgson's Law.

03:05:05.000 --> 03:05:08.160
Every sufficiently advanced Lisp application

03:05:08.160 --> 03:05:12.560
will eventually be re-implemented in Python.

03:05:12.560 --> 03:05:15.480
Thank you for listening and hope to see you next time.

03:05:24.040 --> 03:05:24.880
Thank you.

